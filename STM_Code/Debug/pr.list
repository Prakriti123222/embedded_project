
pr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009608  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  080097b8  080097b8  000197b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1b0  0800a1b0  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1b0  0800a1b0  0001a1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1b8  0800a1b8  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1b8  0800a1b8  0001a1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1bc  0800a1bc  0001a1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800a1c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020160  2**0
                  CONTENTS
 10 .bss          00001f08  20000160  20000160  00020160  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002068  20002068  00020160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b56  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003386  00000000  00000000  00036ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001080  00000000  00000000  0003a070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f38  00000000  00000000  0003b0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028cdf  00000000  00000000  0003c028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015774  00000000  00000000  00064d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb3dc  00000000  00000000  0007a47b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00165857  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004808  00000000  00000000  001658a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000160 	.word	0x20000160
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080097a0 	.word	0x080097a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000164 	.word	0x20000164
 80001ec:	080097a0 	.word	0x080097a0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <mmse>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float mmse(float x, float y, int n) {
 80005a4:	b480      	push	{r7}
 80005a6:	b087      	sub	sp, #28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80005ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80005b2:	6078      	str	r0, [r7, #4]
	float sum = 0.0, diff;
 80005b4:	f04f 0300 	mov.w	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
	diff = x - y;
 80005ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80005be:	edd7 7a02 	vldr	s15, [r7, #8]
 80005c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005c6:	edc7 7a04 	vstr	s15, [r7, #16]
	return diff * diff;
 80005ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80005ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
	return sum / n;
}
 80005d2:	eeb0 0a67 	vmov.f32	s0, s15
 80005d6:	371c      	adds	r7, #28
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	f5ad 5d97 	sub.w	sp, sp, #4832	; 0x12e0
 80005e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	// Initialize HAL, clock, ADC and USB
	HAL_Init();
 80005e8:	f000 fe9c 	bl	8001324 <HAL_Init>
	SystemClock_Config();
 80005ec:	f000 f9f8 	bl	80009e0 <SystemClock_Config>
	MX_ADC1_Init();
 80005f0:	f000 fa60 	bl	8000ab4 <MX_ADC1_Init>
	MX_USB_DEVICE_Init();
 80005f4:	f007 ff0c 	bl	8008410 <MX_USB_DEVICE_Init>

	// Start ADC conversion
	HAL_ADC_Start(&hadc1);
 80005f8:	48ba      	ldr	r0, [pc, #744]	; (80008e4 <main+0x304>)
 80005fa:	f000 ff6d 	bl	80014d8 <HAL_ADC_Start>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005fe:	f000 fe91 	bl	8001324 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000602:	f000 f9ed 	bl	80009e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000606:	f000 fb63 	bl	8000cd0 <MX_GPIO_Init>
	MX_ETH_Init();
 800060a:	f000 fae9 	bl	8000be0 <MX_ETH_Init>
	MX_USART3_UART_Init();
 800060e:	f000 fb35 	bl	8000c7c <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8000612:	f000 fa4f 	bl	8000ab4 <MX_ADC1_Init>
	MX_USB_DEVICE_Init();
 8000616:	f007 fefb 	bl	8008410 <MX_USB_DEVICE_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	float beats[600] = { 0 };
 800061a:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800061e:	f6a3 137c 	subw	r3, r3, #2428	; 0x97c
 8000622:	4618      	mov	r0, r3
 8000624:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8000628:	461a      	mov	r2, r3
 800062a:	2100      	movs	r1, #0
 800062c:	f008 fc50 	bl	8008ed0 <memset>
	float base[600] = { 80.00, 69.30, 69.00, 70.93, 72.87, 68.40, 71.33, 73.70,
 8000630:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8000634:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8000638:	4aab      	ldr	r2, [pc, #684]	; (80008e8 <main+0x308>)
 800063a:	4618      	mov	r0, r3
 800063c:	4611      	mov	r1, r2
 800063e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8000642:	461a      	mov	r2, r3
 8000644:	f008 fc36 	bl	8008eb4 <memcpy>
			84.70, 86.10, 89.23, 84.37, 84.63, 84.30, 83.00 };
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		while (HAL_GPIO_ReadPin(GPIOB, input_Pin) == 1) {
 8000648:	e19e      	b.n	8000988 <main+0x3a8>
			HAL_GPIO_WritePin(GPIOB, blue_Pin, SET); // on when start reading
 800064a:	2201      	movs	r2, #1
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	48a7      	ldr	r0, [pc, #668]	; (80008ec <main+0x30c>)
 8000650:	f002 f8d8 	bl	8002804 <HAL_GPIO_WritePin>

			int high = 0;  // to check for mmse
 8000654:	2300      	movs	r3, #0
 8000656:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800065a:	f102 021c 	add.w	r2, r2, #28
 800065e:	6013      	str	r3, [r2, #0]

			int limit_cross_low = 0;  // to check how many values were <60
 8000660:	2300      	movs	r3, #0
 8000662:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8000666:	f102 0218 	add.w	r2, r2, #24
 800066a:	6013      	str	r3, [r2, #0]
			int limit_cross_high = 0;    // to check how many values were >100
 800066c:	2300      	movs	r3, #0
 800066e:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8000672:	f102 0214 	add.w	r2, r2, #20
 8000676:	6013      	str	r3, [r2, #0]

			int curr = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800067e:	f102 0210 	add.w	r2, r2, #16
 8000682:	6013      	str	r3, [r2, #0]
			while (curr < 600 && HAL_GPIO_ReadPin(GPIOB, input_Pin) == 1) {
 8000684:	e091      	b.n	80007aa <main+0x1ca>

				HAL_ADC_Start(&hadc1); // start the adc
 8000686:	4897      	ldr	r0, [pc, #604]	; (80008e4 <main+0x304>)
 8000688:	f000 ff26 	bl	80014d8 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 800068c:	2164      	movs	r1, #100	; 0x64
 800068e:	4895      	ldr	r0, [pc, #596]	; (80008e4 <main+0x304>)
 8000690:	f000 fff4 	bl	800167c <HAL_ADC_PollForConversion>
				// Read analog value from ADC
				uint16_t value = HAL_ADC_GetValue(&hadc1);
 8000694:	4893      	ldr	r0, [pc, #588]	; (80008e4 <main+0x304>)
 8000696:	f001 f87c 	bl	8001792 <HAL_ADC_GetValue>
 800069a:	4603      	mov	r3, r0
 800069c:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80006a0:	f102 020a 	add.w	r2, r2, #10
 80006a4:	8013      	strh	r3, [r2, #0]

				beats[curr] = (float) value / 30.0;
 80006a6:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80006aa:	f103 030a 	add.w	r3, r3, #10
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	ee07 3a90 	vmov	s15, r3
 80006b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006b8:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 80006bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006c0:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80006c4:	f6a3 127c 	subw	r2, r3, #2428	; 0x97c
 80006c8:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80006cc:	f103 0310 	add.w	r3, r3, #16
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4413      	add	r3, r2
 80006d6:	edc3 7a00 	vstr	s15, [r3]

				// checking for limit_cross
				if (beats[curr] < 50.0) {
 80006da:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80006de:	f6a3 127c 	subw	r2, r3, #2428	; 0x97c
 80006e2:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80006e6:	f103 0310 	add.w	r3, r3, #16
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	edd3 7a00 	vldr	s15, [r3]
 80006f4:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80008f0 <main+0x310>
 80006f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000700:	d50b      	bpl.n	800071a <main+0x13a>
					limit_cross_low++;
 8000702:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8000706:	f103 0318 	add.w	r3, r3, #24
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8000712:	f102 0218 	add.w	r2, r2, #24
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	e01e      	b.n	8000758 <main+0x178>
				} else if (beats[curr] > 110.0) {
 800071a:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800071e:	f6a3 127c 	subw	r2, r3, #2428	; 0x97c
 8000722:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8000726:	f103 0310 	add.w	r3, r3, #16
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4413      	add	r3, r2
 8000730:	edd3 7a00 	vldr	s15, [r3]
 8000734:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80008f4 <main+0x314>
 8000738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800073c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000740:	dd0a      	ble.n	8000758 <main+0x178>
					limit_cross_high++;
 8000742:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8000746:	f103 0314 	add.w	r3, r3, #20
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8000752:	f102 0214 	add.w	r2, r2, #20
 8000756:	6013      	str	r3, [r2, #0]
				}

				sprintf(buffer, "%d\n", value);
 8000758:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800075c:	f103 030a 	add.w	r3, r3, #10
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	461a      	mov	r2, r3
 8000764:	4964      	ldr	r1, [pc, #400]	; (80008f8 <main+0x318>)
 8000766:	4865      	ldr	r0, [pc, #404]	; (80008fc <main+0x31c>)
 8000768:	f008 fbba 	bl	8008ee0 <siprintf>
				CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 800076c:	4863      	ldr	r0, [pc, #396]	; (80008fc <main+0x31c>)
 800076e:	f7ff fd3f 	bl	80001f0 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	b29b      	uxth	r3, r3
 8000776:	4619      	mov	r1, r3
 8000778:	4860      	ldr	r0, [pc, #384]	; (80008fc <main+0x31c>)
 800077a:	f007 ff07 	bl	800858c <CDC_Transmit_FS>
				curr++;
 800077e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8000782:	f103 0310 	add.w	r3, r3, #16
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800078e:	f102 0210 	add.w	r2, r2, #16
 8000792:	6013      	str	r3, [r2, #0]
				if (curr < 600) {
 8000794:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8000798:	f103 0310 	add.w	r3, r3, #16
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80007a2:	da02      	bge.n	80007aa <main+0x1ca>
					HAL_Delay(100);
 80007a4:	2064      	movs	r0, #100	; 0x64
 80007a6:	f000 fe2f 	bl	8001408 <HAL_Delay>
			while (curr < 600 && HAL_GPIO_ReadPin(GPIOB, input_Pin) == 1) {
 80007aa:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80007ae:	f103 0310 	add.w	r3, r3, #16
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80007b8:	da08      	bge.n	80007cc <main+0x1ec>
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	484b      	ldr	r0, [pc, #300]	; (80008ec <main+0x30c>)
 80007c0:	f002 f808 	bl	80027d4 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	f43f af5d 	beq.w	8000686 <main+0xa6>
				}
			}

			HAL_GPIO_WritePin(GPIOB, blue_Pin, RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2180      	movs	r1, #128	; 0x80
 80007d0:	4846      	ldr	r0, [pc, #280]	; (80008ec <main+0x30c>)
 80007d2:	f002 f817 	bl	8002804 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80007d6:	2064      	movs	r0, #100	; 0x64
 80007d8:	f000 fe16 	bl	8001408 <HAL_Delay>

			// for mmse
			int i = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80007e2:	f102 020c 	add.w	r2, r2, #12
 80007e6:	6013      	str	r3, [r2, #0]
			while (i < 600 && HAL_GPIO_ReadPin(GPIOB, input_Pin) == 1) {
 80007e8:	e04a      	b.n	8000880 <main+0x2a0>
				float mmse_curr = mmse(base[curr], beats[curr], 600);
 80007ea:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80007ee:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 80007f2:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80007f6:	f103 0310 	add.w	r3, r3, #16
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	edd3 7a00 	vldr	s15, [r3]
 8000804:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8000808:	f6a3 127c 	subw	r2, r3, #2428	; 0x97c
 800080c:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8000810:	f103 0310 	add.w	r3, r3, #16
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4413      	add	r3, r2
 800081a:	ed93 7a00 	vldr	s14, [r3]
 800081e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000822:	eef0 0a47 	vmov.f32	s1, s14
 8000826:	eeb0 0a67 	vmov.f32	s0, s15
 800082a:	f7ff febb 	bl	80005a4 <mmse>
 800082e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8000832:	f103 0304 	add.w	r3, r3, #4
 8000836:	ed83 0a00 	vstr	s0, [r3]
				if (mmse_curr > 10.0) {
 800083a:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800083e:	f103 0304 	add.w	r3, r3, #4
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800084a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800084e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000852:	dd0a      	ble.n	800086a <main+0x28a>
					high++;
 8000854:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8000858:	f103 031c 	add.w	r3, r3, #28
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	3301      	adds	r3, #1
 8000860:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8000864:	f102 021c 	add.w	r2, r2, #28
 8000868:	6013      	str	r3, [r2, #0]
				}
				i++;
 800086a:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800086e:	f103 030c 	add.w	r3, r3, #12
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800087a:	f102 020c 	add.w	r2, r2, #12
 800087e:	6013      	str	r3, [r2, #0]
			while (i < 600 && HAL_GPIO_ReadPin(GPIOB, input_Pin) == 1) {
 8000880:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8000884:	f103 030c 	add.w	r3, r3, #12
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800088e:	da07      	bge.n	80008a0 <main+0x2c0>
 8000890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000894:	4815      	ldr	r0, [pc, #84]	; (80008ec <main+0x30c>)
 8000896:	f001 ff9d 	bl	80027d4 <HAL_GPIO_ReadPin>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	d0a4      	beq.n	80007ea <main+0x20a>
			}

			if (HAL_GPIO_ReadPin(GPIOB, input_Pin) == 1) {
 80008a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a4:	4811      	ldr	r0, [pc, #68]	; (80008ec <main+0x30c>)
 80008a6:	f001 ff95 	bl	80027d4 <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d16b      	bne.n	8000988 <main+0x3a8>
				if (high > 600) {
 80008b0:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80008b4:	f103 031c 	add.w	r3, r3, #28
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80008be:	dd1f      	ble.n	8000900 <main+0x320>
					HAL_GPIO_WritePin(GPIOB, red_Pin, SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c6:	4809      	ldr	r0, [pc, #36]	; (80008ec <main+0x30c>)
 80008c8:	f001 ff9c 	bl	8002804 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, green_Pin, RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2101      	movs	r1, #1
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <main+0x30c>)
 80008d2:	f001 ff97 	bl	8002804 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, blue_Pin, RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	4804      	ldr	r0, [pc, #16]	; (80008ec <main+0x30c>)
 80008dc:	f001 ff92 	bl	8002804 <HAL_GPIO_WritePin>
 80008e0:	e01e      	b.n	8000920 <main+0x340>
 80008e2:	bf00      	nop
 80008e4:	200002f4 	.word	0x200002f4
 80008e8:	080097bc 	.word	0x080097bc
 80008ec:	40020400 	.word	0x40020400
 80008f0:	42480000 	.word	0x42480000
 80008f4:	42dc0000 	.word	0x42dc0000
 80008f8:	080097b8 	.word	0x080097b8
 80008fc:	20000430 	.word	0x20000430
				} else {
					HAL_GPIO_WritePin(GPIOB, green_Pin, SET);
 8000900:	2201      	movs	r2, #1
 8000902:	2101      	movs	r1, #1
 8000904:	4833      	ldr	r0, [pc, #204]	; (80009d4 <main+0x3f4>)
 8000906:	f001 ff7d 	bl	8002804 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, red_Pin, RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000910:	4830      	ldr	r0, [pc, #192]	; (80009d4 <main+0x3f4>)
 8000912:	f001 ff77 	bl	8002804 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, blue_Pin, RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	482e      	ldr	r0, [pc, #184]	; (80009d4 <main+0x3f4>)
 800091c:	f001 ff72 	bl	8002804 <HAL_GPIO_WritePin>
				}

				if (limit_cross_low > 600) {
 8000920:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8000924:	f103 0318 	add.w	r3, r3, #24
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800092e:	dd0b      	ble.n	8000948 <main+0x368>
					HAL_GPIO_WritePin(GPIOF, low_hr_Pin, SET);
 8000930:	2201      	movs	r2, #1
 8000932:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000936:	4828      	ldr	r0, [pc, #160]	; (80009d8 <main+0x3f8>)
 8000938:	f001 ff64 	bl	8002804 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, high_hr_Pin, RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000942:	4826      	ldr	r0, [pc, #152]	; (80009dc <main+0x3fc>)
 8000944:	f001 ff5e 	bl	8002804 <HAL_GPIO_WritePin>
//				if (limit_cross_high > 10) {
//					HAL_GPIO_WritePin(GPIOE, high_hr_Pin, SET);
//					HAL_GPIO_WritePin(GPIOF, low_hr_Pin, RESET);
//				}

				HAL_Delay(10000);
 8000948:	f242 7010 	movw	r0, #10000	; 0x2710
 800094c:	f000 fd5c 	bl	8001408 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, red_Pin, RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000956:	481f      	ldr	r0, [pc, #124]	; (80009d4 <main+0x3f4>)
 8000958:	f001 ff54 	bl	8002804 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, green_Pin, RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2101      	movs	r1, #1
 8000960:	481c      	ldr	r0, [pc, #112]	; (80009d4 <main+0x3f4>)
 8000962:	f001 ff4f 	bl	8002804 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, blue_Pin, RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	481a      	ldr	r0, [pc, #104]	; (80009d4 <main+0x3f4>)
 800096c:	f001 ff4a 	bl	8002804 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, low_hr_Pin, RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000976:	4818      	ldr	r0, [pc, #96]	; (80009d8 <main+0x3f8>)
 8000978:	f001 ff44 	bl	8002804 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, high_hr_Pin, RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000982:	4816      	ldr	r0, [pc, #88]	; (80009dc <main+0x3fc>)
 8000984:	f001 ff3e 	bl	8002804 <HAL_GPIO_WritePin>
		while (HAL_GPIO_ReadPin(GPIOB, input_Pin) == 1) {
 8000988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098c:	4811      	ldr	r0, [pc, #68]	; (80009d4 <main+0x3f4>)
 800098e:	f001 ff21 	bl	80027d4 <HAL_GPIO_ReadPin>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	f43f ae58 	beq.w	800064a <main+0x6a>
			}

		}
		HAL_GPIO_WritePin(GPIOB, red_Pin, RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <main+0x3f4>)
 80009a2:	f001 ff2f 	bl	8002804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, green_Pin, RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2101      	movs	r1, #1
 80009aa:	480a      	ldr	r0, [pc, #40]	; (80009d4 <main+0x3f4>)
 80009ac:	f001 ff2a 	bl	8002804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, blue_Pin, RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2180      	movs	r1, #128	; 0x80
 80009b4:	4807      	ldr	r0, [pc, #28]	; (80009d4 <main+0x3f4>)
 80009b6:	f001 ff25 	bl	8002804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, low_hr_Pin, RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <main+0x3f8>)
 80009c2:	f001 ff1f 	bl	8002804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, high_hr_Pin, RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009cc:	4803      	ldr	r0, [pc, #12]	; (80009dc <main+0x3fc>)
 80009ce:	f001 ff19 	bl	8002804 <HAL_GPIO_WritePin>
		while (HAL_GPIO_ReadPin(GPIOB, input_Pin) == 1) {
 80009d2:	e7d9      	b.n	8000988 <main+0x3a8>
 80009d4:	40020400 	.word	0x40020400
 80009d8:	40021400 	.word	0x40021400
 80009dc:	40021000 	.word	0x40021000

080009e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	; 0x50
 80009e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	2230      	movs	r2, #48	; 0x30
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f008 fa6e 	bl	8008ed0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	4b28      	ldr	r3, [pc, #160]	; (8000aac <SystemClock_Config+0xcc>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a27      	ldr	r2, [pc, #156]	; (8000aac <SystemClock_Config+0xcc>)
 8000a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <SystemClock_Config+0xcc>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a21      	ldr	r2, [pc, #132]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a40:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	2302      	movs	r3, #2
 8000a48:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000a50:	2304      	movs	r3, #4
 8000a52:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000a54:	23a8      	movs	r3, #168	; 0xa8
 8000a56:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a60:	f107 0320 	add.w	r3, r7, #32
 8000a64:	4618      	mov	r0, r3
 8000a66:	f003 f963 	bl	8003d30 <HAL_RCC_OscConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0x94>
		Error_Handler();
 8000a70:	f000 fa32 	bl	8000ed8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a74:	230f      	movs	r3, #15
 8000a76:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a84:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2105      	movs	r1, #5
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 fbc4 	bl	8004220 <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0xc2>
		Error_Handler();
 8000a9e:	f000 fa1b 	bl	8000ed8 <Error_Handler>
	}
}
 8000aa2:	bf00      	nop
 8000aa4:	3750      	adds	r7, #80	; 0x50
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40007000 	.word	0x40007000

08000ab4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000aba:	463b      	mov	r3, r7
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN ADC1_Init 1 */
	// Initialize ADC handle and configuration structures
	hadc1.Instance = ADC1;
 8000ac6:	4b43      	ldr	r3, [pc, #268]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000ac8:	4a43      	ldr	r2, [pc, #268]	; (8000bd8 <MX_ADC1_Init+0x124>)
 8000aca:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000acc:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ad2:	4b40      	ldr	r3, [pc, #256]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000ad8:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000ade:	4b3d      	ldr	r3, [pc, #244]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ae4:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.NbrOfDiscConversion = 0;
 8000aec:	4b39      	ldr	r3, [pc, #228]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000af2:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af8:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000afa:	4a38      	ldr	r2, [pc, #224]	; (8000bdc <MX_ADC1_Init+0x128>)
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000b04:	4b33      	ldr	r3, [pc, #204]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b0a:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b12:	4b30      	ldr	r3, [pc, #192]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	615a      	str	r2, [r3, #20]
	// Initialize ADC channel configuration structure
	sConfig.Channel = ADC_CHANNEL_0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
	sConfig.Offset = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]

	// Configure ADC and ADC channel
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000b28:	482a      	ldr	r0, [pc, #168]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b2a:	f000 fc91 	bl	8001450 <HAL_ADC_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_ADC1_Init+0x84>
		Error_Handler();
 8000b34:	f000 f9d0 	bl	8000ed8 <Error_Handler>
	}
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000b38:	463b      	mov	r3, r7
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4825      	ldr	r0, [pc, #148]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b3e:	f000 fe35 	bl	80017ac <HAL_ADC_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC1_Init+0x98>
		Error_Handler();
 8000b48:	f000 f9c6 	bl	8000ed8 <Error_Handler>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000b4c:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b4e:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <MX_ADC1_Init+0x124>)
 8000b50:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b52:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b58:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000b60:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b7c:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <MX_ADC1_Init+0x128>)
 8000b7e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000b9a:	480e      	ldr	r0, [pc, #56]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000b9c:	f000 fc58 	bl	8001450 <HAL_ADC_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_ADC1_Init+0xf6>
		Error_Handler();
 8000ba6:	f000 f997 	bl	8000ed8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <MX_ADC1_Init+0x120>)
 8000bbc:	f000 fdf6 	bl	80017ac <HAL_ADC_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_ADC1_Init+0x116>
		Error_Handler();
 8000bc6:	f000 f987 	bl	8000ed8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200002f4 	.word	0x200002f4
 8000bd8:	40012000 	.word	0x40012000
 8000bdc:	0f000001 	.word	0x0f000001

08000be0 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_ETH_Init+0x84>)
 8000be6:	4a20      	ldr	r2, [pc, #128]	; (8000c68 <MX_ETH_Init+0x88>)
 8000be8:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <MX_ETH_Init+0x8c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <MX_ETH_Init+0x8c>)
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_ETH_Init+0x8c>)
 8000bf8:	22e1      	movs	r2, #225	; 0xe1
 8000bfa:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_ETH_Init+0x8c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_ETH_Init+0x8c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_ETH_Init+0x8c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_ETH_Init+0x84>)
 8000c10:	4a16      	ldr	r2, [pc, #88]	; (8000c6c <MX_ETH_Init+0x8c>)
 8000c12:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_ETH_Init+0x84>)
 8000c16:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c1a:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_ETH_Init+0x84>)
 8000c1e:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <MX_ETH_Init+0x90>)
 8000c20:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <MX_ETH_Init+0x84>)
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <MX_ETH_Init+0x94>)
 8000c26:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_ETH_Init+0x84>)
 8000c2a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c2e:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <MX_ETH_Init+0x84>)
 8000c32:	f001 f8fb 	bl	8001e2c <HAL_ETH_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ETH_Init+0x60>
		Error_Handler();
 8000c3c:	f000 f94c 	bl	8000ed8 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000c40:	2238      	movs	r2, #56	; 0x38
 8000c42:	2100      	movs	r1, #0
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <MX_ETH_Init+0x98>)
 8000c46:	f008 f943 	bl	8008ed0 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_ETH_Init+0x98>)
 8000c4c:	2221      	movs	r2, #33	; 0x21
 8000c4e:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_ETH_Init+0x98>)
 8000c52:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000c56:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <MX_ETH_Init+0x98>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000033c 	.word	0x2000033c
 8000c68:	40028000 	.word	0x40028000
 8000c6c:	2000043c 	.word	0x2000043c
 8000c70:	20000254 	.word	0x20000254
 8000c74:	200001b4 	.word	0x200001b4
 8000c78:	2000017c 	.word	0x2000017c

08000c7c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <MX_USART3_UART_Init+0x50>)
 8000c84:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c8c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000cb4:	f003 fcd4 	bl	8004660 <HAL_UART_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8000cbe:	f000 f90b 	bl	8000ed8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200003ec 	.word	0x200003ec
 8000ccc:	40004800 	.word	0x40004800

08000cd0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08e      	sub	sp, #56	; 0x38
 8000cd4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
 8000cea:	4b75      	ldr	r3, [pc, #468]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a74      	ldr	r2, [pc, #464]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b72      	ldr	r3, [pc, #456]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	623b      	str	r3, [r7, #32]
 8000d00:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	4b6e      	ldr	r3, [pc, #440]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a6d      	ldr	r2, [pc, #436]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b6b      	ldr	r3, [pc, #428]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1a:	61fb      	str	r3, [r7, #28]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	4b67      	ldr	r3, [pc, #412]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a66      	ldr	r2, [pc, #408]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b64      	ldr	r3, [pc, #400]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	4b60      	ldr	r3, [pc, #384]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a5f      	ldr	r2, [pc, #380]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b5d      	ldr	r3, [pc, #372]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b59      	ldr	r3, [pc, #356]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a58      	ldr	r2, [pc, #352]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d60:	f043 0320 	orr.w	r3, r3, #32
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b56      	ldr	r3, [pc, #344]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0320 	and.w	r3, r3, #32
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b52      	ldr	r3, [pc, #328]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a51      	ldr	r2, [pc, #324]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d7c:	f043 0310 	orr.w	r3, r3, #16
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b4f      	ldr	r3, [pc, #316]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0310 	and.w	r3, r3, #16
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	4b4b      	ldr	r3, [pc, #300]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a4a      	ldr	r2, [pc, #296]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b48      	ldr	r3, [pc, #288]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b44      	ldr	r3, [pc, #272]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a43      	ldr	r2, [pc, #268]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b41      	ldr	r3, [pc, #260]	; (8000ec0 <MX_GPIO_Init+0x1f0>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, green_Pin | red_Pin | blue_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000dcc:	483d      	ldr	r0, [pc, #244]	; (8000ec4 <MX_GPIO_Init+0x1f4>)
 8000dce:	f001 fd19 	bl	8002804 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(low_hr_GPIO_Port, low_hr_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd8:	483b      	ldr	r0, [pc, #236]	; (8000ec8 <MX_GPIO_Init+0x1f8>)
 8000dda:	f001 fd13 	bl	8002804 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(high_hr_GPIO_Port, high_hr_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de4:	4839      	ldr	r0, [pc, #228]	; (8000ecc <MX_GPIO_Init+0x1fc>)
 8000de6:	f001 fd0d 	bl	8002804 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000dea:	2200      	movs	r2, #0
 8000dec:	2140      	movs	r1, #64	; 0x40
 8000dee:	4838      	ldr	r0, [pc, #224]	; (8000ed0 <MX_GPIO_Init+0x200>)
 8000df0:	f001 fd08 	bl	8002804 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4832      	ldr	r0, [pc, #200]	; (8000ed4 <MX_GPIO_Init+0x204>)
 8000e0c:	f001 fb36 	bl	800247c <HAL_GPIO_Init>

	/*Configure GPIO pins : green_Pin red_Pin blue_Pin */
	GPIO_InitStruct.Pin = green_Pin | red_Pin | blue_Pin;
 8000e10:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	4826      	ldr	r0, [pc, #152]	; (8000ec4 <MX_GPIO_Init+0x1f4>)
 8000e2a:	f001 fb27 	bl	800247c <HAL_GPIO_Init>

	/*Configure GPIO pin : low_hr_Pin */
	GPIO_InitStruct.Pin = low_hr_Pin;
 8000e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(low_hr_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	4820      	ldr	r0, [pc, #128]	; (8000ec8 <MX_GPIO_Init+0x1f8>)
 8000e48:	f001 fb18 	bl	800247c <HAL_GPIO_Init>

	/*Configure GPIO pin : high_hr_Pin */
	GPIO_InitStruct.Pin = high_hr_Pin;
 8000e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e56:	2302      	movs	r3, #2
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(high_hr_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	4819      	ldr	r0, [pc, #100]	; (8000ecc <MX_GPIO_Init+0x1fc>)
 8000e66:	f001 fb09 	bl	800247c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e6a:	2340      	movs	r3, #64	; 0x40
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4813      	ldr	r0, [pc, #76]	; (8000ed0 <MX_GPIO_Init+0x200>)
 8000e82:	f001 fafb 	bl	800247c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MX_GPIO_Init+0x200>)
 8000e9a:	f001 faef 	bl	800247c <HAL_GPIO_Init>

	/*Configure GPIO pin : input_Pin */
	GPIO_InitStruct.Pin = input_Pin;
 8000e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(input_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_GPIO_Init+0x1f4>)
 8000eb4:	f001 fae2 	bl	800247c <HAL_GPIO_Init>

}
 8000eb8:	bf00      	nop
 8000eba:	3738      	adds	r7, #56	; 0x38
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	40021400 	.word	0x40021400
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40021800 	.word	0x40021800
 8000ed4:	40020800 	.word	0x40020800

08000ed8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ee0:	e7fe      	b.n	8000ee0 <Error_Handler+0x8>
	...

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <HAL_MspInit+0x4c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <HAL_MspInit+0x4c>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_MspInit+0x4c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <HAL_ADC_MspInit+0x7c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d127      	bne.n	8000fa6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <HAL_ADC_MspInit+0x80>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a15      	ldr	r2, [pc, #84]	; (8000fb4 <HAL_ADC_MspInit+0x80>)
 8000f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <HAL_ADC_MspInit+0x80>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <HAL_ADC_MspInit+0x80>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <HAL_ADC_MspInit+0x80>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <HAL_ADC_MspInit+0x80>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f92:	2303      	movs	r3, #3
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <HAL_ADC_MspInit+0x84>)
 8000fa2:	f001 fa6b 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3728      	adds	r7, #40	; 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40012000 	.word	0x40012000
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020000 	.word	0x40020000

08000fbc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08e      	sub	sp, #56	; 0x38
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a55      	ldr	r2, [pc, #340]	; (8001130 <HAL_ETH_MspInit+0x174>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	f040 80a4 	bne.w	8001128 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
 8000fe4:	4b53      	ldr	r3, [pc, #332]	; (8001134 <HAL_ETH_MspInit+0x178>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a52      	ldr	r2, [pc, #328]	; (8001134 <HAL_ETH_MspInit+0x178>)
 8000fea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b50      	ldr	r3, [pc, #320]	; (8001134 <HAL_ETH_MspInit+0x178>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff8:	623b      	str	r3, [r7, #32]
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	4b4c      	ldr	r3, [pc, #304]	; (8001134 <HAL_ETH_MspInit+0x178>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a4b      	ldr	r2, [pc, #300]	; (8001134 <HAL_ETH_MspInit+0x178>)
 8001006:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
 800100c:	4b49      	ldr	r3, [pc, #292]	; (8001134 <HAL_ETH_MspInit+0x178>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
 800101c:	4b45      	ldr	r3, [pc, #276]	; (8001134 <HAL_ETH_MspInit+0x178>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	4a44      	ldr	r2, [pc, #272]	; (8001134 <HAL_ETH_MspInit+0x178>)
 8001022:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001026:	6313      	str	r3, [r2, #48]	; 0x30
 8001028:	4b42      	ldr	r3, [pc, #264]	; (8001134 <HAL_ETH_MspInit+0x178>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	4b3e      	ldr	r3, [pc, #248]	; (8001134 <HAL_ETH_MspInit+0x178>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	4a3d      	ldr	r2, [pc, #244]	; (8001134 <HAL_ETH_MspInit+0x178>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	6313      	str	r3, [r2, #48]	; 0x30
 8001044:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <HAL_ETH_MspInit+0x178>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	4b37      	ldr	r3, [pc, #220]	; (8001134 <HAL_ETH_MspInit+0x178>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	4a36      	ldr	r2, [pc, #216]	; (8001134 <HAL_ETH_MspInit+0x178>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6313      	str	r3, [r2, #48]	; 0x30
 8001060:	4b34      	ldr	r3, [pc, #208]	; (8001134 <HAL_ETH_MspInit+0x178>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	4b30      	ldr	r3, [pc, #192]	; (8001134 <HAL_ETH_MspInit+0x178>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	4a2f      	ldr	r2, [pc, #188]	; (8001134 <HAL_ETH_MspInit+0x178>)
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	6313      	str	r3, [r2, #48]	; 0x30
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <HAL_ETH_MspInit+0x178>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <HAL_ETH_MspInit+0x178>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <HAL_ETH_MspInit+0x178>)
 8001092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001096:	6313      	str	r3, [r2, #48]	; 0x30
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <HAL_ETH_MspInit+0x178>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010a4:	2332      	movs	r3, #50	; 0x32
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b4:	230b      	movs	r3, #11
 80010b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010bc:	4619      	mov	r1, r3
 80010be:	481e      	ldr	r0, [pc, #120]	; (8001138 <HAL_ETH_MspInit+0x17c>)
 80010c0:	f001 f9dc 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010c4:	2386      	movs	r3, #134	; 0x86
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d4:	230b      	movs	r3, #11
 80010d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4817      	ldr	r0, [pc, #92]	; (800113c <HAL_ETH_MspInit+0x180>)
 80010e0:	f001 f9cc 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010f6:	230b      	movs	r3, #11
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	480f      	ldr	r0, [pc, #60]	; (8001140 <HAL_ETH_MspInit+0x184>)
 8001102:	f001 f9bb 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001106:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001118:	230b      	movs	r3, #11
 800111a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800111c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001120:	4619      	mov	r1, r3
 8001122:	4808      	ldr	r0, [pc, #32]	; (8001144 <HAL_ETH_MspInit+0x188>)
 8001124:	f001 f9aa 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001128:	bf00      	nop
 800112a:	3738      	adds	r7, #56	; 0x38
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40028000 	.word	0x40028000
 8001134:	40023800 	.word	0x40023800
 8001138:	40020800 	.word	0x40020800
 800113c:	40020000 	.word	0x40020000
 8001140:	40020400 	.word	0x40020400
 8001144:	40021800 	.word	0x40021800

08001148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a19      	ldr	r2, [pc, #100]	; (80011cc <HAL_UART_MspInit+0x84>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d12c      	bne.n	80011c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_UART_MspInit+0x88>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <HAL_UART_MspInit+0x88>)
 8001174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_UART_MspInit+0x88>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_UART_MspInit+0x88>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <HAL_UART_MspInit+0x88>)
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_UART_MspInit+0x88>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011b4:	2307      	movs	r3, #7
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <HAL_UART_MspInit+0x8c>)
 80011c0:	f001 f95c 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40004800 	.word	0x40004800
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020c00 	.word	0x40020c00

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <NMI_Handler+0x4>

080011de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <MemManage_Handler+0x4>

080011ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001224:	f000 f8d0 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <OTG_FS_IRQHandler+0x10>)
 8001232:	f001 fc50 	bl	8002ad6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000192c 	.word	0x2000192c

08001240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <_sbrk+0x5c>)
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <_sbrk+0x60>)
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <_sbrk+0x64>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <_sbrk+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	429a      	cmp	r2, r3
 800126e:	d207      	bcs.n	8001280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001270:	f007 fdf6 	bl	8008e60 <__errno>
 8001274:	4603      	mov	r3, r0
 8001276:	220c      	movs	r2, #12
 8001278:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	e009      	b.n	8001294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <_sbrk+0x64>)
 8001290:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001292:	68fb      	ldr	r3, [r7, #12]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20030000 	.word	0x20030000
 80012a0:	00000400 	.word	0x00000400
 80012a4:	20000444 	.word	0x20000444
 80012a8:	20002068 	.word	0x20002068

080012ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <SystemInit+0x20>)
 80012b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <SystemInit+0x20>)
 80012b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001308 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012d6:	490e      	ldr	r1, [pc, #56]	; (8001310 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012d8:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012dc:	e002      	b.n	80012e4 <LoopCopyDataInit>

080012de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e2:	3304      	adds	r3, #4

080012e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e8:	d3f9      	bcc.n	80012de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012ec:	4c0b      	ldr	r4, [pc, #44]	; (800131c <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f0:	e001      	b.n	80012f6 <LoopFillZerobss>

080012f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f4:	3204      	adds	r2, #4

080012f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f8:	d3fb      	bcc.n	80012f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012fa:	f7ff ffd7 	bl	80012ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fe:	f007 fdb5 	bl	8008e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001302:	f7ff f96d 	bl	80005e0 <main>
  bx  lr    
 8001306:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001308:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001310:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001314:	0800a1c0 	.word	0x0800a1c0
  ldr r2, =_sbss
 8001318:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 800131c:	20002068 	.word	0x20002068

08001320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC_IRQHandler>
	...

08001324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <HAL_Init+0x40>)
 800132e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001332:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_Init+0x40>)
 800133a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_Init+0x40>)
 8001346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134c:	2003      	movs	r0, #3
 800134e:	f000 fd2b 	bl	8001da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001352:	2000      	movs	r0, #0
 8001354:	f000 f808 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001358:	f7ff fdc4 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023c00 	.word	0x40023c00

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x54>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_InitTick+0x58>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fd43 	bl	8001e12 <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00e      	b.n	80013b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d80a      	bhi.n	80013b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f000 fd0b 	bl	8001dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_InitTick+0x5c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000008 	.word	0x20000008
 80013c4:	20000004 	.word	0x20000004

080013c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000448 	.word	0x20000448

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000448 	.word	0x20000448

08001408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff ffee 	bl	80013f0 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001420:	d005      	beq.n	800142e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_Delay+0x44>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800142e:	bf00      	nop
 8001430:	f7ff ffde 	bl	80013f0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8f7      	bhi.n	8001430 <HAL_Delay+0x28>
  {
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008

08001450 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e033      	b.n	80014ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fd60 	bl	8000f34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	2b00      	cmp	r3, #0
 800148c:	d118      	bne.n	80014c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001496:	f023 0302 	bic.w	r3, r3, #2
 800149a:	f043 0202 	orr.w	r2, r3, #2
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 fab4 	bl	8001a10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f023 0303 	bic.w	r3, r3, #3
 80014b6:	f043 0201 	orr.w	r2, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
 80014be:	e001      	b.n	80014c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_ADC_Start+0x1a>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e0b2      	b.n	8001658 <HAL_ADC_Start+0x180>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b01      	cmp	r3, #1
 8001506:	d018      	beq.n	800153a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001518:	4b52      	ldr	r3, [pc, #328]	; (8001664 <HAL_ADC_Start+0x18c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a52      	ldr	r2, [pc, #328]	; (8001668 <HAL_ADC_Start+0x190>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	0c9a      	lsrs	r2, r3, #18
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800152c:	e002      	b.n	8001534 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3b01      	subs	r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f9      	bne.n	800152e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b01      	cmp	r3, #1
 8001546:	d17a      	bne.n	800163e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001572:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001586:	d106      	bne.n	8001596 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158c:	f023 0206 	bic.w	r2, r3, #6
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	645a      	str	r2, [r3, #68]	; 0x44
 8001594:	e002      	b.n	800159c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015a4:	4b31      	ldr	r3, [pc, #196]	; (800166c <HAL_ADC_Start+0x194>)
 80015a6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d12a      	bne.n	8001614 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a2b      	ldr	r2, [pc, #172]	; (8001670 <HAL_ADC_Start+0x198>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d015      	beq.n	80015f4 <HAL_ADC_Start+0x11c>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a29      	ldr	r2, [pc, #164]	; (8001674 <HAL_ADC_Start+0x19c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d105      	bne.n	80015de <HAL_ADC_Start+0x106>
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <HAL_ADC_Start+0x194>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 031f 	and.w	r3, r3, #31
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00a      	beq.n	80015f4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a25      	ldr	r2, [pc, #148]	; (8001678 <HAL_ADC_Start+0x1a0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d136      	bne.n	8001656 <HAL_ADC_Start+0x17e>
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_ADC_Start+0x194>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d130      	bne.n	8001656 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d129      	bne.n	8001656 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	e020      	b.n	8001656 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a15      	ldr	r2, [pc, #84]	; (8001670 <HAL_ADC_Start+0x198>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d11b      	bne.n	8001656 <HAL_ADC_Start+0x17e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d114      	bne.n	8001656 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	e00b      	b.n	8001656 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f043 0210 	orr.w	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f043 0201 	orr.w	r2, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	20000000 	.word	0x20000000
 8001668:	431bde83 	.word	0x431bde83
 800166c:	40012300 	.word	0x40012300
 8001670:	40012000 	.word	0x40012000
 8001674:	40012100 	.word	0x40012100
 8001678:	40012200 	.word	0x40012200

0800167c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001698:	d113      	bne.n	80016c2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016a8:	d10b      	bne.n	80016c2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f043 0220 	orr.w	r2, r3, #32
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e063      	b.n	800178a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80016c2:	f7ff fe95 	bl	80013f0 <HAL_GetTick>
 80016c6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016c8:	e021      	b.n	800170e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	d01d      	beq.n	800170e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d007      	beq.n	80016e8 <HAL_ADC_PollForConversion+0x6c>
 80016d8:	f7ff fe8a 	bl	80013f0 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d212      	bcs.n	800170e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d00b      	beq.n	800170e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f043 0204 	orr.w	r2, r3, #4
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e03d      	b.n	800178a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b02      	cmp	r3, #2
 800171a:	d1d6      	bne.n	80016ca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f06f 0212 	mvn.w	r2, #18
 8001724:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d123      	bne.n	8001788 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001744:	2b00      	cmp	r3, #0
 8001746:	d11f      	bne.n	8001788 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001760:	2b00      	cmp	r3, #0
 8001762:	d111      	bne.n	8001788 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x1c>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e113      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x244>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b09      	cmp	r3, #9
 80017d6:	d925      	bls.n	8001824 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68d9      	ldr	r1, [r3, #12]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	3b1e      	subs	r3, #30
 80017ee:	2207      	movs	r2, #7
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43da      	mvns	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	400a      	ands	r2, r1
 80017fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68d9      	ldr	r1, [r3, #12]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	4603      	mov	r3, r0
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4403      	add	r3, r0
 8001816:	3b1e      	subs	r3, #30
 8001818:	409a      	lsls	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	e022      	b.n	800186a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6919      	ldr	r1, [r3, #16]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	b29b      	uxth	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	4613      	mov	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4413      	add	r3, r2
 8001838:	2207      	movs	r2, #7
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	400a      	ands	r2, r1
 8001846:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6919      	ldr	r1, [r3, #16]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	4618      	mov	r0, r3
 800185a:	4603      	mov	r3, r0
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4403      	add	r3, r0
 8001860:	409a      	lsls	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b06      	cmp	r3, #6
 8001870:	d824      	bhi.n	80018bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	3b05      	subs	r3, #5
 8001884:	221f      	movs	r2, #31
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	400a      	ands	r2, r1
 8001892:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	3b05      	subs	r3, #5
 80018ae:	fa00 f203 	lsl.w	r2, r0, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	635a      	str	r2, [r3, #52]	; 0x34
 80018ba:	e04c      	b.n	8001956 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b0c      	cmp	r3, #12
 80018c2:	d824      	bhi.n	800190e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	3b23      	subs	r3, #35	; 0x23
 80018d6:	221f      	movs	r2, #31
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43da      	mvns	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	400a      	ands	r2, r1
 80018e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	3b23      	subs	r3, #35	; 0x23
 8001900:	fa00 f203 	lsl.w	r2, r0, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
 800190c:	e023      	b.n	8001956 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	3b41      	subs	r3, #65	; 0x41
 8001920:	221f      	movs	r2, #31
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	400a      	ands	r2, r1
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	4618      	mov	r0, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	3b41      	subs	r3, #65	; 0x41
 800194a:	fa00 f203 	lsl.w	r2, r0, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001956:	4b29      	ldr	r3, [pc, #164]	; (80019fc <HAL_ADC_ConfigChannel+0x250>)
 8001958:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a28      	ldr	r2, [pc, #160]	; (8001a00 <HAL_ADC_ConfigChannel+0x254>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d10f      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1d8>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b12      	cmp	r3, #18
 800196a:	d10b      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <HAL_ADC_ConfigChannel+0x254>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d12b      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x23a>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1c      	ldr	r2, [pc, #112]	; (8001a04 <HAL_ADC_ConfigChannel+0x258>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d003      	beq.n	80019a0 <HAL_ADC_ConfigChannel+0x1f4>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b11      	cmp	r3, #17
 800199e:	d122      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <HAL_ADC_ConfigChannel+0x258>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d111      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_ADC_ConfigChannel+0x25c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a11      	ldr	r2, [pc, #68]	; (8001a0c <HAL_ADC_ConfigChannel+0x260>)
 80019c8:	fba2 2303 	umull	r2, r3, r2, r3
 80019cc:	0c9a      	lsrs	r2, r3, #18
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019d8:	e002      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	3b01      	subs	r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f9      	bne.n	80019da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	40012300 	.word	0x40012300
 8001a00:	40012000 	.word	0x40012000
 8001a04:	10000012 	.word	0x10000012
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	431bde83 	.word	0x431bde83

08001a10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a18:	4b79      	ldr	r3, [pc, #484]	; (8001c00 <ADC_Init+0x1f0>)
 8001a1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6859      	ldr	r1, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	021a      	lsls	r2, r3, #8
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6859      	ldr	r1, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6899      	ldr	r1, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	4a58      	ldr	r2, [pc, #352]	; (8001c04 <ADC_Init+0x1f4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d022      	beq.n	8001aee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ab6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6899      	ldr	r1, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ad8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6899      	ldr	r1, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	e00f      	b.n	8001b0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0202 	bic.w	r2, r2, #2
 8001b1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6899      	ldr	r1, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	7e1b      	ldrb	r3, [r3, #24]
 8001b28:	005a      	lsls	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01b      	beq.n	8001b74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6859      	ldr	r1, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	3b01      	subs	r3, #1
 8001b68:	035a      	lsls	r2, r3, #13
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	e007      	b.n	8001b84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	051a      	lsls	r2, r3, #20
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6899      	ldr	r1, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bc6:	025a      	lsls	r2, r3, #9
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6899      	ldr	r1, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	029a      	lsls	r2, r3, #10
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	609a      	str	r2, [r3, #8]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40012300 	.word	0x40012300
 8001c04:	0f000001 	.word	0x0f000001

08001c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <__NVIC_GetPriorityGrouping+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	db0b      	blt.n	8001c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	f003 021f 	and.w	r2, r3, #31
 8001c84:	4907      	ldr	r1, [pc, #28]	; (8001ca4 <__NVIC_EnableIRQ+0x38>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e100 	.word	0xe000e100

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	; (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d74:	d301      	bcc.n	8001d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00f      	b.n	8001d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <SysTick_Config+0x40>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d82:	210f      	movs	r1, #15
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f7ff ff8e 	bl	8001ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <SysTick_Config+0x40>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <SysTick_Config+0x40>)
 8001d94:	2207      	movs	r2, #7
 8001d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	e000e010 	.word	0xe000e010

08001da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff29 	bl	8001c08 <__NVIC_SetPriorityGrouping>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd0:	f7ff ff3e 	bl	8001c50 <__NVIC_GetPriorityGrouping>
 8001dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f7ff ff8e 	bl	8001cfc <NVIC_EncodePriority>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff5d 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff31 	bl	8001c6c <__NVIC_EnableIRQ>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ffa2 	bl	8001d64 <SysTick_Config>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e06c      	b.n	8001f18 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d106      	bne.n	8001e56 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2223      	movs	r2, #35	; 0x23
 8001e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff f8b3 	bl	8000fbc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <HAL_ETH_Init+0xf4>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	4a30      	ldr	r2, [pc, #192]	; (8001f20 <HAL_ETH_Init+0xf4>)
 8001e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e64:	6453      	str	r3, [r2, #68]	; 0x44
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <HAL_ETH_Init+0xf4>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001e72:	4b2c      	ldr	r3, [pc, #176]	; (8001f24 <HAL_ETH_Init+0xf8>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4a2b      	ldr	r2, [pc, #172]	; (8001f24 <HAL_ETH_Init+0xf8>)
 8001e78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e7c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001e7e:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <HAL_ETH_Init+0xf8>)
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	4927      	ldr	r1, [pc, #156]	; (8001f24 <HAL_ETH_Init+0xf8>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <HAL_ETH_Init+0xf8>)
 8001e8e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ea6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea8:	f7ff faa2 	bl	80013f0 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001eae:	e011      	b.n	8001ed4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001eb0:	f7ff fa9e 	bl	80013f0 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ebe:	d909      	bls.n	8001ed4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	22e0      	movs	r2, #224	; 0xe0
 8001ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e021      	b.n	8001f18 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1e4      	bne.n	8001eb0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f958 	bl	800219c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f9ff 	bl	80022f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fa55 	bl	80023a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	461a      	mov	r2, r3
 8001efe:	2100      	movs	r1, #0
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f9bd 	bl	8002280 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2210      	movs	r2, #16
 8001f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40013800 	.word	0x40013800

08001f28 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	4b51      	ldr	r3, [pc, #324]	; (8002084 <ETH_SetMACConfig+0x15c>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	7c1b      	ldrb	r3, [r3, #16]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <ETH_SetMACConfig+0x28>
 8001f4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f4e:	e000      	b.n	8001f52 <ETH_SetMACConfig+0x2a>
 8001f50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	7c5b      	ldrb	r3, [r3, #17]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d102      	bne.n	8001f60 <ETH_SetMACConfig+0x38>
 8001f5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f5e:	e000      	b.n	8001f62 <ETH_SetMACConfig+0x3a>
 8001f60:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f62:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f68:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	7fdb      	ldrb	r3, [r3, #31]
 8001f6e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001f70:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	7f92      	ldrb	r2, [r2, #30]
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	d102      	bne.n	8001f86 <ETH_SetMACConfig+0x5e>
 8001f80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f84:	e000      	b.n	8001f88 <ETH_SetMACConfig+0x60>
 8001f86:	2200      	movs	r2, #0
                        macconf->Speed |
 8001f88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	7f1b      	ldrb	r3, [r3, #28]
 8001f8e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f90:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	791b      	ldrb	r3, [r3, #4]
 8001f9c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001fa6:	2a00      	cmp	r2, #0
 8001fa8:	d102      	bne.n	8001fb0 <ETH_SetMACConfig+0x88>
 8001faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fae:	e000      	b.n	8001fb2 <ETH_SetMACConfig+0x8a>
 8001fb0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001fb2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	7bdb      	ldrb	r3, [r3, #15]
 8001fb8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fc8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f7ff fa10 	bl	8001408 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ffe:	4013      	ands	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002006:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800200e:	2a00      	cmp	r2, #0
 8002010:	d101      	bne.n	8002016 <ETH_SetMACConfig+0xee>
 8002012:	2280      	movs	r2, #128	; 0x80
 8002014:	e000      	b.n	8002018 <ETH_SetMACConfig+0xf0>
 8002016:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002018:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800201e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002026:	2a01      	cmp	r2, #1
 8002028:	d101      	bne.n	800202e <ETH_SetMACConfig+0x106>
 800202a:	2208      	movs	r2, #8
 800202c:	e000      	b.n	8002030 <ETH_SetMACConfig+0x108>
 800202e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002030:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002038:	2a01      	cmp	r2, #1
 800203a:	d101      	bne.n	8002040 <ETH_SetMACConfig+0x118>
 800203c:	2204      	movs	r2, #4
 800203e:	e000      	b.n	8002042 <ETH_SetMACConfig+0x11a>
 8002040:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002042:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800204a:	2a01      	cmp	r2, #1
 800204c:	d101      	bne.n	8002052 <ETH_SetMACConfig+0x12a>
 800204e:	2202      	movs	r2, #2
 8002050:	e000      	b.n	8002054 <ETH_SetMACConfig+0x12c>
 8002052:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002054:	4313      	orrs	r3, r2
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800206c:	2001      	movs	r0, #1
 800206e:	f7ff f9cb 	bl	8001408 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	619a      	str	r2, [r3, #24]
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	ff20810f 	.word	0xff20810f

08002088 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <ETH_SetDMAConfig+0x110>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	7b1b      	ldrb	r3, [r3, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <ETH_SetDMAConfig+0x2c>
 80020ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020b2:	e000      	b.n	80020b6 <ETH_SetDMAConfig+0x2e>
 80020b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	7b5b      	ldrb	r3, [r3, #13]
 80020ba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020bc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	7f52      	ldrb	r2, [r2, #29]
 80020c2:	2a00      	cmp	r2, #0
 80020c4:	d102      	bne.n	80020cc <ETH_SetDMAConfig+0x44>
 80020c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020ca:	e000      	b.n	80020ce <ETH_SetDMAConfig+0x46>
 80020cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	7b9b      	ldrb	r3, [r3, #14]
 80020d4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020d6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	7f1b      	ldrb	r3, [r3, #28]
 80020e2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80020e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	7f9b      	ldrb	r3, [r3, #30]
 80020ea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020ec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020fa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020fc:	4313      	orrs	r3, r2
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800210c:	461a      	mov	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800211e:	2001      	movs	r0, #1
 8002120:	f7ff f972 	bl	8001408 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212c:	461a      	mov	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	791b      	ldrb	r3, [r3, #4]
 8002136:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800213c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002142:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002148:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002150:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002152:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800215a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002160:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800216a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800216e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800217c:	2001      	movs	r0, #1
 800217e:	f7ff f943 	bl	8001408 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6013      	str	r3, [r2, #0]
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	f8de3f23 	.word	0xf8de3f23

0800219c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b0a6      	sub	sp, #152	; 0x98
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80021aa:	2301      	movs	r3, #1
 80021ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80021b0:	2300      	movs	r3, #0
 80021b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80021ba:	2301      	movs	r3, #1
 80021bc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80021c6:	2301      	movs	r3, #1
 80021c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021d8:	2300      	movs	r3, #0
 80021da:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80021fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002202:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002204:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002208:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002210:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002214:	4619      	mov	r1, r3
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff fe86 	bl	8001f28 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800221c:	2301      	movs	r3, #1
 800221e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002220:	2301      	movs	r3, #1
 8002222:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002224:	2301      	movs	r3, #1
 8002226:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800222a:	2301      	movs	r3, #1
 800222c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800223e:	2300      	movs	r3, #0
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002242:	2301      	movs	r3, #1
 8002244:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002248:	2301      	movs	r3, #1
 800224a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800224c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002250:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002252:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002256:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800225c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800225e:	2301      	movs	r3, #1
 8002260:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002264:	2300      	movs	r3, #0
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800226c:	f107 0308 	add.w	r3, r7, #8
 8002270:	4619      	mov	r1, r3
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff ff08 	bl	8002088 <ETH_SetDMAConfig>
}
 8002278:	bf00      	nop
 800227a:	3798      	adds	r7, #152	; 0x98
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3305      	adds	r3, #5
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	3204      	adds	r2, #4
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <ETH_MACAddressConfig+0x68>)
 80022a2:	4413      	add	r3, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3303      	adds	r3, #3
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	061a      	lsls	r2, r3, #24
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3302      	adds	r3, #2
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3301      	adds	r3, #1
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	4313      	orrs	r3, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	7812      	ldrb	r2, [r2, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <ETH_MACAddressConfig+0x6c>)
 80022d2:	4413      	add	r3, r2
 80022d4:	461a      	mov	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	6013      	str	r3, [r2, #0]
}
 80022da:	bf00      	nop
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40028040 	.word	0x40028040
 80022ec:	40028044 	.word	0x40028044

080022f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e03e      	b.n	800237c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68d9      	ldr	r1, [r3, #12]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	440b      	add	r3, r1
 800230e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2200      	movs	r2, #0
 800231a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2200      	movs	r2, #0
 8002326:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	3206      	adds	r2, #6
 8002330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d80c      	bhi.n	8002360 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68d9      	ldr	r1, [r3, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	461a      	mov	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	e004      	b.n	800236a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	461a      	mov	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3301      	adds	r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d9bd      	bls.n	80022fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002394:	611a      	str	r2, [r3, #16]
}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	e046      	b.n	800243e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6919      	ldr	r1, [r3, #16]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2200      	movs	r2, #0
 80023cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2200      	movs	r2, #0
 80023de:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2200      	movs	r2, #0
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80023ec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80023f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	3212      	adds	r2, #18
 800240a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d80c      	bhi.n	800242e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6919      	ldr	r1, [r3, #16]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	461a      	mov	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60da      	str	r2, [r3, #12]
 800242c:	e004      	b.n	8002438 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	461a      	mov	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3301      	adds	r3, #1
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d9b5      	bls.n	80023b0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246e:	60da      	str	r2, [r3, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e177      	b.n	8002788 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	f040 8166 	bne.w	8002782 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d005      	beq.n	80024ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d130      	bne.n	8002530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 0201 	and.w	r2, r3, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b03      	cmp	r3, #3
 800253a:	d017      	beq.n	800256c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d123      	bne.n	80025c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	08da      	lsrs	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3208      	adds	r2, #8
 8002580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	220f      	movs	r2, #15
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	08da      	lsrs	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3208      	adds	r2, #8
 80025ba:	69b9      	ldr	r1, [r7, #24]
 80025bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0203 	and.w	r2, r3, #3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80c0 	beq.w	8002782 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b66      	ldr	r3, [pc, #408]	; (80027a0 <HAL_GPIO_Init+0x324>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a65      	ldr	r2, [pc, #404]	; (80027a0 <HAL_GPIO_Init+0x324>)
 800260c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b63      	ldr	r3, [pc, #396]	; (80027a0 <HAL_GPIO_Init+0x324>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261e:	4a61      	ldr	r2, [pc, #388]	; (80027a4 <HAL_GPIO_Init+0x328>)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3302      	adds	r3, #2
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a58      	ldr	r2, [pc, #352]	; (80027a8 <HAL_GPIO_Init+0x32c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d037      	beq.n	80026ba <HAL_GPIO_Init+0x23e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a57      	ldr	r2, [pc, #348]	; (80027ac <HAL_GPIO_Init+0x330>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d031      	beq.n	80026b6 <HAL_GPIO_Init+0x23a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a56      	ldr	r2, [pc, #344]	; (80027b0 <HAL_GPIO_Init+0x334>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d02b      	beq.n	80026b2 <HAL_GPIO_Init+0x236>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a55      	ldr	r2, [pc, #340]	; (80027b4 <HAL_GPIO_Init+0x338>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d025      	beq.n	80026ae <HAL_GPIO_Init+0x232>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a54      	ldr	r2, [pc, #336]	; (80027b8 <HAL_GPIO_Init+0x33c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01f      	beq.n	80026aa <HAL_GPIO_Init+0x22e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a53      	ldr	r2, [pc, #332]	; (80027bc <HAL_GPIO_Init+0x340>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d019      	beq.n	80026a6 <HAL_GPIO_Init+0x22a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a52      	ldr	r2, [pc, #328]	; (80027c0 <HAL_GPIO_Init+0x344>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_GPIO_Init+0x226>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a51      	ldr	r2, [pc, #324]	; (80027c4 <HAL_GPIO_Init+0x348>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00d      	beq.n	800269e <HAL_GPIO_Init+0x222>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a50      	ldr	r2, [pc, #320]	; (80027c8 <HAL_GPIO_Init+0x34c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d007      	beq.n	800269a <HAL_GPIO_Init+0x21e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4f      	ldr	r2, [pc, #316]	; (80027cc <HAL_GPIO_Init+0x350>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_GPIO_Init+0x21a>
 8002692:	2309      	movs	r3, #9
 8002694:	e012      	b.n	80026bc <HAL_GPIO_Init+0x240>
 8002696:	230a      	movs	r3, #10
 8002698:	e010      	b.n	80026bc <HAL_GPIO_Init+0x240>
 800269a:	2308      	movs	r3, #8
 800269c:	e00e      	b.n	80026bc <HAL_GPIO_Init+0x240>
 800269e:	2307      	movs	r3, #7
 80026a0:	e00c      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026a2:	2306      	movs	r3, #6
 80026a4:	e00a      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026a6:	2305      	movs	r3, #5
 80026a8:	e008      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026aa:	2304      	movs	r3, #4
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026ae:	2303      	movs	r3, #3
 80026b0:	e004      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e002      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026ba:	2300      	movs	r3, #0
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	f002 0203 	and.w	r2, r2, #3
 80026c2:	0092      	lsls	r2, r2, #2
 80026c4:	4093      	lsls	r3, r2
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026cc:	4935      	ldr	r1, [pc, #212]	; (80027a4 <HAL_GPIO_Init+0x328>)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026da:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <HAL_GPIO_Init+0x354>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026fe:	4a34      	ldr	r2, [pc, #208]	; (80027d0 <HAL_GPIO_Init+0x354>)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002704:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <HAL_GPIO_Init+0x354>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002728:	4a29      	ldr	r2, [pc, #164]	; (80027d0 <HAL_GPIO_Init+0x354>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800272e:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <HAL_GPIO_Init+0x354>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002752:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <HAL_GPIO_Init+0x354>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_GPIO_Init+0x354>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <HAL_GPIO_Init+0x354>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3301      	adds	r3, #1
 8002786:	61fb      	str	r3, [r7, #28]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b0f      	cmp	r3, #15
 800278c:	f67f ae84 	bls.w	8002498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3724      	adds	r7, #36	; 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40013800 	.word	0x40013800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40020400 	.word	0x40020400
 80027b0:	40020800 	.word	0x40020800
 80027b4:	40020c00 	.word	0x40020c00
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40021400 	.word	0x40021400
 80027c0:	40021800 	.word	0x40021800
 80027c4:	40021c00 	.word	0x40021c00
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40022400 	.word	0x40022400
 80027d0:	40013c00 	.word	0x40013c00

080027d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
 80027f0:	e001      	b.n	80027f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	807b      	strh	r3, [r7, #2]
 8002810:	4613      	mov	r3, r2
 8002812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002814:	787b      	ldrb	r3, [r7, #1]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002820:	e003      	b.n	800282a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002822:	887b      	ldrh	r3, [r7, #2]
 8002824:	041a      	lsls	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	619a      	str	r2, [r3, #24]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002836:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002838:	b08f      	sub	sp, #60	; 0x3c
 800283a:	af0a      	add	r7, sp, #40	; 0x28
 800283c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e10f      	b.n	8002a68 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f005 ffda 	bl	800881c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2203      	movs	r2, #3
 800286c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f002 fac1 	bl	8004e0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	687e      	ldr	r6, [r7, #4]
 8002894:	466d      	mov	r5, sp
 8002896:	f106 0410 	add.w	r4, r6, #16
 800289a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800289c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800289e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80028aa:	1d33      	adds	r3, r6, #4
 80028ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ae:	6838      	ldr	r0, [r7, #0]
 80028b0:	f002 f998 	bl	8004be4 <USB_CoreInit>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2202      	movs	r2, #2
 80028be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0d0      	b.n	8002a68 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f002 faaf 	bl	8004e30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	e04a      	b.n	800296e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	333d      	adds	r3, #61	; 0x3d
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	333c      	adds	r3, #60	; 0x3c
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	b298      	uxth	r0, r3
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	3344      	adds	r3, #68	; 0x44
 8002914:	4602      	mov	r2, r0
 8002916:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3340      	adds	r3, #64	; 0x40
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3348      	adds	r3, #72	; 0x48
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	334c      	adds	r3, #76	; 0x4c
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3354      	adds	r3, #84	; 0x54
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	3301      	adds	r3, #1
 800296c:	73fb      	strb	r3, [r7, #15]
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	429a      	cmp	r2, r3
 8002976:	d3af      	bcc.n	80028d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e044      	b.n	8002a08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002994:	7bfa      	ldrb	r2, [r7, #15]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029aa:	7bfa      	ldrb	r2, [r7, #15]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029d6:	7bfa      	ldrb	r2, [r7, #15]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	3301      	adds	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d3b5      	bcc.n	800297e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	687e      	ldr	r6, [r7, #4]
 8002a1a:	466d      	mov	r5, sp
 8002a1c:	f106 0410 	add.w	r4, r6, #16
 8002a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a30:	1d33      	adds	r3, r6, #4
 8002a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a34:	6838      	ldr	r0, [r7, #0]
 8002a36:	f002 fa47 	bl	8004ec8 <USB_DevInit>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e00d      	b.n	8002a68 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f003 fb96 	bl	8006192 <USB_DevDisconnect>

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a70 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_PCD_Start+0x1c>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e020      	b.n	8002ace <HAL_PCD_Start+0x5e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d109      	bne.n	8002ab0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d005      	beq.n	8002ab0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f002 f999 	bl	8004dec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f003 fb46 	bl	8006150 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ad6:	b590      	push	{r4, r7, lr}
 8002ad8:	b08d      	sub	sp, #52	; 0x34
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 fc04 	bl	80062fa <USB_GetMode>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f040 848a 	bne.w	800340e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 fb68 	bl	80061d4 <USB_ReadInterrupts>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8480 	beq.w	800340c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f003 fb55 	bl	80061d4 <USB_ReadInterrupts>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d107      	bne.n	8002b44 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f002 0202 	and.w	r2, r2, #2
 8002b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f003 fb43 	bl	80061d4 <USB_ReadInterrupts>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	d161      	bne.n	8002c1c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0210 	bic.w	r2, r2, #16
 8002b66:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	f003 020f 	and.w	r2, r3, #15
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	4413      	add	r3, r2
 8002b84:	3304      	adds	r3, #4
 8002b86:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	0c5b      	lsrs	r3, r3, #17
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d124      	bne.n	8002bde <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d035      	beq.n	8002c0c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6a38      	ldr	r0, [r7, #32]
 8002bb4:	f003 f97a 	bl	8005eac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bc4:	441a      	add	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	6a1a      	ldr	r2, [r3, #32]
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bd6:	441a      	add	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	621a      	str	r2, [r3, #32]
 8002bdc:	e016      	b.n	8002c0c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	0c5b      	lsrs	r3, r3, #17
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d110      	bne.n	8002c0c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6a38      	ldr	r0, [r7, #32]
 8002bf6:	f003 f959 	bl	8005eac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	6a1a      	ldr	r2, [r3, #32]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c06:	441a      	add	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0210 	orr.w	r2, r2, #16
 8002c1a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 fad7 	bl	80061d4 <USB_ReadInterrupts>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c30:	f040 80a7 	bne.w	8002d82 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 fadc 	bl	80061fa <USB_ReadDevAllOutEpInterrupt>
 8002c42:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c44:	e099      	b.n	8002d7a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 808e 	beq.w	8002d6e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f003 fb00 	bl	8006262 <USB_ReadDevOutEPInterrupt>
 8002c62:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00c      	beq.n	8002c88 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fec2 	bl	8003a0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00c      	beq.n	8002cac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2308      	movs	r3, #8
 8002ca2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 ff98 	bl	8003bdc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	2310      	movs	r3, #16
 8002cc6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d030      	beq.n	8002d34 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	2b80      	cmp	r3, #128	; 0x80
 8002cdc:	d109      	bne.n	8002cf2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cf0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	4413      	add	r3, r2
 8002d04:	3304      	adds	r3, #4
 8002d06:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	78db      	ldrb	r3, [r3, #3]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d108      	bne.n	8002d22 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2200      	movs	r2, #0
 8002d14:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f005 fe91 	bl	8008a44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2302      	movs	r3, #2
 8002d32:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d008      	beq.n	8002d50 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2320      	movs	r3, #32
 8002d4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d66:	461a      	mov	r2, r3
 8002d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d6c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	3301      	adds	r3, #1
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f47f af62 	bne.w	8002c46 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 fa24 	bl	80061d4 <USB_ReadInterrupts>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d96:	f040 80db 	bne.w	8002f50 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f003 fa45 	bl	800622e <USB_ReadDevAllInEpInterrupt>
 8002da4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002daa:	e0cd      	b.n	8002f48 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 80c2 	beq.w	8002f3c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 fa6b 	bl	800629e <USB_ReadDevInEPInterrupt>
 8002dc8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d057      	beq.n	8002e84 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	2201      	movs	r2, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69f9      	ldr	r1, [r7, #28]
 8002df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002df4:	4013      	ands	r3, r2
 8002df6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e04:	461a      	mov	r2, r3
 8002e06:	2301      	movs	r3, #1
 8002e08:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d132      	bne.n	8002e78 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	334c      	adds	r3, #76	; 0x4c
 8002e22:	6819      	ldr	r1, [r3, #0]
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4403      	add	r3, r0
 8002e32:	3348      	adds	r3, #72	; 0x48
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4419      	add	r1, r3
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4403      	add	r3, r0
 8002e46:	334c      	adds	r3, #76	; 0x4c
 8002e48:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d113      	bne.n	8002e78 <HAL_PCD_IRQHandler+0x3a2>
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3354      	adds	r3, #84	; 0x54
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d108      	bne.n	8002e78 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e70:	461a      	mov	r2, r3
 8002e72:	2101      	movs	r1, #1
 8002e74:	f003 fa72 	bl	800635c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f005 fd5b 	bl	800893a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	2308      	movs	r3, #8
 8002e9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2310      	movs	r3, #16
 8002eba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2340      	movs	r3, #64	; 0x40
 8002ed6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d023      	beq.n	8002f2a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ee2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ee4:	6a38      	ldr	r0, [r7, #32]
 8002ee6:	f002 f953 	bl	8005190 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	3338      	adds	r3, #56	; 0x38
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	4413      	add	r3, r2
 8002efa:	3304      	adds	r3, #4
 8002efc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	78db      	ldrb	r3, [r3, #3]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d108      	bne.n	8002f18 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	4619      	mov	r1, r3
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f005 fda8 	bl	8008a68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f24:	461a      	mov	r2, r3
 8002f26:	2302      	movs	r3, #2
 8002f28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fcdb 	bl	80038f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	3301      	adds	r3, #1
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	085b      	lsrs	r3, r3, #1
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f47f af2e 	bne.w	8002dac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 f93d 	bl	80061d4 <USB_ReadInterrupts>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f64:	d122      	bne.n	8002fac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d108      	bne.n	8002f96 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fec2 	bl	8003d18 <HAL_PCDEx_LPM_Callback>
 8002f94:	e002      	b.n	8002f9c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f005 fd46 	bl	8008a28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f003 f90f 	bl	80061d4 <USB_ReadInterrupts>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fc0:	d112      	bne.n	8002fe8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d102      	bne.n	8002fd8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f005 fd02 	bl	80089dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002fe6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f003 f8f1 	bl	80061d4 <USB_ReadInterrupts>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffc:	f040 80b7 	bne.w	800316e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2110      	movs	r1, #16
 800301a:	4618      	mov	r0, r3
 800301c:	f002 f8b8 	bl	8005190 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003020:	2300      	movs	r3, #0
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003024:	e046      	b.n	80030b4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003032:	461a      	mov	r2, r3
 8003034:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003038:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800304a:	0151      	lsls	r1, r2, #5
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	440a      	add	r2, r1
 8003050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003054:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003058:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800305a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	4413      	add	r3, r2
 8003062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003066:	461a      	mov	r2, r3
 8003068:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800306c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	4413      	add	r3, r2
 8003076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800307e:	0151      	lsls	r1, r2, #5
 8003080:	69fa      	ldr	r2, [r7, #28]
 8003082:	440a      	add	r2, r1
 8003084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003088:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800308c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800309e:	0151      	lsls	r1, r2, #5
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	440a      	add	r2, r1
 80030a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b0:	3301      	adds	r3, #1
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d3b3      	bcc.n	8003026 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80030d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d016      	beq.n	8003108 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ea:	f043 030b 	orr.w	r3, r3, #11
 80030ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003100:	f043 030b 	orr.w	r3, r3, #11
 8003104:	6453      	str	r3, [r2, #68]	; 0x44
 8003106:	e015      	b.n	8003134 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003116:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800311a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800311e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	69fa      	ldr	r2, [r7, #28]
 800312a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800312e:	f043 030b 	orr.w	r3, r3, #11
 8003132:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003142:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003146:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003158:	461a      	mov	r2, r3
 800315a:	f003 f8ff 	bl	800635c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800316c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f003 f82e 	bl	80061d4 <USB_ReadInterrupts>
 8003178:	4603      	mov	r3, r0
 800317a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800317e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003182:	d124      	bne.n	80031ce <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f003 f8c4 	bl	8006316 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f002 f879 	bl	800528a <USB_GetDevSpeed>
 8003198:	4603      	mov	r3, r0
 800319a:	461a      	mov	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681c      	ldr	r4, [r3, #0]
 80031a4:	f001 fa28 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 80031a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	4620      	mov	r0, r4
 80031b4:	f001 fd78 	bl	8004ca8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f005 fbe6 	bl	800898a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80031cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f002 fffe 	bl	80061d4 <USB_ReadInterrupts>
 80031d8:	4603      	mov	r3, r0
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d10a      	bne.n	80031f8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f005 fbc3 	bl	800896e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f002 0208 	and.w	r2, r2, #8
 80031f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f002 ffe9 	bl	80061d4 <USB_ReadInterrupts>
 8003202:	4603      	mov	r3, r0
 8003204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003208:	2b80      	cmp	r3, #128	; 0x80
 800320a:	d122      	bne.n	8003252 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003218:	2301      	movs	r3, #1
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
 800321c:	e014      	b.n	8003248 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d105      	bne.n	8003242 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	b2db      	uxtb	r3, r3
 800323a:	4619      	mov	r1, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fb27 	bl	8003890 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	3301      	adds	r3, #1
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324e:	429a      	cmp	r2, r3
 8003250:	d3e5      	bcc.n	800321e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f002 ffbc 	bl	80061d4 <USB_ReadInterrupts>
 800325c:	4603      	mov	r3, r0
 800325e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003266:	d13b      	bne.n	80032e0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003268:	2301      	movs	r3, #1
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
 800326c:	e02b      	b.n	80032c6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	4413      	add	r3, r2
 8003276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	3340      	adds	r3, #64	; 0x40
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d115      	bne.n	80032c0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003294:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003296:	2b00      	cmp	r3, #0
 8003298:	da12      	bge.n	80032c0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	333f      	adds	r3, #63	; 0x3f
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fae8 	bl	8003890 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	3301      	adds	r3, #1
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d3ce      	bcc.n	800326e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80032de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f002 ff75 	bl	80061d4 <USB_ReadInterrupts>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032f4:	d155      	bne.n	80033a2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032f6:	2301      	movs	r3, #1
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
 80032fa:	e045      	b.n	8003388 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	4413      	add	r3, r2
 8003304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003310:	4613      	mov	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d12e      	bne.n	8003382 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003324:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003326:	2b00      	cmp	r3, #0
 8003328:	da2b      	bge.n	8003382 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003336:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800333a:	429a      	cmp	r2, r3
 800333c:	d121      	bne.n	8003382 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003350:	2201      	movs	r2, #1
 8003352:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10a      	bne.n	8003382 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800337a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800337e:	6053      	str	r3, [r2, #4]
            break;
 8003380:	e007      	b.n	8003392 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	3301      	adds	r3, #1
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338e:	429a      	cmp	r2, r3
 8003390:	d3b4      	bcc.n	80032fc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f002 ff14 	bl	80061d4 <USB_ReadInterrupts>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b6:	d10a      	bne.n	80033ce <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f005 fb67 	bl	8008a8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f002 fefe 	bl	80061d4 <USB_ReadInterrupts>
 80033d8:	4603      	mov	r3, r0
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d115      	bne.n	800340e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f005 fb57 	bl	8008aa8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	e000      	b.n	800340e <HAL_PCD_IRQHandler+0x938>
      return;
 800340c:	bf00      	nop
    }
  }
}
 800340e:	3734      	adds	r7, #52	; 0x34
 8003410:	46bd      	mov	sp, r7
 8003412:	bd90      	pop	{r4, r7, pc}

08003414 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_PCD_SetAddress+0x1a>
 800342a:	2302      	movs	r3, #2
 800342c:	e013      	b.n	8003456 <HAL_PCD_SetAddress+0x42>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	4611      	mov	r1, r2
 8003446:	4618      	mov	r0, r3
 8003448:	f002 fe5c 	bl	8006104 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	4608      	mov	r0, r1
 8003468:	4611      	mov	r1, r2
 800346a:	461a      	mov	r2, r3
 800346c:	4603      	mov	r3, r0
 800346e:	70fb      	strb	r3, [r7, #3]
 8003470:	460b      	mov	r3, r1
 8003472:	803b      	strh	r3, [r7, #0]
 8003474:	4613      	mov	r3, r2
 8003476:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800347c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003480:	2b00      	cmp	r3, #0
 8003482:	da0f      	bge.n	80034a4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	f003 020f 	and.w	r2, r3, #15
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	3338      	adds	r3, #56	; 0x38
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	4413      	add	r3, r2
 8003498:	3304      	adds	r3, #4
 800349a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	705a      	strb	r2, [r3, #1]
 80034a2:	e00f      	b.n	80034c4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	f003 020f 	and.w	r2, r3, #15
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	3304      	adds	r3, #4
 80034bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034d0:	883a      	ldrh	r2, [r7, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	78ba      	ldrb	r2, [r7, #2]
 80034da:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	785b      	ldrb	r3, [r3, #1]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034ee:	78bb      	ldrb	r3, [r7, #2]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d102      	bne.n	80034fa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_PCD_EP_Open+0xaa>
 8003504:	2302      	movs	r3, #2
 8003506:	e00e      	b.n	8003526 <HAL_PCD_EP_Open+0xc8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68f9      	ldr	r1, [r7, #12]
 8003516:	4618      	mov	r0, r3
 8003518:	f001 fedc 	bl	80052d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003524:	7afb      	ldrb	r3, [r7, #11]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	460b      	mov	r3, r1
 8003538:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800353a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800353e:	2b00      	cmp	r3, #0
 8003540:	da0f      	bge.n	8003562 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	f003 020f 	and.w	r2, r3, #15
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	3338      	adds	r3, #56	; 0x38
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	3304      	adds	r3, #4
 8003558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	705a      	strb	r2, [r3, #1]
 8003560:	e00f      	b.n	8003582 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	f003 020f 	and.w	r2, r3, #15
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	4413      	add	r3, r2
 8003578:	3304      	adds	r3, #4
 800357a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	b2da      	uxtb	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_PCD_EP_Close+0x6e>
 8003598:	2302      	movs	r3, #2
 800359a:	e00e      	b.n	80035ba <HAL_PCD_EP_Close+0x8c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68f9      	ldr	r1, [r7, #12]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f001 ff1a 	bl	80053e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b086      	sub	sp, #24
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	460b      	mov	r3, r1
 80035d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035d2:	7afb      	ldrb	r3, [r7, #11]
 80035d4:	f003 020f 	and.w	r2, r3, #15
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	3304      	adds	r3, #4
 80035ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2200      	movs	r2, #0
 80035fc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2200      	movs	r2, #0
 8003602:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003604:	7afb      	ldrb	r3, [r7, #11]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	b2da      	uxtb	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d102      	bne.n	800361e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800361e:	7afb      	ldrb	r3, [r7, #11]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	6979      	ldr	r1, [r7, #20]
 8003636:	f002 f9f9 	bl	8005a2c <USB_EP0StartXfer>
 800363a:	e008      	b.n	800364e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	6979      	ldr	r1, [r7, #20]
 800364a:	f001 ffa7 	bl	800559c <USB_EPStartXfer>
  }

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	f003 020f 	and.w	r2, r3, #15
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	460b      	mov	r3, r1
 8003696:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003698:	7afb      	ldrb	r3, [r7, #11]
 800369a:	f003 020f 	and.w	r2, r3, #15
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	3338      	adds	r3, #56	; 0x38
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	3304      	adds	r3, #4
 80036ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2200      	movs	r2, #0
 80036c0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2201      	movs	r2, #1
 80036c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036c8:	7afb      	ldrb	r3, [r7, #11]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d102      	bne.n	80036e2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036e2:	7afb      	ldrb	r3, [r7, #11]
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	6979      	ldr	r1, [r7, #20]
 80036fa:	f002 f997 	bl	8005a2c <USB_EP0StartXfer>
 80036fe:	e008      	b.n	8003712 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	6979      	ldr	r1, [r7, #20]
 800370e:	f001 ff45 	bl	800559c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	f003 020f 	and.w	r2, r3, #15
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	429a      	cmp	r2, r3
 8003734:	d901      	bls.n	800373a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e050      	b.n	80037dc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800373a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800373e:	2b00      	cmp	r3, #0
 8003740:	da0f      	bge.n	8003762 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	f003 020f 	and.w	r2, r3, #15
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	3338      	adds	r3, #56	; 0x38
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	3304      	adds	r3, #4
 8003758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	705a      	strb	r2, [r3, #1]
 8003760:	e00d      	b.n	800377e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	4413      	add	r3, r2
 8003774:	3304      	adds	r3, #4
 8003776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	b2da      	uxtb	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_PCD_EP_SetStall+0x82>
 800379a:	2302      	movs	r3, #2
 800379c:	e01e      	b.n	80037dc <HAL_PCD_EP_SetStall+0xc0>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68f9      	ldr	r1, [r7, #12]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f002 fbd5 	bl	8005f5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	b2d9      	uxtb	r1, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037cc:	461a      	mov	r2, r3
 80037ce:	f002 fdc5 	bl	800635c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	f003 020f 	and.w	r2, r3, #15
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d901      	bls.n	8003802 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e042      	b.n	8003888 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003806:	2b00      	cmp	r3, #0
 8003808:	da0f      	bge.n	800382a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	3338      	adds	r3, #56	; 0x38
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	3304      	adds	r3, #4
 8003820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	705a      	strb	r2, [r3, #1]
 8003828:	e00f      	b.n	800384a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4413      	add	r3, r2
 8003840:	3304      	adds	r3, #4
 8003842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	b2da      	uxtb	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_PCD_EP_ClrStall+0x86>
 8003866:	2302      	movs	r3, #2
 8003868:	e00e      	b.n	8003888 <HAL_PCD_EP_ClrStall+0xa4>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68f9      	ldr	r1, [r7, #12]
 8003878:	4618      	mov	r0, r3
 800387a:	f002 fbdd 	bl	8006038 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800389c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	da0c      	bge.n	80038be <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	f003 020f 	and.w	r2, r3, #15
 80038aa:	4613      	mov	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	3338      	adds	r3, #56	; 0x38
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	4413      	add	r3, r2
 80038b8:	3304      	adds	r3, #4
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	e00c      	b.n	80038d8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	f003 020f 	and.w	r2, r3, #15
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	4413      	add	r3, r2
 80038d4:	3304      	adds	r3, #4
 80038d6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68f9      	ldr	r1, [r7, #12]
 80038de:	4618      	mov	r0, r3
 80038e0:	f002 f9fc 	bl	8005cdc <USB_EPStopXfer>
 80038e4:	4603      	mov	r3, r0
 80038e6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80038e8:	7afb      	ldrb	r3, [r7, #11]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b08a      	sub	sp, #40	; 0x28
 80038f6:	af02      	add	r7, sp, #8
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4413      	add	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	3338      	adds	r3, #56	; 0x38
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4413      	add	r3, r2
 8003916:	3304      	adds	r3, #4
 8003918:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a1a      	ldr	r2, [r3, #32]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	429a      	cmp	r2, r3
 8003924:	d901      	bls.n	800392a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e06c      	b.n	8003a04 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	429a      	cmp	r2, r3
 800393e:	d902      	bls.n	8003946 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3303      	adds	r3, #3
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800394e:	e02b      	b.n	80039a8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	699a      	ldr	r2, [r3, #24]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	429a      	cmp	r2, r3
 8003964:	d902      	bls.n	800396c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	3303      	adds	r3, #3
 8003970:	089b      	lsrs	r3, r3, #2
 8003972:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6919      	ldr	r1, [r3, #16]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	b2da      	uxtb	r2, r3
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003984:	b2db      	uxtb	r3, r3
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	4603      	mov	r3, r0
 800398a:	6978      	ldr	r0, [r7, #20]
 800398c:	f002 fa50 	bl	8005e30 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	441a      	add	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a1a      	ldr	r2, [r3, #32]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	441a      	add	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d809      	bhi.n	80039d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a1a      	ldr	r2, [r3, #32]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d203      	bcs.n	80039d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1be      	bne.n	8003950 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d811      	bhi.n	8003a02 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	2201      	movs	r2, #1
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	6939      	ldr	r1, [r7, #16]
 80039fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039fe:	4013      	ands	r3, r2
 8003a00:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3720      	adds	r7, #32
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	333c      	adds	r3, #60	; 0x3c
 8003a24:	3304      	adds	r3, #4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d17b      	bne.n	8003b3a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d015      	beq.n	8003a78 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	4a61      	ldr	r2, [pc, #388]	; (8003bd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	f240 80b9 	bls.w	8003bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80b3 	beq.w	8003bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a74:	6093      	str	r3, [r2, #8]
 8003a76:	e0a7      	b.n	8003bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8e:	461a      	mov	r2, r3
 8003a90:	2320      	movs	r3, #32
 8003a92:	6093      	str	r3, [r2, #8]
 8003a94:	e098      	b.n	8003bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f040 8093 	bne.w	8003bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	4a4b      	ldr	r2, [pc, #300]	; (8003bd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d90f      	bls.n	8003aca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ac6:	6093      	str	r3, [r2, #8]
 8003ac8:	e07e      	b.n	8003bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	4413      	add	r3, r2
 8003adc:	3304      	adds	r3, #4
 8003ade:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	0159      	lsls	r1, r3, #5
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	440b      	add	r3, r1
 8003aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af6:	1ad2      	subs	r2, r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d114      	bne.n	8003b2c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b14:	461a      	mov	r2, r3
 8003b16:	2101      	movs	r1, #1
 8003b18:	f002 fc20 	bl	800635c <USB_EP0_OutStart>
 8003b1c:	e006      	b.n	8003b2c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	441a      	add	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	4619      	mov	r1, r3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f004 fee6 	bl	8008904 <HAL_PCD_DataOutStageCallback>
 8003b38:	e046      	b.n	8003bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	4a26      	ldr	r2, [pc, #152]	; (8003bd8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d124      	bne.n	8003b8c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5e:	6093      	str	r3, [r2, #8]
 8003b60:	e032      	b.n	8003bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2320      	movs	r3, #32
 8003b7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	4619      	mov	r1, r3
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f004 febd 	bl	8008904 <HAL_PCD_DataOutStageCallback>
 8003b8a:	e01d      	b.n	8003bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d114      	bne.n	8003bbc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	4613      	mov	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d108      	bne.n	8003bbc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	f002 fbd0 	bl	800635c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f004 fe9e 	bl	8008904 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	4f54300a 	.word	0x4f54300a
 8003bd8:	4f54310a 	.word	0x4f54310a

08003bdc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	333c      	adds	r3, #60	; 0x3c
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4a15      	ldr	r2, [pc, #84]	; (8003c64 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d90e      	bls.n	8003c30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d009      	beq.n	8003c30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f004 fe55 	bl	80088e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d90c      	bls.n	8003c58 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d108      	bne.n	8003c58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c50:	461a      	mov	r2, r3
 8003c52:	2101      	movs	r1, #1
 8003c54:	f002 fb82 	bl	800635c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	4f54300a 	.word	0x4f54300a

08003c68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	70fb      	strb	r3, [r7, #3]
 8003c74:	4613      	mov	r3, r2
 8003c76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d107      	bne.n	8003c96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c86:	883b      	ldrh	r3, [r7, #0]
 8003c88:	0419      	lsls	r1, r3, #16
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	629a      	str	r2, [r3, #40]	; 0x28
 8003c94:	e028      	b.n	8003ce8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	73fb      	strb	r3, [r7, #15]
 8003ca8:	e00d      	b.n	8003cc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	3340      	adds	r3, #64	; 0x40
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	0c1b      	lsrs	r3, r3, #16
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
 8003cc6:	7bfa      	ldrb	r2, [r7, #15]
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d3ec      	bcc.n	8003caa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003cd0:	883b      	ldrh	r3, [r7, #0]
 8003cd2:	0418      	lsls	r0, r3, #16
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6819      	ldr	r1, [r3, #0]
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	4302      	orrs	r2, r0
 8003ce0:	3340      	adds	r3, #64	; 0x40
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	887a      	ldrh	r2, [r7, #2]
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e267      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d075      	beq.n	8003e3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d4e:	4b88      	ldr	r3, [pc, #544]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d00c      	beq.n	8003d74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d5a:	4b85      	ldr	r3, [pc, #532]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d112      	bne.n	8003d8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d66:	4b82      	ldr	r3, [pc, #520]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d72:	d10b      	bne.n	8003d8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d74:	4b7e      	ldr	r3, [pc, #504]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d05b      	beq.n	8003e38 <HAL_RCC_OscConfig+0x108>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d157      	bne.n	8003e38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e242      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d94:	d106      	bne.n	8003da4 <HAL_RCC_OscConfig+0x74>
 8003d96:	4b76      	ldr	r3, [pc, #472]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a75      	ldr	r2, [pc, #468]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e01d      	b.n	8003de0 <HAL_RCC_OscConfig+0xb0>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x98>
 8003dae:	4b70      	ldr	r3, [pc, #448]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a6f      	ldr	r2, [pc, #444]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4b6d      	ldr	r3, [pc, #436]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a6c      	ldr	r2, [pc, #432]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e00b      	b.n	8003de0 <HAL_RCC_OscConfig+0xb0>
 8003dc8:	4b69      	ldr	r3, [pc, #420]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a68      	ldr	r2, [pc, #416]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	4b66      	ldr	r3, [pc, #408]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a65      	ldr	r2, [pc, #404]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d013      	beq.n	8003e10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fd fb02 	bl	80013f0 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df0:	f7fd fafe 	bl	80013f0 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e207      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e02:	4b5b      	ldr	r3, [pc, #364]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0xc0>
 8003e0e:	e014      	b.n	8003e3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fd faee 	bl	80013f0 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e18:	f7fd faea 	bl	80013f0 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b64      	cmp	r3, #100	; 0x64
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e1f3      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2a:	4b51      	ldr	r3, [pc, #324]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0xe8>
 8003e36:	e000      	b.n	8003e3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d063      	beq.n	8003f0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e46:	4b4a      	ldr	r3, [pc, #296]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e52:	4b47      	ldr	r3, [pc, #284]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d11c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5e:	4b44      	ldr	r3, [pc, #272]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d116      	bne.n	8003e98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6a:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_RCC_OscConfig+0x152>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d001      	beq.n	8003e82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e1c7      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e82:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4937      	ldr	r1, [pc, #220]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e96:	e03a      	b.n	8003f0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d020      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea0:	4b34      	ldr	r3, [pc, #208]	; (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea6:	f7fd faa3 	bl	80013f0 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eae:	f7fd fa9f 	bl	80013f0 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e1a8      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec0:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ecc:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4925      	ldr	r1, [pc, #148]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	600b      	str	r3, [r1, #0]
 8003ee0:	e015      	b.n	8003f0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee2:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7fd fa82 	bl	80013f0 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ef0:	f7fd fa7e 	bl	80013f0 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e187      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f02:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d036      	beq.n	8003f88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d016      	beq.n	8003f50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f22:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <HAL_RCC_OscConfig+0x248>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f28:	f7fd fa62 	bl	80013f0 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f30:	f7fd fa5e 	bl	80013f0 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e167      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f42:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_RCC_OscConfig+0x240>)
 8003f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x200>
 8003f4e:	e01b      	b.n	8003f88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f50:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <HAL_RCC_OscConfig+0x248>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f56:	f7fd fa4b 	bl	80013f0 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f5c:	e00e      	b.n	8003f7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f5e:	f7fd fa47 	bl	80013f0 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d907      	bls.n	8003f7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e150      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
 8003f70:	40023800 	.word	0x40023800
 8003f74:	42470000 	.word	0x42470000
 8003f78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f7c:	4b88      	ldr	r3, [pc, #544]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 8003f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1ea      	bne.n	8003f5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 8097 	beq.w	80040c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f96:	2300      	movs	r3, #0
 8003f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f9a:	4b81      	ldr	r3, [pc, #516]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10f      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	4b7d      	ldr	r3, [pc, #500]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	4a7c      	ldr	r2, [pc, #496]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 8003fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb6:	4b7a      	ldr	r3, [pc, #488]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc6:	4b77      	ldr	r3, [pc, #476]	; (80041a4 <HAL_RCC_OscConfig+0x474>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d118      	bne.n	8004004 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fd2:	4b74      	ldr	r3, [pc, #464]	; (80041a4 <HAL_RCC_OscConfig+0x474>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a73      	ldr	r2, [pc, #460]	; (80041a4 <HAL_RCC_OscConfig+0x474>)
 8003fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fde:	f7fd fa07 	bl	80013f0 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe6:	f7fd fa03 	bl	80013f0 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e10c      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff8:	4b6a      	ldr	r3, [pc, #424]	; (80041a4 <HAL_RCC_OscConfig+0x474>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d106      	bne.n	800401a <HAL_RCC_OscConfig+0x2ea>
 800400c:	4b64      	ldr	r3, [pc, #400]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	4a63      	ldr	r2, [pc, #396]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	6713      	str	r3, [r2, #112]	; 0x70
 8004018:	e01c      	b.n	8004054 <HAL_RCC_OscConfig+0x324>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b05      	cmp	r3, #5
 8004020:	d10c      	bne.n	800403c <HAL_RCC_OscConfig+0x30c>
 8004022:	4b5f      	ldr	r3, [pc, #380]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 8004024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004026:	4a5e      	ldr	r2, [pc, #376]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 8004028:	f043 0304 	orr.w	r3, r3, #4
 800402c:	6713      	str	r3, [r2, #112]	; 0x70
 800402e:	4b5c      	ldr	r3, [pc, #368]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004032:	4a5b      	ldr	r2, [pc, #364]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	6713      	str	r3, [r2, #112]	; 0x70
 800403a:	e00b      	b.n	8004054 <HAL_RCC_OscConfig+0x324>
 800403c:	4b58      	ldr	r3, [pc, #352]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	4a57      	ldr	r2, [pc, #348]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	6713      	str	r3, [r2, #112]	; 0x70
 8004048:	4b55      	ldr	r3, [pc, #340]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404c:	4a54      	ldr	r2, [pc, #336]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 800404e:	f023 0304 	bic.w	r3, r3, #4
 8004052:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d015      	beq.n	8004088 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405c:	f7fd f9c8 	bl	80013f0 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004062:	e00a      	b.n	800407a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004064:	f7fd f9c4 	bl	80013f0 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e0cb      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407a:	4b49      	ldr	r3, [pc, #292]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0ee      	beq.n	8004064 <HAL_RCC_OscConfig+0x334>
 8004086:	e014      	b.n	80040b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004088:	f7fd f9b2 	bl	80013f0 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408e:	e00a      	b.n	80040a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004090:	f7fd f9ae 	bl	80013f0 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f241 3288 	movw	r2, #5000	; 0x1388
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e0b5      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a6:	4b3e      	ldr	r3, [pc, #248]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1ee      	bne.n	8004090 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040b2:	7dfb      	ldrb	r3, [r7, #23]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d105      	bne.n	80040c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b8:	4b39      	ldr	r3, [pc, #228]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	4a38      	ldr	r2, [pc, #224]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 80040be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 80a1 	beq.w	8004210 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ce:	4b34      	ldr	r3, [pc, #208]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d05c      	beq.n	8004194 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d141      	bne.n	8004166 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e2:	4b31      	ldr	r3, [pc, #196]	; (80041a8 <HAL_RCC_OscConfig+0x478>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e8:	f7fd f982 	bl	80013f0 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fd f97e 	bl	80013f0 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e087      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	4b27      	ldr	r3, [pc, #156]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	019b      	lsls	r3, r3, #6
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	3b01      	subs	r3, #1
 8004128:	041b      	lsls	r3, r3, #16
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	491b      	ldr	r1, [pc, #108]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 8004134:	4313      	orrs	r3, r2
 8004136:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004138:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <HAL_RCC_OscConfig+0x478>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413e:	f7fd f957 	bl	80013f0 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004146:	f7fd f953 	bl	80013f0 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e05c      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004158:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x416>
 8004164:	e054      	b.n	8004210 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004166:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <HAL_RCC_OscConfig+0x478>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416c:	f7fd f940 	bl	80013f0 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004174:	f7fd f93c 	bl	80013f0 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e045      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <HAL_RCC_OscConfig+0x470>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x444>
 8004192:	e03d      	b.n	8004210 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d107      	bne.n	80041ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e038      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40007000 	.word	0x40007000
 80041a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <HAL_RCC_OscConfig+0x4ec>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d028      	beq.n	800420c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d121      	bne.n	800420c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d11a      	bne.n	800420c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041dc:	4013      	ands	r3, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d111      	bne.n	800420c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	3b01      	subs	r3, #1
 80041f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d107      	bne.n	800420c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800

08004220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0cc      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004234:	4b68      	ldr	r3, [pc, #416]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d90c      	bls.n	800425c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004242:	4b65      	ldr	r3, [pc, #404]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424a:	4b63      	ldr	r3, [pc, #396]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d001      	beq.n	800425c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0b8      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d020      	beq.n	80042aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004274:	4b59      	ldr	r3, [pc, #356]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4a58      	ldr	r2, [pc, #352]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800427e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800428c:	4b53      	ldr	r3, [pc, #332]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4a52      	ldr	r2, [pc, #328]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004298:	4b50      	ldr	r3, [pc, #320]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	494d      	ldr	r1, [pc, #308]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d044      	beq.n	8004340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d107      	bne.n	80042ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042be:	4b47      	ldr	r3, [pc, #284]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d119      	bne.n	80042fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e07f      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d003      	beq.n	80042de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d107      	bne.n	80042ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042de:	4b3f      	ldr	r3, [pc, #252]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d109      	bne.n	80042fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e06f      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ee:	4b3b      	ldr	r3, [pc, #236]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e067      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042fe:	4b37      	ldr	r3, [pc, #220]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f023 0203 	bic.w	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	4934      	ldr	r1, [pc, #208]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	4313      	orrs	r3, r2
 800430e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004310:	f7fd f86e 	bl	80013f0 <HAL_GetTick>
 8004314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	e00a      	b.n	800432e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004318:	f7fd f86a 	bl	80013f0 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	f241 3288 	movw	r2, #5000	; 0x1388
 8004326:	4293      	cmp	r3, r2
 8004328:	d901      	bls.n	800432e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e04f      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432e:	4b2b      	ldr	r3, [pc, #172]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 020c 	and.w	r2, r3, #12
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	429a      	cmp	r2, r3
 800433e:	d1eb      	bne.n	8004318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004340:	4b25      	ldr	r3, [pc, #148]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d20c      	bcs.n	8004368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b22      	ldr	r3, [pc, #136]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004356:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e032      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004374:	4b19      	ldr	r3, [pc, #100]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4916      	ldr	r1, [pc, #88]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	490e      	ldr	r1, [pc, #56]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043a6:	f000 f821 	bl	80043ec <HAL_RCC_GetSysClockFreq>
 80043aa:	4602      	mov	r2, r0
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	091b      	lsrs	r3, r3, #4
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	490a      	ldr	r1, [pc, #40]	; (80043e0 <HAL_RCC_ClockConfig+0x1c0>)
 80043b8:	5ccb      	ldrb	r3, [r1, r3]
 80043ba:	fa22 f303 	lsr.w	r3, r2, r3
 80043be:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <HAL_RCC_ClockConfig+0x1c4>)
 80043c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043c2:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fc ffce 	bl	8001368 <HAL_InitTick>

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40023c00 	.word	0x40023c00
 80043dc:	40023800 	.word	0x40023800
 80043e0:	0800a164 	.word	0x0800a164
 80043e4:	20000000 	.word	0x20000000
 80043e8:	20000004 	.word	0x20000004

080043ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f0:	b094      	sub	sp, #80	; 0x50
 80043f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	647b      	str	r3, [r7, #68]	; 0x44
 80043f8:	2300      	movs	r3, #0
 80043fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043fc:	2300      	movs	r3, #0
 80043fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004404:	4b79      	ldr	r3, [pc, #484]	; (80045ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 030c 	and.w	r3, r3, #12
 800440c:	2b08      	cmp	r3, #8
 800440e:	d00d      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0x40>
 8004410:	2b08      	cmp	r3, #8
 8004412:	f200 80e1 	bhi.w	80045d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_RCC_GetSysClockFreq+0x34>
 800441a:	2b04      	cmp	r3, #4
 800441c:	d003      	beq.n	8004426 <HAL_RCC_GetSysClockFreq+0x3a>
 800441e:	e0db      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004420:	4b73      	ldr	r3, [pc, #460]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004422:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004424:	e0db      	b.n	80045de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004426:	4b73      	ldr	r3, [pc, #460]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004428:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800442a:	e0d8      	b.n	80045de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800442c:	4b6f      	ldr	r3, [pc, #444]	; (80045ec <HAL_RCC_GetSysClockFreq+0x200>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004434:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004436:	4b6d      	ldr	r3, [pc, #436]	; (80045ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d063      	beq.n	800450a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004442:	4b6a      	ldr	r3, [pc, #424]	; (80045ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	099b      	lsrs	r3, r3, #6
 8004448:	2200      	movs	r2, #0
 800444a:	63bb      	str	r3, [r7, #56]	; 0x38
 800444c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004454:	633b      	str	r3, [r7, #48]	; 0x30
 8004456:	2300      	movs	r3, #0
 8004458:	637b      	str	r3, [r7, #52]	; 0x34
 800445a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800445e:	4622      	mov	r2, r4
 8004460:	462b      	mov	r3, r5
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f04f 0100 	mov.w	r1, #0
 800446a:	0159      	lsls	r1, r3, #5
 800446c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004470:	0150      	lsls	r0, r2, #5
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4621      	mov	r1, r4
 8004478:	1a51      	subs	r1, r2, r1
 800447a:	6139      	str	r1, [r7, #16]
 800447c:	4629      	mov	r1, r5
 800447e:	eb63 0301 	sbc.w	r3, r3, r1
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004490:	4659      	mov	r1, fp
 8004492:	018b      	lsls	r3, r1, #6
 8004494:	4651      	mov	r1, sl
 8004496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800449a:	4651      	mov	r1, sl
 800449c:	018a      	lsls	r2, r1, #6
 800449e:	4651      	mov	r1, sl
 80044a0:	ebb2 0801 	subs.w	r8, r2, r1
 80044a4:	4659      	mov	r1, fp
 80044a6:	eb63 0901 	sbc.w	r9, r3, r1
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044be:	4690      	mov	r8, r2
 80044c0:	4699      	mov	r9, r3
 80044c2:	4623      	mov	r3, r4
 80044c4:	eb18 0303 	adds.w	r3, r8, r3
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	462b      	mov	r3, r5
 80044cc:	eb49 0303 	adc.w	r3, r9, r3
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044de:	4629      	mov	r1, r5
 80044e0:	024b      	lsls	r3, r1, #9
 80044e2:	4621      	mov	r1, r4
 80044e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044e8:	4621      	mov	r1, r4
 80044ea:	024a      	lsls	r2, r1, #9
 80044ec:	4610      	mov	r0, r2
 80044ee:	4619      	mov	r1, r3
 80044f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f2:	2200      	movs	r2, #0
 80044f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044fc:	f7fb fed0 	bl	80002a0 <__aeabi_uldivmod>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4613      	mov	r3, r2
 8004506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004508:	e058      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800450a:	4b38      	ldr	r3, [pc, #224]	; (80045ec <HAL_RCC_GetSysClockFreq+0x200>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	099b      	lsrs	r3, r3, #6
 8004510:	2200      	movs	r2, #0
 8004512:	4618      	mov	r0, r3
 8004514:	4611      	mov	r1, r2
 8004516:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800451a:	623b      	str	r3, [r7, #32]
 800451c:	2300      	movs	r3, #0
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
 8004520:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004524:	4642      	mov	r2, r8
 8004526:	464b      	mov	r3, r9
 8004528:	f04f 0000 	mov.w	r0, #0
 800452c:	f04f 0100 	mov.w	r1, #0
 8004530:	0159      	lsls	r1, r3, #5
 8004532:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004536:	0150      	lsls	r0, r2, #5
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4641      	mov	r1, r8
 800453e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004542:	4649      	mov	r1, r9
 8004544:	eb63 0b01 	sbc.w	fp, r3, r1
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004554:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004558:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800455c:	ebb2 040a 	subs.w	r4, r2, sl
 8004560:	eb63 050b 	sbc.w	r5, r3, fp
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	00eb      	lsls	r3, r5, #3
 800456e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004572:	00e2      	lsls	r2, r4, #3
 8004574:	4614      	mov	r4, r2
 8004576:	461d      	mov	r5, r3
 8004578:	4643      	mov	r3, r8
 800457a:	18e3      	adds	r3, r4, r3
 800457c:	603b      	str	r3, [r7, #0]
 800457e:	464b      	mov	r3, r9
 8004580:	eb45 0303 	adc.w	r3, r5, r3
 8004584:	607b      	str	r3, [r7, #4]
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004592:	4629      	mov	r1, r5
 8004594:	028b      	lsls	r3, r1, #10
 8004596:	4621      	mov	r1, r4
 8004598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800459c:	4621      	mov	r1, r4
 800459e:	028a      	lsls	r2, r1, #10
 80045a0:	4610      	mov	r0, r2
 80045a2:	4619      	mov	r1, r3
 80045a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a6:	2200      	movs	r2, #0
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	61fa      	str	r2, [r7, #28]
 80045ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045b0:	f7fb fe76 	bl	80002a0 <__aeabi_uldivmod>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4613      	mov	r3, r2
 80045ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <HAL_RCC_GetSysClockFreq+0x200>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	0c1b      	lsrs	r3, r3, #16
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	3301      	adds	r3, #1
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045d6:	e002      	b.n	80045de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80045da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3750      	adds	r7, #80	; 0x50
 80045e4:	46bd      	mov	sp, r7
 80045e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800
 80045f0:	00f42400 	.word	0x00f42400
 80045f4:	007a1200 	.word	0x007a1200

080045f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045fc:	4b03      	ldr	r3, [pc, #12]	; (800460c <HAL_RCC_GetHCLKFreq+0x14>)
 80045fe:	681b      	ldr	r3, [r3, #0]
}
 8004600:	4618      	mov	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000000 	.word	0x20000000

08004610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004614:	f7ff fff0 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	0a9b      	lsrs	r3, r3, #10
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	4903      	ldr	r1, [pc, #12]	; (8004634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40023800 	.word	0x40023800
 8004634:	0800a174 	.word	0x0800a174

08004638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800463c:	f7ff ffdc 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 8004640:	4602      	mov	r2, r0
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	0b5b      	lsrs	r3, r3, #13
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	4903      	ldr	r1, [pc, #12]	; (800465c <HAL_RCC_GetPCLK2Freq+0x24>)
 800464e:	5ccb      	ldrb	r3, [r1, r3]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40023800 	.word	0x40023800
 800465c:	0800a174 	.word	0x0800a174

08004660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e03f      	b.n	80046f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fc fd5e 	bl	8001148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2224      	movs	r2, #36	; 0x24
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f829 	bl	80046fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695a      	ldr	r2, [r3, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004700:	b0c0      	sub	sp, #256	; 0x100
 8004702:	af00      	add	r7, sp, #0
 8004704:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004718:	68d9      	ldr	r1, [r3, #12]
 800471a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	ea40 0301 	orr.w	r3, r0, r1
 8004724:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	431a      	orrs	r2, r3
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	431a      	orrs	r2, r3
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004754:	f021 010c 	bic.w	r1, r1, #12
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004762:	430b      	orrs	r3, r1
 8004764:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004776:	6999      	ldr	r1, [r3, #24]
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	ea40 0301 	orr.w	r3, r0, r1
 8004782:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4b8f      	ldr	r3, [pc, #572]	; (80049c8 <UART_SetConfig+0x2cc>)
 800478c:	429a      	cmp	r2, r3
 800478e:	d005      	beq.n	800479c <UART_SetConfig+0xa0>
 8004790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	4b8d      	ldr	r3, [pc, #564]	; (80049cc <UART_SetConfig+0x2d0>)
 8004798:	429a      	cmp	r2, r3
 800479a:	d104      	bne.n	80047a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800479c:	f7ff ff4c 	bl	8004638 <HAL_RCC_GetPCLK2Freq>
 80047a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047a4:	e003      	b.n	80047ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047a6:	f7ff ff33 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 80047aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b8:	f040 810c 	bne.w	80049d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047c0:	2200      	movs	r2, #0
 80047c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047ce:	4622      	mov	r2, r4
 80047d0:	462b      	mov	r3, r5
 80047d2:	1891      	adds	r1, r2, r2
 80047d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80047d6:	415b      	adcs	r3, r3
 80047d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047de:	4621      	mov	r1, r4
 80047e0:	eb12 0801 	adds.w	r8, r2, r1
 80047e4:	4629      	mov	r1, r5
 80047e6:	eb43 0901 	adc.w	r9, r3, r1
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047fe:	4690      	mov	r8, r2
 8004800:	4699      	mov	r9, r3
 8004802:	4623      	mov	r3, r4
 8004804:	eb18 0303 	adds.w	r3, r8, r3
 8004808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800480c:	462b      	mov	r3, r5
 800480e:	eb49 0303 	adc.w	r3, r9, r3
 8004812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004822:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004826:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800482a:	460b      	mov	r3, r1
 800482c:	18db      	adds	r3, r3, r3
 800482e:	653b      	str	r3, [r7, #80]	; 0x50
 8004830:	4613      	mov	r3, r2
 8004832:	eb42 0303 	adc.w	r3, r2, r3
 8004836:	657b      	str	r3, [r7, #84]	; 0x54
 8004838:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800483c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004840:	f7fb fd2e 	bl	80002a0 <__aeabi_uldivmod>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4b61      	ldr	r3, [pc, #388]	; (80049d0 <UART_SetConfig+0x2d4>)
 800484a:	fba3 2302 	umull	r2, r3, r3, r2
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	011c      	lsls	r4, r3, #4
 8004852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004856:	2200      	movs	r2, #0
 8004858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800485c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004860:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004864:	4642      	mov	r2, r8
 8004866:	464b      	mov	r3, r9
 8004868:	1891      	adds	r1, r2, r2
 800486a:	64b9      	str	r1, [r7, #72]	; 0x48
 800486c:	415b      	adcs	r3, r3
 800486e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004870:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004874:	4641      	mov	r1, r8
 8004876:	eb12 0a01 	adds.w	sl, r2, r1
 800487a:	4649      	mov	r1, r9
 800487c:	eb43 0b01 	adc.w	fp, r3, r1
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800488c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004894:	4692      	mov	sl, r2
 8004896:	469b      	mov	fp, r3
 8004898:	4643      	mov	r3, r8
 800489a:	eb1a 0303 	adds.w	r3, sl, r3
 800489e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048a2:	464b      	mov	r3, r9
 80048a4:	eb4b 0303 	adc.w	r3, fp, r3
 80048a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048c0:	460b      	mov	r3, r1
 80048c2:	18db      	adds	r3, r3, r3
 80048c4:	643b      	str	r3, [r7, #64]	; 0x40
 80048c6:	4613      	mov	r3, r2
 80048c8:	eb42 0303 	adc.w	r3, r2, r3
 80048cc:	647b      	str	r3, [r7, #68]	; 0x44
 80048ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048d6:	f7fb fce3 	bl	80002a0 <__aeabi_uldivmod>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4611      	mov	r1, r2
 80048e0:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <UART_SetConfig+0x2d4>)
 80048e2:	fba3 2301 	umull	r2, r3, r3, r1
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	2264      	movs	r2, #100	; 0x64
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	1acb      	subs	r3, r1, r3
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048f6:	4b36      	ldr	r3, [pc, #216]	; (80049d0 <UART_SetConfig+0x2d4>)
 80048f8:	fba3 2302 	umull	r2, r3, r3, r2
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004904:	441c      	add	r4, r3
 8004906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800490a:	2200      	movs	r2, #0
 800490c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004910:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004914:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004918:	4642      	mov	r2, r8
 800491a:	464b      	mov	r3, r9
 800491c:	1891      	adds	r1, r2, r2
 800491e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004920:	415b      	adcs	r3, r3
 8004922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004924:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004928:	4641      	mov	r1, r8
 800492a:	1851      	adds	r1, r2, r1
 800492c:	6339      	str	r1, [r7, #48]	; 0x30
 800492e:	4649      	mov	r1, r9
 8004930:	414b      	adcs	r3, r1
 8004932:	637b      	str	r3, [r7, #52]	; 0x34
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004940:	4659      	mov	r1, fp
 8004942:	00cb      	lsls	r3, r1, #3
 8004944:	4651      	mov	r1, sl
 8004946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800494a:	4651      	mov	r1, sl
 800494c:	00ca      	lsls	r2, r1, #3
 800494e:	4610      	mov	r0, r2
 8004950:	4619      	mov	r1, r3
 8004952:	4603      	mov	r3, r0
 8004954:	4642      	mov	r2, r8
 8004956:	189b      	adds	r3, r3, r2
 8004958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800495c:	464b      	mov	r3, r9
 800495e:	460a      	mov	r2, r1
 8004960:	eb42 0303 	adc.w	r3, r2, r3
 8004964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004974:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004978:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800497c:	460b      	mov	r3, r1
 800497e:	18db      	adds	r3, r3, r3
 8004980:	62bb      	str	r3, [r7, #40]	; 0x28
 8004982:	4613      	mov	r3, r2
 8004984:	eb42 0303 	adc.w	r3, r2, r3
 8004988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800498a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800498e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004992:	f7fb fc85 	bl	80002a0 <__aeabi_uldivmod>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <UART_SetConfig+0x2d4>)
 800499c:	fba3 1302 	umull	r1, r3, r3, r2
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	2164      	movs	r1, #100	; 0x64
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	3332      	adds	r3, #50	; 0x32
 80049ae:	4a08      	ldr	r2, [pc, #32]	; (80049d0 <UART_SetConfig+0x2d4>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	f003 0207 	and.w	r2, r3, #7
 80049ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4422      	add	r2, r4
 80049c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049c4:	e105      	b.n	8004bd2 <UART_SetConfig+0x4d6>
 80049c6:	bf00      	nop
 80049c8:	40011000 	.word	0x40011000
 80049cc:	40011400 	.word	0x40011400
 80049d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d8:	2200      	movs	r2, #0
 80049da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049e6:	4642      	mov	r2, r8
 80049e8:	464b      	mov	r3, r9
 80049ea:	1891      	adds	r1, r2, r2
 80049ec:	6239      	str	r1, [r7, #32]
 80049ee:	415b      	adcs	r3, r3
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
 80049f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049f6:	4641      	mov	r1, r8
 80049f8:	1854      	adds	r4, r2, r1
 80049fa:	4649      	mov	r1, r9
 80049fc:	eb43 0501 	adc.w	r5, r3, r1
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	00eb      	lsls	r3, r5, #3
 8004a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a0e:	00e2      	lsls	r2, r4, #3
 8004a10:	4614      	mov	r4, r2
 8004a12:	461d      	mov	r5, r3
 8004a14:	4643      	mov	r3, r8
 8004a16:	18e3      	adds	r3, r4, r3
 8004a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a1c:	464b      	mov	r3, r9
 8004a1e:	eb45 0303 	adc.w	r3, r5, r3
 8004a22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a42:	4629      	mov	r1, r5
 8004a44:	008b      	lsls	r3, r1, #2
 8004a46:	4621      	mov	r1, r4
 8004a48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	008a      	lsls	r2, r1, #2
 8004a50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a54:	f7fb fc24 	bl	80002a0 <__aeabi_uldivmod>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4b60      	ldr	r3, [pc, #384]	; (8004be0 <UART_SetConfig+0x4e4>)
 8004a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	011c      	lsls	r4, r3, #4
 8004a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a78:	4642      	mov	r2, r8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	1891      	adds	r1, r2, r2
 8004a7e:	61b9      	str	r1, [r7, #24]
 8004a80:	415b      	adcs	r3, r3
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a88:	4641      	mov	r1, r8
 8004a8a:	1851      	adds	r1, r2, r1
 8004a8c:	6139      	str	r1, [r7, #16]
 8004a8e:	4649      	mov	r1, r9
 8004a90:	414b      	adcs	r3, r1
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004aa0:	4659      	mov	r1, fp
 8004aa2:	00cb      	lsls	r3, r1, #3
 8004aa4:	4651      	mov	r1, sl
 8004aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aaa:	4651      	mov	r1, sl
 8004aac:	00ca      	lsls	r2, r1, #3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	189b      	adds	r3, r3, r2
 8004ab8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004abc:	464b      	mov	r3, r9
 8004abe:	460a      	mov	r2, r1
 8004ac0:	eb42 0303 	adc.w	r3, r2, r3
 8004ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ad2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ae0:	4649      	mov	r1, r9
 8004ae2:	008b      	lsls	r3, r1, #2
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aea:	4641      	mov	r1, r8
 8004aec:	008a      	lsls	r2, r1, #2
 8004aee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004af2:	f7fb fbd5 	bl	80002a0 <__aeabi_uldivmod>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4b39      	ldr	r3, [pc, #228]	; (8004be0 <UART_SetConfig+0x4e4>)
 8004afc:	fba3 1302 	umull	r1, r3, r3, r2
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	2164      	movs	r1, #100	; 0x64
 8004b04:	fb01 f303 	mul.w	r3, r1, r3
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	3332      	adds	r3, #50	; 0x32
 8004b0e:	4a34      	ldr	r2, [pc, #208]	; (8004be0 <UART_SetConfig+0x4e4>)
 8004b10:	fba2 2303 	umull	r2, r3, r2, r3
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b1a:	441c      	add	r4, r3
 8004b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b20:	2200      	movs	r2, #0
 8004b22:	673b      	str	r3, [r7, #112]	; 0x70
 8004b24:	677a      	str	r2, [r7, #116]	; 0x74
 8004b26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b2a:	4642      	mov	r2, r8
 8004b2c:	464b      	mov	r3, r9
 8004b2e:	1891      	adds	r1, r2, r2
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	415b      	adcs	r3, r3
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b3a:	4641      	mov	r1, r8
 8004b3c:	1851      	adds	r1, r2, r1
 8004b3e:	6039      	str	r1, [r7, #0]
 8004b40:	4649      	mov	r1, r9
 8004b42:	414b      	adcs	r3, r1
 8004b44:	607b      	str	r3, [r7, #4]
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b52:	4659      	mov	r1, fp
 8004b54:	00cb      	lsls	r3, r1, #3
 8004b56:	4651      	mov	r1, sl
 8004b58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5c:	4651      	mov	r1, sl
 8004b5e:	00ca      	lsls	r2, r1, #3
 8004b60:	4610      	mov	r0, r2
 8004b62:	4619      	mov	r1, r3
 8004b64:	4603      	mov	r3, r0
 8004b66:	4642      	mov	r2, r8
 8004b68:	189b      	adds	r3, r3, r2
 8004b6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b6c:	464b      	mov	r3, r9
 8004b6e:	460a      	mov	r2, r1
 8004b70:	eb42 0303 	adc.w	r3, r2, r3
 8004b74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	663b      	str	r3, [r7, #96]	; 0x60
 8004b80:	667a      	str	r2, [r7, #100]	; 0x64
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b8e:	4649      	mov	r1, r9
 8004b90:	008b      	lsls	r3, r1, #2
 8004b92:	4641      	mov	r1, r8
 8004b94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b98:	4641      	mov	r1, r8
 8004b9a:	008a      	lsls	r2, r1, #2
 8004b9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ba0:	f7fb fb7e 	bl	80002a0 <__aeabi_uldivmod>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <UART_SetConfig+0x4e4>)
 8004baa:	fba3 1302 	umull	r1, r3, r3, r2
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	2164      	movs	r1, #100	; 0x64
 8004bb2:	fb01 f303 	mul.w	r3, r1, r3
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	3332      	adds	r3, #50	; 0x32
 8004bbc:	4a08      	ldr	r2, [pc, #32]	; (8004be0 <UART_SetConfig+0x4e4>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	f003 020f 	and.w	r2, r3, #15
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4422      	add	r2, r4
 8004bd0:	609a      	str	r2, [r3, #8]
}
 8004bd2:	bf00      	nop
 8004bd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bde:	bf00      	nop
 8004be0:	51eb851f 	.word	0x51eb851f

08004be4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004be4:	b084      	sub	sp, #16
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	f107 001c 	add.w	r0, r7, #28
 8004bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d122      	bne.n	8004c42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d105      	bne.n	8004c36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f001 fbee 	bl	8006418 <USB_CoreReset>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	73fb      	strb	r3, [r7, #15]
 8004c40:	e01a      	b.n	8004c78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f001 fbe2 	bl	8006418 <USB_CoreReset>
 8004c54:	4603      	mov	r3, r0
 8004c56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	639a      	str	r2, [r3, #56]	; 0x38
 8004c6a:	e005      	b.n	8004c78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d10b      	bne.n	8004c96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f043 0206 	orr.w	r2, r3, #6
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f043 0220 	orr.w	r2, r3, #32
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ca2:	b004      	add	sp, #16
 8004ca4:	4770      	bx	lr
	...

08004ca8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d165      	bne.n	8004d88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	4a41      	ldr	r2, [pc, #260]	; (8004dc4 <USB_SetTurnaroundTime+0x11c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d906      	bls.n	8004cd2 <USB_SetTurnaroundTime+0x2a>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4a40      	ldr	r2, [pc, #256]	; (8004dc8 <USB_SetTurnaroundTime+0x120>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d202      	bcs.n	8004cd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ccc:	230f      	movs	r3, #15
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e062      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	4a3c      	ldr	r2, [pc, #240]	; (8004dc8 <USB_SetTurnaroundTime+0x120>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d306      	bcc.n	8004ce8 <USB_SetTurnaroundTime+0x40>
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4a3b      	ldr	r2, [pc, #236]	; (8004dcc <USB_SetTurnaroundTime+0x124>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d202      	bcs.n	8004ce8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004ce2:	230e      	movs	r3, #14
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	e057      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4a38      	ldr	r2, [pc, #224]	; (8004dcc <USB_SetTurnaroundTime+0x124>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d306      	bcc.n	8004cfe <USB_SetTurnaroundTime+0x56>
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4a37      	ldr	r2, [pc, #220]	; (8004dd0 <USB_SetTurnaroundTime+0x128>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d202      	bcs.n	8004cfe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004cf8:	230d      	movs	r3, #13
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	e04c      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4a33      	ldr	r2, [pc, #204]	; (8004dd0 <USB_SetTurnaroundTime+0x128>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d306      	bcc.n	8004d14 <USB_SetTurnaroundTime+0x6c>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4a32      	ldr	r2, [pc, #200]	; (8004dd4 <USB_SetTurnaroundTime+0x12c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d802      	bhi.n	8004d14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d0e:	230c      	movs	r3, #12
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	e041      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4a2f      	ldr	r2, [pc, #188]	; (8004dd4 <USB_SetTurnaroundTime+0x12c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d906      	bls.n	8004d2a <USB_SetTurnaroundTime+0x82>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4a2e      	ldr	r2, [pc, #184]	; (8004dd8 <USB_SetTurnaroundTime+0x130>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d802      	bhi.n	8004d2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d24:	230b      	movs	r3, #11
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e036      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4a2a      	ldr	r2, [pc, #168]	; (8004dd8 <USB_SetTurnaroundTime+0x130>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d906      	bls.n	8004d40 <USB_SetTurnaroundTime+0x98>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4a29      	ldr	r2, [pc, #164]	; (8004ddc <USB_SetTurnaroundTime+0x134>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d802      	bhi.n	8004d40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d3a:	230a      	movs	r3, #10
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	e02b      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4a26      	ldr	r2, [pc, #152]	; (8004ddc <USB_SetTurnaroundTime+0x134>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d906      	bls.n	8004d56 <USB_SetTurnaroundTime+0xae>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4a25      	ldr	r2, [pc, #148]	; (8004de0 <USB_SetTurnaroundTime+0x138>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d202      	bcs.n	8004d56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d50:	2309      	movs	r3, #9
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e020      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	4a21      	ldr	r2, [pc, #132]	; (8004de0 <USB_SetTurnaroundTime+0x138>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d306      	bcc.n	8004d6c <USB_SetTurnaroundTime+0xc4>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4a20      	ldr	r2, [pc, #128]	; (8004de4 <USB_SetTurnaroundTime+0x13c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d802      	bhi.n	8004d6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d66:	2308      	movs	r3, #8
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	e015      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <USB_SetTurnaroundTime+0x13c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d906      	bls.n	8004d82 <USB_SetTurnaroundTime+0xda>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4a1c      	ldr	r2, [pc, #112]	; (8004de8 <USB_SetTurnaroundTime+0x140>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d202      	bcs.n	8004d82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004d7c:	2307      	movs	r3, #7
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	e00a      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004d82:	2306      	movs	r3, #6
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	e007      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d102      	bne.n	8004d94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004d8e:	2309      	movs	r3, #9
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	e001      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004d94:	2309      	movs	r3, #9
 8004d96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	029b      	lsls	r3, r3, #10
 8004dac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004db0:	431a      	orrs	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	00d8acbf 	.word	0x00d8acbf
 8004dc8:	00e4e1c0 	.word	0x00e4e1c0
 8004dcc:	00f42400 	.word	0x00f42400
 8004dd0:	01067380 	.word	0x01067380
 8004dd4:	011a499f 	.word	0x011a499f
 8004dd8:	01312cff 	.word	0x01312cff
 8004ddc:	014ca43f 	.word	0x014ca43f
 8004de0:	016e3600 	.word	0x016e3600
 8004de4:	01a6ab1f 	.word	0x01a6ab1f
 8004de8:	01e84800 	.word	0x01e84800

08004dec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f043 0201 	orr.w	r2, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f023 0201 	bic.w	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d115      	bne.n	8004e7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e5e:	2001      	movs	r0, #1
 8004e60:	f7fc fad2 	bl	8001408 <HAL_Delay>
      ms++;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3301      	adds	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f001 fa45 	bl	80062fa <USB_GetMode>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d01e      	beq.n	8004eb4 <USB_SetCurrentMode+0x84>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b31      	cmp	r3, #49	; 0x31
 8004e7a:	d9f0      	bls.n	8004e5e <USB_SetCurrentMode+0x2e>
 8004e7c:	e01a      	b.n	8004eb4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d115      	bne.n	8004eb0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e90:	2001      	movs	r0, #1
 8004e92:	f7fc fab9 	bl	8001408 <HAL_Delay>
      ms++;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f001 fa2c 	bl	80062fa <USB_GetMode>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <USB_SetCurrentMode+0x84>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b31      	cmp	r3, #49	; 0x31
 8004eac:	d9f0      	bls.n	8004e90 <USB_SetCurrentMode+0x60>
 8004eae:	e001      	b.n	8004eb4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e005      	b.n	8004ec0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b32      	cmp	r3, #50	; 0x32
 8004eb8:	d101      	bne.n	8004ebe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ec8:	b084      	sub	sp, #16
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b086      	sub	sp, #24
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	e009      	b.n	8004efc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	3340      	adds	r3, #64	; 0x40
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b0e      	cmp	r3, #14
 8004f00:	d9f2      	bls.n	8004ee8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d11c      	bne.n	8004f42 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f16:	f043 0302 	orr.w	r3, r3, #2
 8004f1a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f38:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	639a      	str	r2, [r3, #56]	; 0x38
 8004f40:	e00b      	b.n	8004f5a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f60:	461a      	mov	r2, r3
 8004f62:	2300      	movs	r3, #0
 8004f64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f74:	461a      	mov	r2, r3
 8004f76:	680b      	ldr	r3, [r1, #0]
 8004f78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d10c      	bne.n	8004f9a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d104      	bne.n	8004f90 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f86:	2100      	movs	r1, #0
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f965 	bl	8005258 <USB_SetDevSpeed>
 8004f8e:	e008      	b.n	8004fa2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f90:	2101      	movs	r1, #1
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f960 	bl	8005258 <USB_SetDevSpeed>
 8004f98:	e003      	b.n	8004fa2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f9a:	2103      	movs	r1, #3
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f95b 	bl	8005258 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fa2:	2110      	movs	r1, #16
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f8f3 	bl	8005190 <USB_FlushTxFifo>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f91f 	bl	80051f8 <USB_FlushRxFifo>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2300      	movs	r3, #0
 8004fce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	2300      	movs	r3, #0
 8004fda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	e043      	b.n	8005076 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005004:	d118      	bne.n	8005038 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005018:	461a      	mov	r2, r3
 800501a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	e013      	b.n	800504a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502e:	461a      	mov	r2, r3
 8005030:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	e008      	b.n	800504a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005044:	461a      	mov	r2, r3
 8005046:	2300      	movs	r3, #0
 8005048:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	461a      	mov	r2, r3
 8005058:	2300      	movs	r3, #0
 800505a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005068:	461a      	mov	r2, r3
 800506a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800506e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	3301      	adds	r3, #1
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	429a      	cmp	r2, r3
 800507c:	d3b7      	bcc.n	8004fee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	e043      	b.n	800510c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800509a:	d118      	bne.n	80050ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ae:	461a      	mov	r2, r3
 80050b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	e013      	b.n	80050e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c4:	461a      	mov	r2, r3
 80050c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	e008      	b.n	80050e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050da:	461a      	mov	r2, r3
 80050dc:	2300      	movs	r3, #0
 80050de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ec:	461a      	mov	r2, r3
 80050ee:	2300      	movs	r3, #0
 80050f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fe:	461a      	mov	r2, r3
 8005100:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005104:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	3301      	adds	r3, #1
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	429a      	cmp	r2, r3
 8005112:	d3b7      	bcc.n	8005084 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005122:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005126:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005134:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	2b00      	cmp	r3, #0
 800513a:	d105      	bne.n	8005148 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	f043 0210 	orr.w	r2, r3, #16
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	4b0f      	ldr	r3, [pc, #60]	; (800518c <USB_DevInit+0x2c4>)
 800514e:	4313      	orrs	r3, r2
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005156:	2b00      	cmp	r3, #0
 8005158:	d005      	beq.n	8005166 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f043 0208 	orr.w	r2, r3, #8
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d107      	bne.n	800517c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005174:	f043 0304 	orr.w	r3, r3, #4
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800517c:	7dfb      	ldrb	r3, [r7, #23]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005188:	b004      	add	sp, #16
 800518a:	4770      	bx	lr
 800518c:	803c3800 	.word	0x803c3800

08005190 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3301      	adds	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4a13      	ldr	r2, [pc, #76]	; (80051f4 <USB_FlushTxFifo+0x64>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d901      	bls.n	80051b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e01b      	b.n	80051e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	daf2      	bge.n	800519e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	019b      	lsls	r3, r3, #6
 80051c0:	f043 0220 	orr.w	r2, r3, #32
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3301      	adds	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4a08      	ldr	r2, [pc, #32]	; (80051f4 <USB_FlushTxFifo+0x64>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e006      	b.n	80051e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d0f0      	beq.n	80051c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	00030d40 	.word	0x00030d40

080051f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3301      	adds	r3, #1
 8005208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4a11      	ldr	r2, [pc, #68]	; (8005254 <USB_FlushRxFifo+0x5c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d901      	bls.n	8005216 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e018      	b.n	8005248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	daf2      	bge.n	8005204 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2210      	movs	r2, #16
 8005226:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3301      	adds	r3, #1
 800522c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4a08      	ldr	r2, [pc, #32]	; (8005254 <USB_FlushRxFifo+0x5c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e006      	b.n	8005248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	2b10      	cmp	r3, #16
 8005244:	d0f0      	beq.n	8005228 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	00030d40 	.word	0x00030d40

08005258 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	68f9      	ldr	r1, [r7, #12]
 8005274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005278:	4313      	orrs	r3, r2
 800527a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800528a:	b480      	push	{r7}
 800528c:	b087      	sub	sp, #28
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 0306 	and.w	r3, r3, #6
 80052a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d102      	bne.n	80052b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052aa:	2300      	movs	r3, #0
 80052ac:	75fb      	strb	r3, [r7, #23]
 80052ae:	e00a      	b.n	80052c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d002      	beq.n	80052bc <USB_GetDevSpeed+0x32>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b06      	cmp	r3, #6
 80052ba:	d102      	bne.n	80052c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80052bc:	2302      	movs	r3, #2
 80052be:	75fb      	strb	r3, [r7, #23]
 80052c0:	e001      	b.n	80052c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80052c2:	230f      	movs	r3, #15
 80052c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80052c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d13a      	bne.n	8005366 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f6:	69da      	ldr	r2, [r3, #28]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	2101      	movs	r1, #1
 8005302:	fa01 f303 	lsl.w	r3, r1, r3
 8005306:	b29b      	uxth	r3, r3
 8005308:	68f9      	ldr	r1, [r7, #12]
 800530a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800530e:	4313      	orrs	r3, r2
 8005310:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d155      	bne.n	80053d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	791b      	ldrb	r3, [r3, #4]
 8005342:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005344:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	059b      	lsls	r3, r3, #22
 800534a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800534c:	4313      	orrs	r3, r2
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	0151      	lsls	r1, r2, #5
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	440a      	add	r2, r1
 8005356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	e036      	b.n	80053d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536c:	69da      	ldr	r2, [r3, #28]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	2101      	movs	r1, #1
 8005378:	fa01 f303 	lsl.w	r3, r1, r3
 800537c:	041b      	lsls	r3, r3, #16
 800537e:	68f9      	ldr	r1, [r7, #12]
 8005380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005384:	4313      	orrs	r3, r2
 8005386:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d11a      	bne.n	80053d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	791b      	ldrb	r3, [r3, #4]
 80053b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053ba:	430b      	orrs	r3, r1
 80053bc:	4313      	orrs	r3, r2
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
	...

080053e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d161      	bne.n	80054c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005416:	d11f      	bne.n	8005458 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	0151      	lsls	r1, r2, #5
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	440a      	add	r2, r1
 800542e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005432:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005436:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	0151      	lsls	r1, r2, #5
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	440a      	add	r2, r1
 800544e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005456:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	f003 030f 	and.w	r3, r3, #15
 8005468:	2101      	movs	r1, #1
 800546a:	fa01 f303 	lsl.w	r3, r1, r3
 800546e:	b29b      	uxth	r3, r3
 8005470:	43db      	mvns	r3, r3
 8005472:	68f9      	ldr	r1, [r7, #12]
 8005474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005478:	4013      	ands	r3, r2
 800547a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005482:	69da      	ldr	r2, [r3, #28]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	2101      	movs	r1, #1
 800548e:	fa01 f303 	lsl.w	r3, r1, r3
 8005492:	b29b      	uxth	r3, r3
 8005494:	43db      	mvns	r3, r3
 8005496:	68f9      	ldr	r1, [r7, #12]
 8005498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800549c:	4013      	ands	r3, r2
 800549e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	0159      	lsls	r1, r3, #5
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	440b      	add	r3, r1
 80054b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ba:	4619      	mov	r1, r3
 80054bc:	4b35      	ldr	r3, [pc, #212]	; (8005594 <USB_DeactivateEndpoint+0x1b0>)
 80054be:	4013      	ands	r3, r2
 80054c0:	600b      	str	r3, [r1, #0]
 80054c2:	e060      	b.n	8005586 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054da:	d11f      	bne.n	800551c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005516:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800551a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	2101      	movs	r1, #1
 800552e:	fa01 f303 	lsl.w	r3, r1, r3
 8005532:	041b      	lsls	r3, r3, #16
 8005534:	43db      	mvns	r3, r3
 8005536:	68f9      	ldr	r1, [r7, #12]
 8005538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800553c:	4013      	ands	r3, r2
 800553e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	2101      	movs	r1, #1
 8005552:	fa01 f303 	lsl.w	r3, r1, r3
 8005556:	041b      	lsls	r3, r3, #16
 8005558:	43db      	mvns	r3, r3
 800555a:	68f9      	ldr	r1, [r7, #12]
 800555c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005560:	4013      	ands	r3, r2
 8005562:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	0159      	lsls	r1, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	440b      	add	r3, r1
 800557a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557e:	4619      	mov	r1, r3
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <USB_DeactivateEndpoint+0x1b4>)
 8005582:	4013      	ands	r3, r2
 8005584:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	ec337800 	.word	0xec337800
 8005598:	eff37800 	.word	0xeff37800

0800559c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08a      	sub	sp, #40	; 0x28
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	4613      	mov	r3, r2
 80055a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	785b      	ldrb	r3, [r3, #1]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	f040 815c 	bne.w	8005876 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d132      	bne.n	800562c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	0151      	lsls	r1, r2, #5
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	440a      	add	r2, r1
 8005600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005608:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	0151      	lsls	r1, r2, #5
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	440a      	add	r2, r1
 8005620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005624:	0cdb      	lsrs	r3, r3, #19
 8005626:	04db      	lsls	r3, r3, #19
 8005628:	6113      	str	r3, [r2, #16]
 800562a:	e074      	b.n	8005716 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	0151      	lsls	r1, r2, #5
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	440a      	add	r2, r1
 8005642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005646:	0cdb      	lsrs	r3, r3, #19
 8005648:	04db      	lsls	r3, r3, #19
 800564a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	0151      	lsls	r1, r2, #5
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	440a      	add	r2, r1
 8005662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005666:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800566a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800566e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	6999      	ldr	r1, [r3, #24]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	440b      	add	r3, r1
 8005688:	1e59      	subs	r1, r3, #1
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005692:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005694:	4b9d      	ldr	r3, [pc, #628]	; (800590c <USB_EPStartXfer+0x370>)
 8005696:	400b      	ands	r3, r1
 8005698:	69b9      	ldr	r1, [r7, #24]
 800569a:	0148      	lsls	r0, r1, #5
 800569c:	69f9      	ldr	r1, [r7, #28]
 800569e:	4401      	add	r1, r0
 80056a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056a4:	4313      	orrs	r3, r2
 80056a6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056be:	69b9      	ldr	r1, [r7, #24]
 80056c0:	0148      	lsls	r0, r1, #5
 80056c2:	69f9      	ldr	r1, [r7, #28]
 80056c4:	4401      	add	r1, r0
 80056c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056ca:	4313      	orrs	r3, r2
 80056cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	791b      	ldrb	r3, [r3, #4]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d11f      	bne.n	8005716 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80056f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	440a      	add	r2, r1
 800570c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005710:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005714:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d14b      	bne.n	80057b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d009      	beq.n	8005738 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	461a      	mov	r2, r3
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	791b      	ldrb	r3, [r3, #4]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d128      	bne.n	8005792 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d110      	bne.n	8005772 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	0151      	lsls	r1, r2, #5
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	440a      	add	r2, r1
 8005766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800576a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	e00f      	b.n	8005792 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	0151      	lsls	r1, r2, #5
 8005784:	69fa      	ldr	r2, [r7, #28]
 8005786:	440a      	add	r2, r1
 8005788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005790:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	0151      	lsls	r1, r2, #5
 80057a4:	69fa      	ldr	r2, [r7, #28]
 80057a6:	440a      	add	r2, r1
 80057a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e133      	b.n	8005a1c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	791b      	ldrb	r3, [r3, #4]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d015      	beq.n	8005808 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 811b 	beq.w	8005a1c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	2101      	movs	r1, #1
 80057f8:	fa01 f303 	lsl.w	r3, r1, r3
 80057fc:	69f9      	ldr	r1, [r7, #28]
 80057fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005802:	4313      	orrs	r3, r2
 8005804:	634b      	str	r3, [r1, #52]	; 0x34
 8005806:	e109      	b.n	8005a1c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005814:	2b00      	cmp	r3, #0
 8005816:	d110      	bne.n	800583a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	0151      	lsls	r1, r2, #5
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	440a      	add	r2, r1
 800582e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005832:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	e00f      	b.n	800585a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	440a      	add	r2, r1
 8005850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005858:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	6919      	ldr	r1, [r3, #16]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	781a      	ldrb	r2, [r3, #0]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	b298      	uxth	r0, r3
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	4603      	mov	r3, r0
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 fade 	bl	8005e30 <USB_WritePacket>
 8005874:	e0d2      	b.n	8005a1c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005890:	0cdb      	lsrs	r3, r3, #19
 8005892:	04db      	lsls	r3, r3, #19
 8005894:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	0151      	lsls	r1, r2, #5
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	440a      	add	r2, r1
 80058ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d126      	bne.n	8005910 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058d8:	69b9      	ldr	r1, [r7, #24]
 80058da:	0148      	lsls	r0, r1, #5
 80058dc:	69f9      	ldr	r1, [r7, #28]
 80058de:	4401      	add	r1, r0
 80058e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058e4:	4313      	orrs	r3, r2
 80058e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	0151      	lsls	r1, r2, #5
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	440a      	add	r2, r1
 80058fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005902:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005906:	6113      	str	r3, [r2, #16]
 8005908:	e03a      	b.n	8005980 <USB_EPStartXfer+0x3e4>
 800590a:	bf00      	nop
 800590c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	4413      	add	r3, r2
 800591a:	1e5a      	subs	r2, r3, #1
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	fbb2 f3f3 	udiv	r3, r2, r3
 8005924:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	8afa      	ldrh	r2, [r7, #22]
 800592c:	fb03 f202 	mul.w	r2, r3, r2
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	8afb      	ldrh	r3, [r7, #22]
 8005944:	04d9      	lsls	r1, r3, #19
 8005946:	4b38      	ldr	r3, [pc, #224]	; (8005a28 <USB_EPStartXfer+0x48c>)
 8005948:	400b      	ands	r3, r1
 800594a:	69b9      	ldr	r1, [r7, #24]
 800594c:	0148      	lsls	r0, r1, #5
 800594e:	69f9      	ldr	r1, [r7, #28]
 8005950:	4401      	add	r1, r0
 8005952:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005956:	4313      	orrs	r3, r2
 8005958:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005970:	69b9      	ldr	r1, [r7, #24]
 8005972:	0148      	lsls	r0, r1, #5
 8005974:	69f9      	ldr	r1, [r7, #28]
 8005976:	4401      	add	r1, r0
 8005978:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800597c:	4313      	orrs	r3, r2
 800597e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d10d      	bne.n	80059a2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d009      	beq.n	80059a2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6919      	ldr	r1, [r3, #16]
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599e:	460a      	mov	r2, r1
 80059a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	791b      	ldrb	r3, [r3, #4]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d128      	bne.n	80059fc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d110      	bne.n	80059dc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	69fa      	ldr	r2, [r7, #28]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	e00f      	b.n	80059fc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3720      	adds	r7, #32
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	1ff80000 	.word	0x1ff80000

08005a2c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	4613      	mov	r3, r2
 8005a38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	785b      	ldrb	r3, [r3, #1]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	f040 80ce 	bne.w	8005bea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d132      	bne.n	8005abc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	0151      	lsls	r1, r2, #5
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	440a      	add	r2, r1
 8005a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	0151      	lsls	r1, r2, #5
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	440a      	add	r2, r1
 8005ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab4:	0cdb      	lsrs	r3, r3, #19
 8005ab6:	04db      	lsls	r3, r3, #19
 8005ab8:	6113      	str	r3, [r2, #16]
 8005aba:	e04e      	b.n	8005b5a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	0151      	lsls	r1, r2, #5
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	440a      	add	r2, r1
 8005ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad6:	0cdb      	lsrs	r3, r3, #19
 8005ad8:	04db      	lsls	r3, r3, #19
 8005ada:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	0151      	lsls	r1, r2, #5
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	440a      	add	r2, r1
 8005af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005afa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005afe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	699a      	ldr	r2, [r3, #24]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d903      	bls.n	8005b14 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	0151      	lsls	r1, r2, #5
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	440a      	add	r2, r1
 8005b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b40:	691a      	ldr	r2, [r3, #16]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b4a:	6939      	ldr	r1, [r7, #16]
 8005b4c:	0148      	lsls	r0, r1, #5
 8005b4e:	6979      	ldr	r1, [r7, #20]
 8005b50:	4401      	add	r1, r0
 8005b52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b56:	4313      	orrs	r3, r2
 8005b58:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d11e      	bne.n	8005b9e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d009      	beq.n	8005b7c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	461a      	mov	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	0151      	lsls	r1, r2, #5
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	440a      	add	r2, r1
 8005b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	e097      	b.n	8005cce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	0151      	lsls	r1, r2, #5
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bbc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 8083 	beq.w	8005cce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	2101      	movs	r1, #1
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	6979      	ldr	r1, [r7, #20]
 8005be0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005be4:	4313      	orrs	r3, r2
 8005be6:	634b      	str	r3, [r1, #52]	; 0x34
 8005be8:	e071      	b.n	8005cce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c04:	0cdb      	lsrs	r3, r3, #19
 8005c06:	04db      	lsls	r3, r3, #19
 8005c08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c7c:	6939      	ldr	r1, [r7, #16]
 8005c7e:	0148      	lsls	r0, r1, #5
 8005c80:	6979      	ldr	r1, [r7, #20]
 8005c82:	4401      	add	r1, r0
 8005c84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005c8c:	79fb      	ldrb	r3, [r7, #7]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d10d      	bne.n	8005cae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d009      	beq.n	8005cae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	6919      	ldr	r1, [r3, #16]
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	460a      	mov	r2, r1
 8005cac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ccc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	785b      	ldrb	r3, [r3, #1]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d14a      	bne.n	8005d90 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d12:	f040 8086 	bne.w	8005e22 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	7812      	ldrb	r2, [r2, #0]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d38:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	7812      	ldrb	r2, [r2, #0]
 8005d4e:	0151      	lsls	r1, r2, #5
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	440a      	add	r2, r1
 8005d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3301      	adds	r3, #1
 8005d62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d902      	bls.n	8005d74 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	75fb      	strb	r3, [r7, #23]
          break;
 8005d72:	e056      	b.n	8005e22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d8c:	d0e7      	beq.n	8005d5e <USB_EPStopXfer+0x82>
 8005d8e:	e048      	b.n	8005e22 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da8:	d13b      	bne.n	8005e22 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	7812      	ldrb	r2, [r2, #0]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dcc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	7812      	ldrb	r2, [r2, #0]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005df0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3301      	adds	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d902      	bls.n	8005e08 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	75fb      	strb	r3, [r7, #23]
          break;
 8005e06:	e00c      	b.n	8005e22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e20:	d0e7      	beq.n	8005df2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b089      	sub	sp, #36	; 0x24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	460b      	mov	r3, r1
 8005e40:	71fb      	strb	r3, [r7, #7]
 8005e42:	4613      	mov	r3, r2
 8005e44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d123      	bne.n	8005e9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e56:	88bb      	ldrh	r3, [r7, #4]
 8005e58:	3303      	adds	r3, #3
 8005e5a:	089b      	lsrs	r3, r3, #2
 8005e5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61bb      	str	r3, [r7, #24]
 8005e62:	e018      	b.n	8005e96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e64:	79fb      	ldrb	r3, [r7, #7]
 8005e66:	031a      	lsls	r2, r3, #12
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e70:	461a      	mov	r2, r3
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	3301      	adds	r3, #1
 8005e82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	3301      	adds	r3, #1
 8005e88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	3301      	adds	r3, #1
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d3e2      	bcc.n	8005e64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3724      	adds	r7, #36	; 0x24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b08b      	sub	sp, #44	; 0x2c
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	089b      	lsrs	r3, r3, #2
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005eca:	88fb      	ldrh	r3, [r7, #6]
 8005ecc:	f003 0303 	and.w	r3, r3, #3
 8005ed0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	623b      	str	r3, [r7, #32]
 8005ed6:	e014      	b.n	8005f02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	3301      	adds	r3, #1
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	3301      	adds	r3, #1
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	3301      	adds	r3, #1
 8005f00:	623b      	str	r3, [r7, #32]
 8005f02:	6a3a      	ldr	r2, [r7, #32]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d3e6      	bcc.n	8005ed8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f0a:	8bfb      	ldrh	r3, [r7, #30]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01e      	beq.n	8005f4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f107 0310 	add.w	r3, r7, #16
 8005f20:	6812      	ldr	r2, [r2, #0]
 8005f22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	701a      	strb	r2, [r3, #0]
      i++;
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	3301      	adds	r3, #1
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f42:	8bfb      	ldrh	r3, [r7, #30]
 8005f44:	3b01      	subs	r3, #1
 8005f46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f48:	8bfb      	ldrh	r3, [r7, #30]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1ea      	bne.n	8005f24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	372c      	adds	r7, #44	; 0x2c
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d12c      	bne.n	8005fd2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	db12      	blt.n	8005fb0 <USB_EPSetStall+0x54>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00f      	beq.n	8005fb0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005faa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	0151      	lsls	r1, r2, #5
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	440a      	add	r2, r1
 8005fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	e02b      	b.n	800602a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	db12      	blt.n	800600a <USB_EPSetStall+0xae>
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00f      	beq.n	800600a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	0151      	lsls	r1, r2, #5
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	440a      	add	r2, r1
 8006000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006004:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006008:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	440a      	add	r2, r1
 8006020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006028:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d128      	bne.n	80060a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	440a      	add	r2, r1
 800606a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800606e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006072:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	791b      	ldrb	r3, [r3, #4]
 8006078:	2b03      	cmp	r3, #3
 800607a:	d003      	beq.n	8006084 <USB_EPClearStall+0x4c>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	791b      	ldrb	r3, [r3, #4]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d138      	bne.n	80060f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	440a      	add	r2, r1
 800609a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a2:	6013      	str	r3, [r2, #0]
 80060a4:	e027      	b.n	80060f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	0151      	lsls	r1, r2, #5
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	440a      	add	r2, r1
 80060bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	791b      	ldrb	r3, [r3, #4]
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d003      	beq.n	80060d6 <USB_EPClearStall+0x9e>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	791b      	ldrb	r3, [r3, #4]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d10f      	bne.n	80060f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006122:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006126:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006138:	68f9      	ldr	r1, [r7, #12]
 800613a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800613e:	4313      	orrs	r3, r2
 8006140:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800616a:	f023 0303 	bic.w	r3, r3, #3
 800616e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800617e:	f023 0302 	bic.w	r3, r3, #2
 8006182:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006192:	b480      	push	{r7}
 8006194:	b085      	sub	sp, #20
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061ac:	f023 0303 	bic.w	r3, r3, #3
 80061b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061c0:	f043 0302 	orr.w	r3, r3, #2
 80061c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4013      	ands	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061ec:	68fb      	ldr	r3, [r7, #12]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	4013      	ands	r3, r2
 800621c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	0c1b      	lsrs	r3, r3, #16
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	4013      	ands	r3, r2
 8006250:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	b29b      	uxth	r3, r3
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	460b      	mov	r3, r1
 800626c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	4013      	ands	r3, r2
 800628e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006290:	68bb      	ldr	r3, [r7, #8]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800629e:	b480      	push	{r7}
 80062a0:	b087      	sub	sp, #28
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	460b      	mov	r3, r1
 80062a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80062c2:	78fb      	ldrb	r3, [r7, #3]
 80062c4:	f003 030f 	and.w	r3, r3, #15
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	fa22 f303 	lsr.w	r3, r2, r3
 80062ce:	01db      	lsls	r3, r3, #7
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4013      	ands	r3, r2
 80062ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062ec:	68bb      	ldr	r3, [r7, #8]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	f003 0301 	and.w	r3, r3, #1
}
 800630a:	4618      	mov	r0, r3
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006316:	b480      	push	{r7}
 8006318:	b085      	sub	sp, #20
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006330:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006334:	f023 0307 	bic.w	r3, r3, #7
 8006338:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800634c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	460b      	mov	r3, r1
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	333c      	adds	r3, #60	; 0x3c
 8006372:	3304      	adds	r3, #4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4a26      	ldr	r2, [pc, #152]	; (8006414 <USB_EP0_OutStart+0xb8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d90a      	bls.n	8006396 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800638c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006390:	d101      	bne.n	8006396 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	e037      	b.n	8006406 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639c:	461a      	mov	r2, r3
 800639e:	2300      	movs	r3, #0
 80063a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c4:	f043 0318 	orr.w	r3, r3, #24
 80063c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80063dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80063de:	7afb      	ldrb	r3, [r7, #11]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d10f      	bne.n	8006404 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ea:	461a      	mov	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006402:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	4f54300a 	.word	0x4f54300a

08006418 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3301      	adds	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4a13      	ldr	r2, [pc, #76]	; (800647c <USB_CoreReset+0x64>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d901      	bls.n	8006436 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e01b      	b.n	800646e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	daf2      	bge.n	8006424 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f043 0201 	orr.w	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3301      	adds	r3, #1
 8006452:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4a09      	ldr	r2, [pc, #36]	; (800647c <USB_CoreReset+0x64>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d901      	bls.n	8006460 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e006      	b.n	800646e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b01      	cmp	r3, #1
 800646a:	d0f0      	beq.n	800644e <USB_CoreReset+0x36>

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	00030d40 	.word	0x00030d40

08006480 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800648c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006490:	f002 fca2 	bl	8008dd8 <USBD_static_malloc>
 8006494:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d109      	bne.n	80064b0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	32b0      	adds	r2, #176	; 0xb0
 80064a6:	2100      	movs	r1, #0
 80064a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80064ac:	2302      	movs	r3, #2
 80064ae:	e0d4      	b.n	800665a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80064b0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80064b4:	2100      	movs	r1, #0
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f002 fd0a 	bl	8008ed0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	32b0      	adds	r2, #176	; 0xb0
 80064c6:	68f9      	ldr	r1, [r7, #12]
 80064c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	32b0      	adds	r2, #176	; 0xb0
 80064d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	7c1b      	ldrb	r3, [r3, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d138      	bne.n	800655a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80064e8:	4b5e      	ldr	r3, [pc, #376]	; (8006664 <USBD_CDC_Init+0x1e4>)
 80064ea:	7819      	ldrb	r1, [r3, #0]
 80064ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f0:	2202      	movs	r2, #2
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f002 fb4d 	bl	8008b92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80064f8:	4b5a      	ldr	r3, [pc, #360]	; (8006664 <USBD_CDC_Init+0x1e4>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	f003 020f 	and.w	r2, r3, #15
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	440b      	add	r3, r1
 800650c:	3324      	adds	r3, #36	; 0x24
 800650e:	2201      	movs	r2, #1
 8006510:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006512:	4b55      	ldr	r3, [pc, #340]	; (8006668 <USBD_CDC_Init+0x1e8>)
 8006514:	7819      	ldrb	r1, [r3, #0]
 8006516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800651a:	2202      	movs	r2, #2
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f002 fb38 	bl	8008b92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006522:	4b51      	ldr	r3, [pc, #324]	; (8006668 <USBD_CDC_Init+0x1e8>)
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	f003 020f 	and.w	r2, r3, #15
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800653a:	2201      	movs	r2, #1
 800653c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800653e:	4b4b      	ldr	r3, [pc, #300]	; (800666c <USBD_CDC_Init+0x1ec>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	f003 020f 	and.w	r2, r3, #15
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	4613      	mov	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	440b      	add	r3, r1
 8006552:	3326      	adds	r3, #38	; 0x26
 8006554:	2210      	movs	r2, #16
 8006556:	801a      	strh	r2, [r3, #0]
 8006558:	e035      	b.n	80065c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800655a:	4b42      	ldr	r3, [pc, #264]	; (8006664 <USBD_CDC_Init+0x1e4>)
 800655c:	7819      	ldrb	r1, [r3, #0]
 800655e:	2340      	movs	r3, #64	; 0x40
 8006560:	2202      	movs	r2, #2
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f002 fb15 	bl	8008b92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006568:	4b3e      	ldr	r3, [pc, #248]	; (8006664 <USBD_CDC_Init+0x1e4>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	f003 020f 	and.w	r2, r3, #15
 8006570:	6879      	ldr	r1, [r7, #4]
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	440b      	add	r3, r1
 800657c:	3324      	adds	r3, #36	; 0x24
 800657e:	2201      	movs	r2, #1
 8006580:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006582:	4b39      	ldr	r3, [pc, #228]	; (8006668 <USBD_CDC_Init+0x1e8>)
 8006584:	7819      	ldrb	r1, [r3, #0]
 8006586:	2340      	movs	r3, #64	; 0x40
 8006588:	2202      	movs	r2, #2
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f002 fb01 	bl	8008b92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006590:	4b35      	ldr	r3, [pc, #212]	; (8006668 <USBD_CDC_Init+0x1e8>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	f003 020f 	and.w	r2, r3, #15
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	4613      	mov	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	440b      	add	r3, r1
 80065a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065a8:	2201      	movs	r2, #1
 80065aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065ac:	4b2f      	ldr	r3, [pc, #188]	; (800666c <USBD_CDC_Init+0x1ec>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f003 020f 	and.w	r2, r3, #15
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	3326      	adds	r3, #38	; 0x26
 80065c2:	2210      	movs	r2, #16
 80065c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065c6:	4b29      	ldr	r3, [pc, #164]	; (800666c <USBD_CDC_Init+0x1ec>)
 80065c8:	7819      	ldrb	r1, [r3, #0]
 80065ca:	2308      	movs	r3, #8
 80065cc:	2203      	movs	r2, #3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f002 fadf 	bl	8008b92 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80065d4:	4b25      	ldr	r3, [pc, #148]	; (800666c <USBD_CDC_Init+0x1ec>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f003 020f 	and.w	r2, r3, #15
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	3324      	adds	r3, #36	; 0x24
 80065ea:	2201      	movs	r2, #1
 80065ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	33b0      	adds	r3, #176	; 0xb0
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006624:	2302      	movs	r3, #2
 8006626:	e018      	b.n	800665a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	7c1b      	ldrb	r3, [r3, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10a      	bne.n	8006646 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006630:	4b0d      	ldr	r3, [pc, #52]	; (8006668 <USBD_CDC_Init+0x1e8>)
 8006632:	7819      	ldrb	r1, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800663a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f002 fb96 	bl	8008d70 <USBD_LL_PrepareReceive>
 8006644:	e008      	b.n	8006658 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006646:	4b08      	ldr	r3, [pc, #32]	; (8006668 <USBD_CDC_Init+0x1e8>)
 8006648:	7819      	ldrb	r1, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006650:	2340      	movs	r3, #64	; 0x40
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f002 fb8c 	bl	8008d70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20000093 	.word	0x20000093
 8006668:	20000094 	.word	0x20000094
 800666c:	20000095 	.word	0x20000095

08006670 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800667c:	4b3a      	ldr	r3, [pc, #232]	; (8006768 <USBD_CDC_DeInit+0xf8>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f002 faab 	bl	8008bde <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006688:	4b37      	ldr	r3, [pc, #220]	; (8006768 <USBD_CDC_DeInit+0xf8>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	f003 020f 	and.w	r2, r3, #15
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	440b      	add	r3, r1
 800669c:	3324      	adds	r3, #36	; 0x24
 800669e:	2200      	movs	r2, #0
 80066a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80066a2:	4b32      	ldr	r3, [pc, #200]	; (800676c <USBD_CDC_DeInit+0xfc>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	4619      	mov	r1, r3
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f002 fa98 	bl	8008bde <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80066ae:	4b2f      	ldr	r3, [pc, #188]	; (800676c <USBD_CDC_DeInit+0xfc>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	f003 020f 	and.w	r2, r3, #15
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066c6:	2200      	movs	r2, #0
 80066c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80066ca:	4b29      	ldr	r3, [pc, #164]	; (8006770 <USBD_CDC_DeInit+0x100>)
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f002 fa84 	bl	8008bde <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80066d6:	4b26      	ldr	r3, [pc, #152]	; (8006770 <USBD_CDC_DeInit+0x100>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	f003 020f 	and.w	r2, r3, #15
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	4613      	mov	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	3324      	adds	r3, #36	; 0x24
 80066ec:	2200      	movs	r2, #0
 80066ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80066f0:	4b1f      	ldr	r3, [pc, #124]	; (8006770 <USBD_CDC_DeInit+0x100>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	f003 020f 	and.w	r2, r3, #15
 80066f8:	6879      	ldr	r1, [r7, #4]
 80066fa:	4613      	mov	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	440b      	add	r3, r1
 8006704:	3326      	adds	r3, #38	; 0x26
 8006706:	2200      	movs	r2, #0
 8006708:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	32b0      	adds	r2, #176	; 0xb0
 8006714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d01f      	beq.n	800675c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	33b0      	adds	r3, #176	; 0xb0
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	32b0      	adds	r2, #176	; 0xb0
 800673a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673e:	4618      	mov	r0, r3
 8006740:	f002 fb58 	bl	8008df4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	32b0      	adds	r2, #176	; 0xb0
 800674e:	2100      	movs	r1, #0
 8006750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20000093 	.word	0x20000093
 800676c:	20000094 	.word	0x20000094
 8006770:	20000095 	.word	0x20000095

08006774 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	32b0      	adds	r2, #176	; 0xb0
 8006788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e0bf      	b.n	8006924 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d050      	beq.n	8006852 <USBD_CDC_Setup+0xde>
 80067b0:	2b20      	cmp	r3, #32
 80067b2:	f040 80af 	bne.w	8006914 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	88db      	ldrh	r3, [r3, #6]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d03a      	beq.n	8006834 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	b25b      	sxtb	r3, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	da1b      	bge.n	8006800 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	33b0      	adds	r3, #176	; 0xb0
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80067de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	88d2      	ldrh	r2, [r2, #6]
 80067e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	88db      	ldrh	r3, [r3, #6]
 80067ea:	2b07      	cmp	r3, #7
 80067ec:	bf28      	it	cs
 80067ee:	2307      	movcs	r3, #7
 80067f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	89fa      	ldrh	r2, [r7, #14]
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 fd89 	bl	8008310 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80067fe:	e090      	b.n	8006922 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	785a      	ldrb	r2, [r3, #1]
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	88db      	ldrh	r3, [r3, #6]
 800680e:	2b3f      	cmp	r3, #63	; 0x3f
 8006810:	d803      	bhi.n	800681a <USBD_CDC_Setup+0xa6>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	88db      	ldrh	r3, [r3, #6]
 8006816:	b2da      	uxtb	r2, r3
 8006818:	e000      	b.n	800681c <USBD_CDC_Setup+0xa8>
 800681a:	2240      	movs	r2, #64	; 0x40
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006822:	6939      	ldr	r1, [r7, #16]
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800682a:	461a      	mov	r2, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 fd9b 	bl	8008368 <USBD_CtlPrepareRx>
      break;
 8006832:	e076      	b.n	8006922 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	33b0      	adds	r3, #176	; 0xb0
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	7850      	ldrb	r0, [r2, #1]
 800684a:	2200      	movs	r2, #0
 800684c:	6839      	ldr	r1, [r7, #0]
 800684e:	4798      	blx	r3
      break;
 8006850:	e067      	b.n	8006922 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	785b      	ldrb	r3, [r3, #1]
 8006856:	2b0b      	cmp	r3, #11
 8006858:	d851      	bhi.n	80068fe <USBD_CDC_Setup+0x18a>
 800685a:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <USBD_CDC_Setup+0xec>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	08006891 	.word	0x08006891
 8006864:	0800690d 	.word	0x0800690d
 8006868:	080068ff 	.word	0x080068ff
 800686c:	080068ff 	.word	0x080068ff
 8006870:	080068ff 	.word	0x080068ff
 8006874:	080068ff 	.word	0x080068ff
 8006878:	080068ff 	.word	0x080068ff
 800687c:	080068ff 	.word	0x080068ff
 8006880:	080068ff 	.word	0x080068ff
 8006884:	080068ff 	.word	0x080068ff
 8006888:	080068bb 	.word	0x080068bb
 800688c:	080068e5 	.word	0x080068e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b03      	cmp	r3, #3
 800689a:	d107      	bne.n	80068ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800689c:	f107 030a 	add.w	r3, r7, #10
 80068a0:	2202      	movs	r2, #2
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 fd33 	bl	8008310 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068aa:	e032      	b.n	8006912 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 fcbd 	bl	800822e <USBD_CtlError>
            ret = USBD_FAIL;
 80068b4:	2303      	movs	r3, #3
 80068b6:	75fb      	strb	r3, [r7, #23]
          break;
 80068b8:	e02b      	b.n	8006912 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d107      	bne.n	80068d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80068c6:	f107 030d 	add.w	r3, r7, #13
 80068ca:	2201      	movs	r2, #1
 80068cc:	4619      	mov	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 fd1e 	bl	8008310 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068d4:	e01d      	b.n	8006912 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 fca8 	bl	800822e <USBD_CtlError>
            ret = USBD_FAIL;
 80068de:	2303      	movs	r3, #3
 80068e0:	75fb      	strb	r3, [r7, #23]
          break;
 80068e2:	e016      	b.n	8006912 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d00f      	beq.n	8006910 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f001 fc9b 	bl	800822e <USBD_CtlError>
            ret = USBD_FAIL;
 80068f8:	2303      	movs	r3, #3
 80068fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80068fc:	e008      	b.n	8006910 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f001 fc94 	bl	800822e <USBD_CtlError>
          ret = USBD_FAIL;
 8006906:	2303      	movs	r3, #3
 8006908:	75fb      	strb	r3, [r7, #23]
          break;
 800690a:	e002      	b.n	8006912 <USBD_CDC_Setup+0x19e>
          break;
 800690c:	bf00      	nop
 800690e:	e008      	b.n	8006922 <USBD_CDC_Setup+0x1ae>
          break;
 8006910:	bf00      	nop
      }
      break;
 8006912:	e006      	b.n	8006922 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 fc89 	bl	800822e <USBD_CtlError>
      ret = USBD_FAIL;
 800691c:	2303      	movs	r3, #3
 800691e:	75fb      	strb	r3, [r7, #23]
      break;
 8006920:	bf00      	nop
  }

  return (uint8_t)ret;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800693e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	32b0      	adds	r2, #176	; 0xb0
 800694a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006952:	2303      	movs	r3, #3
 8006954:	e065      	b.n	8006a22 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	32b0      	adds	r2, #176	; 0xb0
 8006960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006964:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	f003 020f 	and.w	r2, r3, #15
 800696c:	6879      	ldr	r1, [r7, #4]
 800696e:	4613      	mov	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	440b      	add	r3, r1
 8006978:	3318      	adds	r3, #24
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d02f      	beq.n	80069e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	f003 020f 	and.w	r2, r3, #15
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	440b      	add	r3, r1
 8006992:	3318      	adds	r3, #24
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	78fb      	ldrb	r3, [r7, #3]
 8006998:	f003 010f 	and.w	r1, r3, #15
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	460b      	mov	r3, r1
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	440b      	add	r3, r1
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4403      	add	r3, r0
 80069a8:	3348      	adds	r3, #72	; 0x48
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80069b0:	fb01 f303 	mul.w	r3, r1, r3
 80069b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d112      	bne.n	80069e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80069ba:	78fb      	ldrb	r3, [r7, #3]
 80069bc:	f003 020f 	and.w	r2, r3, #15
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	3318      	adds	r3, #24
 80069ce:	2200      	movs	r2, #0
 80069d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80069d2:	78f9      	ldrb	r1, [r7, #3]
 80069d4:	2300      	movs	r3, #0
 80069d6:	2200      	movs	r2, #0
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f002 f9a8 	bl	8008d2e <USBD_LL_Transmit>
 80069de:	e01f      	b.n	8006a20 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	33b0      	adds	r3, #176	; 0xb0
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d010      	beq.n	8006a20 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	33b0      	adds	r3, #176	; 0xb0
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006a1c:	78fa      	ldrb	r2, [r7, #3]
 8006a1e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	32b0      	adds	r2, #176	; 0xb0
 8006a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	32b0      	adds	r2, #176	; 0xb0
 8006a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e01a      	b.n	8006a92 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f002 f9a6 	bl	8008db2 <USBD_LL_GetRxDataSize>
 8006a66:	4602      	mov	r2, r0
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	33b0      	adds	r3, #176	; 0xb0
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	32b0      	adds	r2, #176	; 0xb0
 8006aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e025      	b.n	8006b08 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	33b0      	adds	r3, #176	; 0xb0
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d01a      	beq.n	8006b06 <USBD_CDC_EP0_RxReady+0x6c>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ad6:	2bff      	cmp	r3, #255	; 0xff
 8006ad8:	d015      	beq.n	8006b06 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	33b0      	adds	r3, #176	; 0xb0
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006af2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006afa:	b292      	uxth	r2, r2
 8006afc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	22ff      	movs	r2, #255	; 0xff
 8006b02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b18:	2182      	movs	r1, #130	; 0x82
 8006b1a:	4818      	ldr	r0, [pc, #96]	; (8006b7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b1c:	f000 fd4f 	bl	80075be <USBD_GetEpDesc>
 8006b20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b22:	2101      	movs	r1, #1
 8006b24:	4815      	ldr	r0, [pc, #84]	; (8006b7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b26:	f000 fd4a 	bl	80075be <USBD_GetEpDesc>
 8006b2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b2c:	2181      	movs	r1, #129	; 0x81
 8006b2e:	4813      	ldr	r0, [pc, #76]	; (8006b7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b30:	f000 fd45 	bl	80075be <USBD_GetEpDesc>
 8006b34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	2210      	movs	r2, #16
 8006b40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d006      	beq.n	8006b56 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b50:	711a      	strb	r2, [r3, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d006      	beq.n	8006b6a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b64:	711a      	strb	r2, [r3, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2243      	movs	r2, #67	; 0x43
 8006b6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b70:	4b02      	ldr	r3, [pc, #8]	; (8006b7c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000050 	.word	0x20000050

08006b80 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b88:	2182      	movs	r1, #130	; 0x82
 8006b8a:	4818      	ldr	r0, [pc, #96]	; (8006bec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b8c:	f000 fd17 	bl	80075be <USBD_GetEpDesc>
 8006b90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b92:	2101      	movs	r1, #1
 8006b94:	4815      	ldr	r0, [pc, #84]	; (8006bec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b96:	f000 fd12 	bl	80075be <USBD_GetEpDesc>
 8006b9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b9c:	2181      	movs	r1, #129	; 0x81
 8006b9e:	4813      	ldr	r0, [pc, #76]	; (8006bec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ba0:	f000 fd0d 	bl	80075be <USBD_GetEpDesc>
 8006ba4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	2210      	movs	r2, #16
 8006bb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d006      	beq.n	8006bc6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	711a      	strb	r2, [r3, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f042 0202 	orr.w	r2, r2, #2
 8006bc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d006      	beq.n	8006bda <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	711a      	strb	r2, [r3, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f042 0202 	orr.w	r2, r2, #2
 8006bd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2243      	movs	r2, #67	; 0x43
 8006bde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006be0:	4b02      	ldr	r3, [pc, #8]	; (8006bec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000050 	.word	0x20000050

08006bf0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bf8:	2182      	movs	r1, #130	; 0x82
 8006bfa:	4818      	ldr	r0, [pc, #96]	; (8006c5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006bfc:	f000 fcdf 	bl	80075be <USBD_GetEpDesc>
 8006c00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c02:	2101      	movs	r1, #1
 8006c04:	4815      	ldr	r0, [pc, #84]	; (8006c5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c06:	f000 fcda 	bl	80075be <USBD_GetEpDesc>
 8006c0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c0c:	2181      	movs	r1, #129	; 0x81
 8006c0e:	4813      	ldr	r0, [pc, #76]	; (8006c5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c10:	f000 fcd5 	bl	80075be <USBD_GetEpDesc>
 8006c14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2210      	movs	r2, #16
 8006c20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d006      	beq.n	8006c36 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c30:	711a      	strb	r2, [r3, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d006      	beq.n	8006c4a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c44:	711a      	strb	r2, [r3, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2243      	movs	r2, #67	; 0x43
 8006c4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c50:	4b02      	ldr	r3, [pc, #8]	; (8006c5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000050 	.word	0x20000050

08006c60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	220a      	movs	r2, #10
 8006c6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c6e:	4b03      	ldr	r3, [pc, #12]	; (8006c7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	2000000c 	.word	0x2000000c

08006c80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e009      	b.n	8006ca8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	33b0      	adds	r3, #176	; 0xb0
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	32b0      	adds	r2, #176	; 0xb0
 8006cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cce:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e008      	b.n	8006cec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	371c      	adds	r7, #28
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	32b0      	adds	r2, #176	; 0xb0
 8006d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e004      	b.n	8006d26 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
	...

08006d34 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	32b0      	adds	r2, #176	; 0xb0
 8006d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	32b0      	adds	r2, #176	; 0xb0
 8006d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e025      	b.n	8006db2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d11f      	bne.n	8006db0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006d78:	4b10      	ldr	r3, [pc, #64]	; (8006dbc <USBD_CDC_TransmitPacket+0x88>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	f003 020f 	and.w	r2, r3, #15
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4403      	add	r3, r0
 8006d92:	3318      	adds	r3, #24
 8006d94:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006d96:	4b09      	ldr	r3, [pc, #36]	; (8006dbc <USBD_CDC_TransmitPacket+0x88>)
 8006d98:	7819      	ldrb	r1, [r3, #0]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 ffc1 	bl	8008d2e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000093 	.word	0x20000093

08006dc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	32b0      	adds	r2, #176	; 0xb0
 8006dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	32b0      	adds	r2, #176	; 0xb0
 8006de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e018      	b.n	8006e20 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	7c1b      	ldrb	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10a      	bne.n	8006e0c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006df6:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <USBD_CDC_ReceivePacket+0x68>)
 8006df8:	7819      	ldrb	r1, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 ffb3 	bl	8008d70 <USBD_LL_PrepareReceive>
 8006e0a:	e008      	b.n	8006e1e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e0c:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <USBD_CDC_ReceivePacket+0x68>)
 8006e0e:	7819      	ldrb	r1, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e16:	2340      	movs	r3, #64	; 0x40
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 ffa9 	bl	8008d70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	20000094 	.word	0x20000094

08006e2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	4613      	mov	r3, r2
 8006e38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e01f      	b.n	8006e84 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	79fa      	ldrb	r2, [r7, #7]
 8006e76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f001 fe23 	bl	8008ac4 <USBD_LL_Init>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e025      	b.n	8006ef0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	32ae      	adds	r2, #174	; 0xae
 8006eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00f      	beq.n	8006ee0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	32ae      	adds	r2, #174	; 0xae
 8006eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	f107 020e 	add.w	r2, r7, #14
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4798      	blx	r3
 8006ed8:	4602      	mov	r2, r0
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 fe2b 	bl	8008b5c <USBD_LL_Start>
 8006f06:	4603      	mov	r3, r0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f18:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d009      	beq.n	8006f54 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	78fa      	ldrb	r2, [r7, #3]
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	4798      	blx	r3
 8006f50:	4603      	mov	r3, r0
 8006f52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	460b      	mov	r3, r1
 8006f68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	78fa      	ldrb	r2, [r7, #3]
 8006f78:	4611      	mov	r1, r2
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	4798      	blx	r3
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006f84:	2303      	movs	r3, #3
 8006f86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
 8006f9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f001 f908 	bl	80081ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006fb8:	461a      	mov	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fc6:	f003 031f 	and.w	r3, r3, #31
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d01a      	beq.n	8007004 <USBD_LL_SetupStage+0x72>
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d822      	bhi.n	8007018 <USBD_LL_SetupStage+0x86>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <USBD_LL_SetupStage+0x4a>
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d00a      	beq.n	8006ff0 <USBD_LL_SetupStage+0x5e>
 8006fda:	e01d      	b.n	8007018 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fb5f 	bl	80076a8 <USBD_StdDevReq>
 8006fea:	4603      	mov	r3, r0
 8006fec:	73fb      	strb	r3, [r7, #15]
      break;
 8006fee:	e020      	b.n	8007032 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fbc7 	bl	800778c <USBD_StdItfReq>
 8006ffe:	4603      	mov	r3, r0
 8007000:	73fb      	strb	r3, [r7, #15]
      break;
 8007002:	e016      	b.n	8007032 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fc29 	bl	8007864 <USBD_StdEPReq>
 8007012:	4603      	mov	r3, r0
 8007014:	73fb      	strb	r3, [r7, #15]
      break;
 8007016:	e00c      	b.n	8007032 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800701e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007022:	b2db      	uxtb	r3, r3
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 fdf8 	bl	8008c1c <USBD_LL_StallEP>
 800702c:	4603      	mov	r3, r0
 800702e:	73fb      	strb	r3, [r7, #15]
      break;
 8007030:	bf00      	nop
  }

  return ret;
 8007032:	7bfb      	ldrb	r3, [r7, #15]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	460b      	mov	r3, r1
 8007046:	607a      	str	r2, [r7, #4]
 8007048:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800704e:	7afb      	ldrb	r3, [r7, #11]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d16e      	bne.n	8007132 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800705a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007062:	2b03      	cmp	r3, #3
 8007064:	f040 8098 	bne.w	8007198 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	429a      	cmp	r2, r3
 8007072:	d913      	bls.n	800709c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	1ad2      	subs	r2, r2, r3
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	4293      	cmp	r3, r2
 800708c:	bf28      	it	cs
 800708e:	4613      	movcs	r3, r2
 8007090:	461a      	mov	r2, r3
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f001 f984 	bl	80083a2 <USBD_CtlContinueRx>
 800709a:	e07d      	b.n	8007198 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070a2:	f003 031f 	and.w	r3, r3, #31
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d014      	beq.n	80070d4 <USBD_LL_DataOutStage+0x98>
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d81d      	bhi.n	80070ea <USBD_LL_DataOutStage+0xae>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <USBD_LL_DataOutStage+0x7c>
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d003      	beq.n	80070be <USBD_LL_DataOutStage+0x82>
 80070b6:	e018      	b.n	80070ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	75bb      	strb	r3, [r7, #22]
            break;
 80070bc:	e018      	b.n	80070f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	4619      	mov	r1, r3
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fa5e 	bl	800758a <USBD_CoreFindIF>
 80070ce:	4603      	mov	r3, r0
 80070d0:	75bb      	strb	r3, [r7, #22]
            break;
 80070d2:	e00d      	b.n	80070f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	4619      	mov	r1, r3
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 fa60 	bl	80075a4 <USBD_CoreFindEP>
 80070e4:	4603      	mov	r3, r0
 80070e6:	75bb      	strb	r3, [r7, #22]
            break;
 80070e8:	e002      	b.n	80070f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	75bb      	strb	r3, [r7, #22]
            break;
 80070ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80070f0:	7dbb      	ldrb	r3, [r7, #22]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d119      	bne.n	800712a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d113      	bne.n	800712a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007102:	7dba      	ldrb	r2, [r7, #22]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	32ae      	adds	r2, #174	; 0xae
 8007108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007112:	7dba      	ldrb	r2, [r7, #22]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800711a:	7dba      	ldrb	r2, [r7, #22]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	32ae      	adds	r2, #174	; 0xae
 8007120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f001 f94a 	bl	80083c4 <USBD_CtlSendStatus>
 8007130:	e032      	b.n	8007198 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007132:	7afb      	ldrb	r3, [r7, #11]
 8007134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007138:	b2db      	uxtb	r3, r3
 800713a:	4619      	mov	r1, r3
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 fa31 	bl	80075a4 <USBD_CoreFindEP>
 8007142:	4603      	mov	r3, r0
 8007144:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007146:	7dbb      	ldrb	r3, [r7, #22]
 8007148:	2bff      	cmp	r3, #255	; 0xff
 800714a:	d025      	beq.n	8007198 <USBD_LL_DataOutStage+0x15c>
 800714c:	7dbb      	ldrb	r3, [r7, #22]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d122      	bne.n	8007198 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b03      	cmp	r3, #3
 800715c:	d117      	bne.n	800718e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800715e:	7dba      	ldrb	r2, [r7, #22]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	32ae      	adds	r2, #174	; 0xae
 8007164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00f      	beq.n	800718e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800716e:	7dba      	ldrb	r2, [r7, #22]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007176:	7dba      	ldrb	r2, [r7, #22]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	32ae      	adds	r2, #174	; 0xae
 800717c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	7afa      	ldrb	r2, [r7, #11]
 8007184:	4611      	mov	r1, r2
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	4798      	blx	r3
 800718a:	4603      	mov	r3, r0
 800718c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007194:	7dfb      	ldrb	r3, [r7, #23]
 8007196:	e000      	b.n	800719a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b086      	sub	sp, #24
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	460b      	mov	r3, r1
 80071ac:	607a      	str	r2, [r7, #4]
 80071ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80071b0:	7afb      	ldrb	r3, [r7, #11]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d16f      	bne.n	8007296 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3314      	adds	r3, #20
 80071ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d15a      	bne.n	800727c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d914      	bls.n	80071fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	689a      	ldr	r2, [r3, #8]
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	1ad2      	subs	r2, r2, r3
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	461a      	mov	r2, r3
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f001 f8ac 	bl	8008346 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071ee:	2300      	movs	r3, #0
 80071f0:	2200      	movs	r2, #0
 80071f2:	2100      	movs	r1, #0
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f001 fdbb 	bl	8008d70 <USBD_LL_PrepareReceive>
 80071fa:	e03f      	b.n	800727c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	429a      	cmp	r2, r3
 8007206:	d11c      	bne.n	8007242 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007210:	429a      	cmp	r2, r3
 8007212:	d316      	bcc.n	8007242 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800721e:	429a      	cmp	r2, r3
 8007220:	d20f      	bcs.n	8007242 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007222:	2200      	movs	r2, #0
 8007224:	2100      	movs	r1, #0
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f001 f88d 	bl	8008346 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007234:	2300      	movs	r3, #0
 8007236:	2200      	movs	r2, #0
 8007238:	2100      	movs	r1, #0
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f001 fd98 	bl	8008d70 <USBD_LL_PrepareReceive>
 8007240:	e01c      	b.n	800727c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b03      	cmp	r3, #3
 800724c:	d10f      	bne.n	800726e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d009      	beq.n	800726e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800726e:	2180      	movs	r1, #128	; 0x80
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f001 fcd3 	bl	8008c1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f001 f8b7 	bl	80083ea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d03a      	beq.n	80072fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f7ff fe42 	bl	8006f10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007294:	e032      	b.n	80072fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007296:	7afb      	ldrb	r3, [r7, #11]
 8007298:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800729c:	b2db      	uxtb	r3, r3
 800729e:	4619      	mov	r1, r3
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f97f 	bl	80075a4 <USBD_CoreFindEP>
 80072a6:	4603      	mov	r3, r0
 80072a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072aa:	7dfb      	ldrb	r3, [r7, #23]
 80072ac:	2bff      	cmp	r3, #255	; 0xff
 80072ae:	d025      	beq.n	80072fc <USBD_LL_DataInStage+0x15a>
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d122      	bne.n	80072fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d11c      	bne.n	80072fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80072c2:	7dfa      	ldrb	r2, [r7, #23]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	32ae      	adds	r2, #174	; 0xae
 80072c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d014      	beq.n	80072fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80072d2:	7dfa      	ldrb	r2, [r7, #23]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80072da:	7dfa      	ldrb	r2, [r7, #23]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	32ae      	adds	r2, #174	; 0xae
 80072e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	7afa      	ldrb	r2, [r7, #11]
 80072e8:	4611      	mov	r1, r2
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	4798      	blx	r3
 80072ee:	4603      	mov	r3, r0
 80072f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80072f2:	7dbb      	ldrb	r3, [r7, #22]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80072f8:	7dbb      	ldrb	r3, [r7, #22]
 80072fa:	e000      	b.n	80072fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800733e:	2b00      	cmp	r3, #0
 8007340:	d014      	beq.n	800736c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00e      	beq.n	800736c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	6852      	ldr	r2, [r2, #4]
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	4611      	mov	r1, r2
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	4798      	blx	r3
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007368:	2303      	movs	r3, #3
 800736a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800736c:	2340      	movs	r3, #64	; 0x40
 800736e:	2200      	movs	r2, #0
 8007370:	2100      	movs	r1, #0
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f001 fc0d 	bl	8008b92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2240      	movs	r2, #64	; 0x40
 8007384:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007388:	2340      	movs	r3, #64	; 0x40
 800738a:	2200      	movs	r2, #0
 800738c:	2180      	movs	r1, #128	; 0x80
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 fbff 	bl	8008b92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2240      	movs	r2, #64	; 0x40
 800739e:	621a      	str	r2, [r3, #32]

  return ret;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	460b      	mov	r3, r1
 80073b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	78fa      	ldrb	r2, [r7, #3]
 80073ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2204      	movs	r2, #4
 80073e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b083      	sub	sp, #12
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b04      	cmp	r3, #4
 8007408:	d106      	bne.n	8007418 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007410:	b2da      	uxtb	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b082      	sub	sp, #8
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b03      	cmp	r3, #3
 8007438:	d110      	bne.n	800745c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00b      	beq.n	800745c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007456:	69db      	ldr	r3, [r3, #28]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	32ae      	adds	r2, #174	; 0xae
 800747c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007484:	2303      	movs	r3, #3
 8007486:	e01c      	b.n	80074c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b03      	cmp	r3, #3
 8007492:	d115      	bne.n	80074c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	32ae      	adds	r2, #174	; 0xae
 800749e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00b      	beq.n	80074c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	32ae      	adds	r2, #174	; 0xae
 80074b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	78fa      	ldrb	r2, [r7, #3]
 80074ba:	4611      	mov	r1, r2
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	460b      	mov	r3, r1
 80074d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	32ae      	adds	r2, #174	; 0xae
 80074e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e01c      	b.n	8007526 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d115      	bne.n	8007524 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	32ae      	adds	r2, #174	; 0xae
 8007502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00b      	beq.n	8007524 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	32ae      	adds	r2, #174	; 0xae
 8007516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	78fa      	ldrb	r2, [r7, #3]
 800751e:	4611      	mov	r1, r2
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00e      	beq.n	8007580 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	6852      	ldr	r2, [r2, #4]
 800756e:	b2d2      	uxtb	r2, r2
 8007570:	4611      	mov	r1, r2
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	4798      	blx	r3
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800757c:	2303      	movs	r3, #3
 800757e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007580:	7bfb      	ldrb	r3, [r7, #15]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007596:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b086      	sub	sp, #24
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	460b      	mov	r3, r1
 80075c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	885b      	ldrh	r3, [r3, #2]
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d920      	bls.n	8007628 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80075ee:	e013      	b.n	8007618 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80075f0:	f107 030a 	add.w	r3, r7, #10
 80075f4:	4619      	mov	r1, r3
 80075f6:	6978      	ldr	r0, [r7, #20]
 80075f8:	f000 f81b 	bl	8007632 <USBD_GetNextDesc>
 80075fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	785b      	ldrb	r3, [r3, #1]
 8007602:	2b05      	cmp	r3, #5
 8007604:	d108      	bne.n	8007618 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	789b      	ldrb	r3, [r3, #2]
 800760e:	78fa      	ldrb	r2, [r7, #3]
 8007610:	429a      	cmp	r2, r3
 8007612:	d008      	beq.n	8007626 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007614:	2300      	movs	r3, #0
 8007616:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	885b      	ldrh	r3, [r3, #2]
 800761c:	b29a      	uxth	r2, r3
 800761e:	897b      	ldrh	r3, [r7, #10]
 8007620:	429a      	cmp	r2, r3
 8007622:	d8e5      	bhi.n	80075f0 <USBD_GetEpDesc+0x32>
 8007624:	e000      	b.n	8007628 <USBD_GetEpDesc+0x6a>
          break;
 8007626:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007628:	693b      	ldr	r3, [r7, #16]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007632:	b480      	push	{r7}
 8007634:	b085      	sub	sp, #20
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	881a      	ldrh	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	b29b      	uxth	r3, r3
 800764a:	4413      	add	r3, r2
 800764c:	b29a      	uxth	r2, r3
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4413      	add	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800765e:	68fb      	ldr	r3, [r7, #12]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	3301      	adds	r3, #1
 8007682:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800768a:	8a3b      	ldrh	r3, [r7, #16]
 800768c:	021b      	lsls	r3, r3, #8
 800768e:	b21a      	sxth	r2, r3
 8007690:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007694:	4313      	orrs	r3, r2
 8007696:	b21b      	sxth	r3, r3
 8007698:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800769a:	89fb      	ldrh	r3, [r7, #14]
}
 800769c:	4618      	mov	r0, r3
 800769e:	371c      	adds	r7, #28
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076be:	2b40      	cmp	r3, #64	; 0x40
 80076c0:	d005      	beq.n	80076ce <USBD_StdDevReq+0x26>
 80076c2:	2b40      	cmp	r3, #64	; 0x40
 80076c4:	d857      	bhi.n	8007776 <USBD_StdDevReq+0xce>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00f      	beq.n	80076ea <USBD_StdDevReq+0x42>
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	d153      	bne.n	8007776 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	32ae      	adds	r2, #174	; 0xae
 80076d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	4798      	blx	r3
 80076e4:	4603      	mov	r3, r0
 80076e6:	73fb      	strb	r3, [r7, #15]
      break;
 80076e8:	e04a      	b.n	8007780 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	785b      	ldrb	r3, [r3, #1]
 80076ee:	2b09      	cmp	r3, #9
 80076f0:	d83b      	bhi.n	800776a <USBD_StdDevReq+0xc2>
 80076f2:	a201      	add	r2, pc, #4	; (adr r2, 80076f8 <USBD_StdDevReq+0x50>)
 80076f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f8:	0800774d 	.word	0x0800774d
 80076fc:	08007761 	.word	0x08007761
 8007700:	0800776b 	.word	0x0800776b
 8007704:	08007757 	.word	0x08007757
 8007708:	0800776b 	.word	0x0800776b
 800770c:	0800772b 	.word	0x0800772b
 8007710:	08007721 	.word	0x08007721
 8007714:	0800776b 	.word	0x0800776b
 8007718:	08007743 	.word	0x08007743
 800771c:	08007735 	.word	0x08007735
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa3c 	bl	8007ba0 <USBD_GetDescriptor>
          break;
 8007728:	e024      	b.n	8007774 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fba1 	bl	8007e74 <USBD_SetAddress>
          break;
 8007732:	e01f      	b.n	8007774 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fbe0 	bl	8007efc <USBD_SetConfig>
 800773c:	4603      	mov	r3, r0
 800773e:	73fb      	strb	r3, [r7, #15]
          break;
 8007740:	e018      	b.n	8007774 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fc83 	bl	8008050 <USBD_GetConfig>
          break;
 800774a:	e013      	b.n	8007774 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fcb4 	bl	80080bc <USBD_GetStatus>
          break;
 8007754:	e00e      	b.n	8007774 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fce3 	bl	8008124 <USBD_SetFeature>
          break;
 800775e:	e009      	b.n	8007774 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fd07 	bl	8008176 <USBD_ClrFeature>
          break;
 8007768:	e004      	b.n	8007774 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fd5e 	bl	800822e <USBD_CtlError>
          break;
 8007772:	bf00      	nop
      }
      break;
 8007774:	e004      	b.n	8007780 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fd58 	bl	800822e <USBD_CtlError>
      break;
 800777e:	bf00      	nop
  }

  return ret;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop

0800778c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077a2:	2b40      	cmp	r3, #64	; 0x40
 80077a4:	d005      	beq.n	80077b2 <USBD_StdItfReq+0x26>
 80077a6:	2b40      	cmp	r3, #64	; 0x40
 80077a8:	d852      	bhi.n	8007850 <USBD_StdItfReq+0xc4>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <USBD_StdItfReq+0x26>
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	d14e      	bne.n	8007850 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	3b01      	subs	r3, #1
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d840      	bhi.n	8007842 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	889b      	ldrh	r3, [r3, #4]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d836      	bhi.n	8007838 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	889b      	ldrh	r3, [r3, #4]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7ff fed9 	bl	800758a <USBD_CoreFindIF>
 80077d8:	4603      	mov	r3, r0
 80077da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	2bff      	cmp	r3, #255	; 0xff
 80077e0:	d01d      	beq.n	800781e <USBD_StdItfReq+0x92>
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d11a      	bne.n	800781e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80077e8:	7bba      	ldrb	r2, [r7, #14]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	32ae      	adds	r2, #174	; 0xae
 80077ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00f      	beq.n	8007818 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80077f8:	7bba      	ldrb	r2, [r7, #14]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007800:	7bba      	ldrb	r2, [r7, #14]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	32ae      	adds	r2, #174	; 0xae
 8007806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	4798      	blx	r3
 8007812:	4603      	mov	r3, r0
 8007814:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007816:	e004      	b.n	8007822 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007818:	2303      	movs	r3, #3
 800781a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800781c:	e001      	b.n	8007822 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800781e:	2303      	movs	r3, #3
 8007820:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	88db      	ldrh	r3, [r3, #6]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d110      	bne.n	800784c <USBD_StdItfReq+0xc0>
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10d      	bne.n	800784c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fdc7 	bl	80083c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007836:	e009      	b.n	800784c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fcf7 	bl	800822e <USBD_CtlError>
          break;
 8007840:	e004      	b.n	800784c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fcf2 	bl	800822e <USBD_CtlError>
          break;
 800784a:	e000      	b.n	800784e <USBD_StdItfReq+0xc2>
          break;
 800784c:	bf00      	nop
      }
      break;
 800784e:	e004      	b.n	800785a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fceb 	bl	800822e <USBD_CtlError>
      break;
 8007858:	bf00      	nop
  }

  return ret;
 800785a:	7bfb      	ldrb	r3, [r7, #15]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	889b      	ldrh	r3, [r3, #4]
 8007876:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007880:	2b40      	cmp	r3, #64	; 0x40
 8007882:	d007      	beq.n	8007894 <USBD_StdEPReq+0x30>
 8007884:	2b40      	cmp	r3, #64	; 0x40
 8007886:	f200 817f 	bhi.w	8007b88 <USBD_StdEPReq+0x324>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d02a      	beq.n	80078e4 <USBD_StdEPReq+0x80>
 800788e:	2b20      	cmp	r3, #32
 8007890:	f040 817a 	bne.w	8007b88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7ff fe83 	bl	80075a4 <USBD_CoreFindEP>
 800789e:	4603      	mov	r3, r0
 80078a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078a2:	7b7b      	ldrb	r3, [r7, #13]
 80078a4:	2bff      	cmp	r3, #255	; 0xff
 80078a6:	f000 8174 	beq.w	8007b92 <USBD_StdEPReq+0x32e>
 80078aa:	7b7b      	ldrb	r3, [r7, #13]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f040 8170 	bne.w	8007b92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80078b2:	7b7a      	ldrb	r2, [r7, #13]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80078ba:	7b7a      	ldrb	r2, [r7, #13]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	32ae      	adds	r2, #174	; 0xae
 80078c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 8163 	beq.w	8007b92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80078cc:	7b7a      	ldrb	r2, [r7, #13]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	32ae      	adds	r2, #174	; 0xae
 80078d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	4798      	blx	r3
 80078de:	4603      	mov	r3, r0
 80078e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078e2:	e156      	b.n	8007b92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	785b      	ldrb	r3, [r3, #1]
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d008      	beq.n	80078fe <USBD_StdEPReq+0x9a>
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	f300 8145 	bgt.w	8007b7c <USBD_StdEPReq+0x318>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 809b 	beq.w	8007a2e <USBD_StdEPReq+0x1ca>
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d03c      	beq.n	8007976 <USBD_StdEPReq+0x112>
 80078fc:	e13e      	b.n	8007b7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d002      	beq.n	8007910 <USBD_StdEPReq+0xac>
 800790a:	2b03      	cmp	r3, #3
 800790c:	d016      	beq.n	800793c <USBD_StdEPReq+0xd8>
 800790e:	e02c      	b.n	800796a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00d      	beq.n	8007932 <USBD_StdEPReq+0xce>
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	2b80      	cmp	r3, #128	; 0x80
 800791a:	d00a      	beq.n	8007932 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f001 f97b 	bl	8008c1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007926:	2180      	movs	r1, #128	; 0x80
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 f977 	bl	8008c1c <USBD_LL_StallEP>
 800792e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007930:	e020      	b.n	8007974 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fc7a 	bl	800822e <USBD_CtlError>
              break;
 800793a:	e01b      	b.n	8007974 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	885b      	ldrh	r3, [r3, #2]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10e      	bne.n	8007962 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00b      	beq.n	8007962 <USBD_StdEPReq+0xfe>
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	2b80      	cmp	r3, #128	; 0x80
 800794e:	d008      	beq.n	8007962 <USBD_StdEPReq+0xfe>
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	88db      	ldrh	r3, [r3, #6]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d104      	bne.n	8007962 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f001 f95d 	bl	8008c1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fd2e 	bl	80083c4 <USBD_CtlSendStatus>

              break;
 8007968:	e004      	b.n	8007974 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fc5e 	bl	800822e <USBD_CtlError>
              break;
 8007972:	bf00      	nop
          }
          break;
 8007974:	e107      	b.n	8007b86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b02      	cmp	r3, #2
 8007980:	d002      	beq.n	8007988 <USBD_StdEPReq+0x124>
 8007982:	2b03      	cmp	r3, #3
 8007984:	d016      	beq.n	80079b4 <USBD_StdEPReq+0x150>
 8007986:	e04b      	b.n	8007a20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00d      	beq.n	80079aa <USBD_StdEPReq+0x146>
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	2b80      	cmp	r3, #128	; 0x80
 8007992:	d00a      	beq.n	80079aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 f93f 	bl	8008c1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800799e:	2180      	movs	r1, #128	; 0x80
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 f93b 	bl	8008c1c <USBD_LL_StallEP>
 80079a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079a8:	e040      	b.n	8007a2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fc3e 	bl	800822e <USBD_CtlError>
              break;
 80079b2:	e03b      	b.n	8007a2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	885b      	ldrh	r3, [r3, #2]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d136      	bne.n	8007a2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f001 f945 	bl	8008c5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fcf7 	bl	80083c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7ff fde2 	bl	80075a4 <USBD_CoreFindEP>
 80079e0:	4603      	mov	r3, r0
 80079e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079e4:	7b7b      	ldrb	r3, [r7, #13]
 80079e6:	2bff      	cmp	r3, #255	; 0xff
 80079e8:	d01f      	beq.n	8007a2a <USBD_StdEPReq+0x1c6>
 80079ea:	7b7b      	ldrb	r3, [r7, #13]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d11c      	bne.n	8007a2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80079f0:	7b7a      	ldrb	r2, [r7, #13]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80079f8:	7b7a      	ldrb	r2, [r7, #13]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	32ae      	adds	r2, #174	; 0xae
 80079fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d010      	beq.n	8007a2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a08:	7b7a      	ldrb	r2, [r7, #13]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	32ae      	adds	r2, #174	; 0xae
 8007a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	4798      	blx	r3
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007a1e:	e004      	b.n	8007a2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fc03 	bl	800822e <USBD_CtlError>
              break;
 8007a28:	e000      	b.n	8007a2c <USBD_StdEPReq+0x1c8>
              break;
 8007a2a:	bf00      	nop
          }
          break;
 8007a2c:	e0ab      	b.n	8007b86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d002      	beq.n	8007a40 <USBD_StdEPReq+0x1dc>
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d032      	beq.n	8007aa4 <USBD_StdEPReq+0x240>
 8007a3e:	e097      	b.n	8007b70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d007      	beq.n	8007a56 <USBD_StdEPReq+0x1f2>
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	2b80      	cmp	r3, #128	; 0x80
 8007a4a:	d004      	beq.n	8007a56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fbed 	bl	800822e <USBD_CtlError>
                break;
 8007a54:	e091      	b.n	8007b7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	da0b      	bge.n	8007a76 <USBD_StdEPReq+0x212>
 8007a5e:	7bbb      	ldrb	r3, [r7, #14]
 8007a60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a64:	4613      	mov	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	3310      	adds	r3, #16
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	4413      	add	r3, r2
 8007a72:	3304      	adds	r3, #4
 8007a74:	e00b      	b.n	8007a8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fc37 	bl	8008310 <USBD_CtlSendData>
              break;
 8007aa2:	e06a      	b.n	8007b7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007aa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	da11      	bge.n	8007ad0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	f003 020f 	and.w	r2, r3, #15
 8007ab2:	6879      	ldr	r1, [r7, #4]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	440b      	add	r3, r1
 8007abe:	3324      	adds	r3, #36	; 0x24
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d117      	bne.n	8007af6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fbb0 	bl	800822e <USBD_CtlError>
                  break;
 8007ace:	e054      	b.n	8007b7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	f003 020f 	and.w	r2, r3, #15
 8007ad6:	6879      	ldr	r1, [r7, #4]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	440b      	add	r3, r1
 8007ae2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d104      	bne.n	8007af6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fb9d 	bl	800822e <USBD_CtlError>
                  break;
 8007af4:	e041      	b.n	8007b7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007af6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	da0b      	bge.n	8007b16 <USBD_StdEPReq+0x2b2>
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b04:	4613      	mov	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	4413      	add	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	3310      	adds	r3, #16
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	4413      	add	r3, r2
 8007b12:	3304      	adds	r3, #4
 8007b14:	e00b      	b.n	8007b2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d002      	beq.n	8007b3c <USBD_StdEPReq+0x2d8>
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	2b80      	cmp	r3, #128	; 0x80
 8007b3a:	d103      	bne.n	8007b44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	e00e      	b.n	8007b62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f001 f8a5 	bl	8008c98 <USBD_LL_IsStallEP>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d003      	beq.n	8007b5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2201      	movs	r2, #1
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	e002      	b.n	8007b62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2202      	movs	r2, #2
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fbd1 	bl	8008310 <USBD_CtlSendData>
              break;
 8007b6e:	e004      	b.n	8007b7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fb5b 	bl	800822e <USBD_CtlError>
              break;
 8007b78:	bf00      	nop
          }
          break;
 8007b7a:	e004      	b.n	8007b86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fb55 	bl	800822e <USBD_CtlError>
          break;
 8007b84:	bf00      	nop
      }
      break;
 8007b86:	e005      	b.n	8007b94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fb4f 	bl	800822e <USBD_CtlError>
      break;
 8007b90:	e000      	b.n	8007b94 <USBD_StdEPReq+0x330>
      break;
 8007b92:	bf00      	nop
  }

  return ret;
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
	...

08007ba0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	885b      	ldrh	r3, [r3, #2]
 8007bba:	0a1b      	lsrs	r3, r3, #8
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	2b06      	cmp	r3, #6
 8007bc2:	f200 8128 	bhi.w	8007e16 <USBD_GetDescriptor+0x276>
 8007bc6:	a201      	add	r2, pc, #4	; (adr r2, 8007bcc <USBD_GetDescriptor+0x2c>)
 8007bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bcc:	08007be9 	.word	0x08007be9
 8007bd0:	08007c01 	.word	0x08007c01
 8007bd4:	08007c41 	.word	0x08007c41
 8007bd8:	08007e17 	.word	0x08007e17
 8007bdc:	08007e17 	.word	0x08007e17
 8007be0:	08007db7 	.word	0x08007db7
 8007be4:	08007de3 	.word	0x08007de3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	7c12      	ldrb	r2, [r2, #16]
 8007bf4:	f107 0108 	add.w	r1, r7, #8
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4798      	blx	r3
 8007bfc:	60f8      	str	r0, [r7, #12]
      break;
 8007bfe:	e112      	b.n	8007e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	7c1b      	ldrb	r3, [r3, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10d      	bne.n	8007c24 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c10:	f107 0208 	add.w	r2, r7, #8
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3
 8007c18:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	2202      	movs	r2, #2
 8007c20:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c22:	e100      	b.n	8007e26 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2c:	f107 0208 	add.w	r2, r7, #8
 8007c30:	4610      	mov	r0, r2
 8007c32:	4798      	blx	r3
 8007c34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	701a      	strb	r2, [r3, #0]
      break;
 8007c3e:	e0f2      	b.n	8007e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	885b      	ldrh	r3, [r3, #2]
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b05      	cmp	r3, #5
 8007c48:	f200 80ac 	bhi.w	8007da4 <USBD_GetDescriptor+0x204>
 8007c4c:	a201      	add	r2, pc, #4	; (adr r2, 8007c54 <USBD_GetDescriptor+0xb4>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007c6d 	.word	0x08007c6d
 8007c58:	08007ca1 	.word	0x08007ca1
 8007c5c:	08007cd5 	.word	0x08007cd5
 8007c60:	08007d09 	.word	0x08007d09
 8007c64:	08007d3d 	.word	0x08007d3d
 8007c68:	08007d71 	.word	0x08007d71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00b      	beq.n	8007c90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	7c12      	ldrb	r2, [r2, #16]
 8007c84:	f107 0108 	add.w	r1, r7, #8
 8007c88:	4610      	mov	r0, r2
 8007c8a:	4798      	blx	r3
 8007c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c8e:	e091      	b.n	8007db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 facb 	bl	800822e <USBD_CtlError>
            err++;
 8007c98:	7afb      	ldrb	r3, [r7, #11]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c9e:	e089      	b.n	8007db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00b      	beq.n	8007cc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	7c12      	ldrb	r2, [r2, #16]
 8007cb8:	f107 0108 	add.w	r1, r7, #8
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	4798      	blx	r3
 8007cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cc2:	e077      	b.n	8007db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fab1 	bl	800822e <USBD_CtlError>
            err++;
 8007ccc:	7afb      	ldrb	r3, [r7, #11]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cd2:	e06f      	b.n	8007db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	7c12      	ldrb	r2, [r2, #16]
 8007cec:	f107 0108 	add.w	r1, r7, #8
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4798      	blx	r3
 8007cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cf6:	e05d      	b.n	8007db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fa97 	bl	800822e <USBD_CtlError>
            err++;
 8007d00:	7afb      	ldrb	r3, [r7, #11]
 8007d02:	3301      	adds	r3, #1
 8007d04:	72fb      	strb	r3, [r7, #11]
          break;
 8007d06:	e055      	b.n	8007db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00b      	beq.n	8007d2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	7c12      	ldrb	r2, [r2, #16]
 8007d20:	f107 0108 	add.w	r1, r7, #8
 8007d24:	4610      	mov	r0, r2
 8007d26:	4798      	blx	r3
 8007d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d2a:	e043      	b.n	8007db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fa7d 	bl	800822e <USBD_CtlError>
            err++;
 8007d34:	7afb      	ldrb	r3, [r7, #11]
 8007d36:	3301      	adds	r3, #1
 8007d38:	72fb      	strb	r3, [r7, #11]
          break;
 8007d3a:	e03b      	b.n	8007db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00b      	beq.n	8007d60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	7c12      	ldrb	r2, [r2, #16]
 8007d54:	f107 0108 	add.w	r1, r7, #8
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
 8007d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d5e:	e029      	b.n	8007db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fa63 	bl	800822e <USBD_CtlError>
            err++;
 8007d68:	7afb      	ldrb	r3, [r7, #11]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d6e:	e021      	b.n	8007db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00b      	beq.n	8007d94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	7c12      	ldrb	r2, [r2, #16]
 8007d88:	f107 0108 	add.w	r1, r7, #8
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4798      	blx	r3
 8007d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d92:	e00f      	b.n	8007db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa49 	bl	800822e <USBD_CtlError>
            err++;
 8007d9c:	7afb      	ldrb	r3, [r7, #11]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	72fb      	strb	r3, [r7, #11]
          break;
 8007da2:	e007      	b.n	8007db4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fa41 	bl	800822e <USBD_CtlError>
          err++;
 8007dac:	7afb      	ldrb	r3, [r7, #11]
 8007dae:	3301      	adds	r3, #1
 8007db0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007db2:	bf00      	nop
      }
      break;
 8007db4:	e037      	b.n	8007e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	7c1b      	ldrb	r3, [r3, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d109      	bne.n	8007dd2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc6:	f107 0208 	add.w	r2, r7, #8
 8007dca:	4610      	mov	r0, r2
 8007dcc:	4798      	blx	r3
 8007dce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dd0:	e029      	b.n	8007e26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fa2a 	bl	800822e <USBD_CtlError>
        err++;
 8007dda:	7afb      	ldrb	r3, [r7, #11]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	72fb      	strb	r3, [r7, #11]
      break;
 8007de0:	e021      	b.n	8007e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	7c1b      	ldrb	r3, [r3, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10d      	bne.n	8007e06 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df2:	f107 0208 	add.w	r2, r7, #8
 8007df6:	4610      	mov	r0, r2
 8007df8:	4798      	blx	r3
 8007dfa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	2207      	movs	r2, #7
 8007e02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e04:	e00f      	b.n	8007e26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fa10 	bl	800822e <USBD_CtlError>
        err++;
 8007e0e:	7afb      	ldrb	r3, [r7, #11]
 8007e10:	3301      	adds	r3, #1
 8007e12:	72fb      	strb	r3, [r7, #11]
      break;
 8007e14:	e007      	b.n	8007e26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fa08 	bl	800822e <USBD_CtlError>
      err++;
 8007e1e:	7afb      	ldrb	r3, [r7, #11]
 8007e20:	3301      	adds	r3, #1
 8007e22:	72fb      	strb	r3, [r7, #11]
      break;
 8007e24:	bf00      	nop
  }

  if (err != 0U)
 8007e26:	7afb      	ldrb	r3, [r7, #11]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d11e      	bne.n	8007e6a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	88db      	ldrh	r3, [r3, #6]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d016      	beq.n	8007e62 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007e34:	893b      	ldrh	r3, [r7, #8]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00e      	beq.n	8007e58 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	88da      	ldrh	r2, [r3, #6]
 8007e3e:	893b      	ldrh	r3, [r7, #8]
 8007e40:	4293      	cmp	r3, r2
 8007e42:	bf28      	it	cs
 8007e44:	4613      	movcs	r3, r2
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e4a:	893b      	ldrh	r3, [r7, #8]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	68f9      	ldr	r1, [r7, #12]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fa5d 	bl	8008310 <USBD_CtlSendData>
 8007e56:	e009      	b.n	8007e6c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f9e7 	bl	800822e <USBD_CtlError>
 8007e60:	e004      	b.n	8007e6c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 faae 	bl	80083c4 <USBD_CtlSendStatus>
 8007e68:	e000      	b.n	8007e6c <USBD_GetDescriptor+0x2cc>
    return;
 8007e6a:	bf00      	nop
  }
}
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop

08007e74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	889b      	ldrh	r3, [r3, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d131      	bne.n	8007eea <USBD_SetAddress+0x76>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	88db      	ldrh	r3, [r3, #6]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d12d      	bne.n	8007eea <USBD_SetAddress+0x76>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	885b      	ldrh	r3, [r3, #2]
 8007e92:	2b7f      	cmp	r3, #127	; 0x7f
 8007e94:	d829      	bhi.n	8007eea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	885b      	ldrh	r3, [r3, #2]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ea0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d104      	bne.n	8007eb8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f9bc 	bl	800822e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb6:	e01d      	b.n	8007ef4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	7bfa      	ldrb	r2, [r7, #15]
 8007ebc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 ff13 	bl	8008cf0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fa7a 	bl	80083c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d004      	beq.n	8007ee0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ede:	e009      	b.n	8007ef4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee8:	e004      	b.n	8007ef4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f99e 	bl	800822e <USBD_CtlError>
  }
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	885b      	ldrh	r3, [r3, #2]
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	4b4e      	ldr	r3, [pc, #312]	; (800804c <USBD_SetConfig+0x150>)
 8007f12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f14:	4b4d      	ldr	r3, [pc, #308]	; (800804c <USBD_SetConfig+0x150>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d905      	bls.n	8007f28 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f985 	bl	800822e <USBD_CtlError>
    return USBD_FAIL;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e08c      	b.n	8008042 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d002      	beq.n	8007f3a <USBD_SetConfig+0x3e>
 8007f34:	2b03      	cmp	r3, #3
 8007f36:	d029      	beq.n	8007f8c <USBD_SetConfig+0x90>
 8007f38:	e075      	b.n	8008026 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f3a:	4b44      	ldr	r3, [pc, #272]	; (800804c <USBD_SetConfig+0x150>)
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d020      	beq.n	8007f84 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007f42:	4b42      	ldr	r3, [pc, #264]	; (800804c <USBD_SetConfig+0x150>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	461a      	mov	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f4c:	4b3f      	ldr	r3, [pc, #252]	; (800804c <USBD_SetConfig+0x150>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7fe ffe7 	bl	8006f26 <USBD_SetClassConfig>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d008      	beq.n	8007f74 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f962 	bl	800822e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f72:	e065      	b.n	8008040 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fa25 	bl	80083c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2203      	movs	r2, #3
 8007f7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f82:	e05d      	b.n	8008040 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fa1d 	bl	80083c4 <USBD_CtlSendStatus>
      break;
 8007f8a:	e059      	b.n	8008040 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f8c:	4b2f      	ldr	r3, [pc, #188]	; (800804c <USBD_SetConfig+0x150>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d112      	bne.n	8007fba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2202      	movs	r2, #2
 8007f98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007f9c:	4b2b      	ldr	r3, [pc, #172]	; (800804c <USBD_SetConfig+0x150>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fa6:	4b29      	ldr	r3, [pc, #164]	; (800804c <USBD_SetConfig+0x150>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7fe ffd6 	bl	8006f5e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fa06 	bl	80083c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fb8:	e042      	b.n	8008040 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007fba:	4b24      	ldr	r3, [pc, #144]	; (800804c <USBD_SetConfig+0x150>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d02a      	beq.n	800801e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7fe ffc4 	bl	8006f5e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007fd6:	4b1d      	ldr	r3, [pc, #116]	; (800804c <USBD_SetConfig+0x150>)
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fe0:	4b1a      	ldr	r3, [pc, #104]	; (800804c <USBD_SetConfig+0x150>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7fe ff9d 	bl	8006f26 <USBD_SetClassConfig>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00f      	beq.n	8008016 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f918 	bl	800822e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7fe ffa9 	bl	8006f5e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2202      	movs	r2, #2
 8008010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008014:	e014      	b.n	8008040 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f9d4 	bl	80083c4 <USBD_CtlSendStatus>
      break;
 800801c:	e010      	b.n	8008040 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f9d0 	bl	80083c4 <USBD_CtlSendStatus>
      break;
 8008024:	e00c      	b.n	8008040 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f900 	bl	800822e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800802e:	4b07      	ldr	r3, [pc, #28]	; (800804c <USBD_SetConfig+0x150>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7fe ff92 	bl	8006f5e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800803a:	2303      	movs	r3, #3
 800803c:	73fb      	strb	r3, [r7, #15]
      break;
 800803e:	bf00      	nop
  }

  return ret;
 8008040:	7bfb      	ldrb	r3, [r7, #15]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	2000044c 	.word	0x2000044c

08008050 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	88db      	ldrh	r3, [r3, #6]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d004      	beq.n	800806c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f8e2 	bl	800822e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800806a:	e023      	b.n	80080b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b02      	cmp	r3, #2
 8008076:	dc02      	bgt.n	800807e <USBD_GetConfig+0x2e>
 8008078:	2b00      	cmp	r3, #0
 800807a:	dc03      	bgt.n	8008084 <USBD_GetConfig+0x34>
 800807c:	e015      	b.n	80080aa <USBD_GetConfig+0x5a>
 800807e:	2b03      	cmp	r3, #3
 8008080:	d00b      	beq.n	800809a <USBD_GetConfig+0x4a>
 8008082:	e012      	b.n	80080aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	3308      	adds	r3, #8
 800808e:	2201      	movs	r2, #1
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f93c 	bl	8008310 <USBD_CtlSendData>
        break;
 8008098:	e00c      	b.n	80080b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	3304      	adds	r3, #4
 800809e:	2201      	movs	r2, #1
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f934 	bl	8008310 <USBD_CtlSendData>
        break;
 80080a8:	e004      	b.n	80080b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f8be 	bl	800822e <USBD_CtlError>
        break;
 80080b2:	bf00      	nop
}
 80080b4:	bf00      	nop
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	3b01      	subs	r3, #1
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d81e      	bhi.n	8008112 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	88db      	ldrh	r3, [r3, #6]
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d004      	beq.n	80080e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f8a5 	bl	800822e <USBD_CtlError>
        break;
 80080e4:	e01a      	b.n	800811c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d005      	beq.n	8008102 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	f043 0202 	orr.w	r2, r3, #2
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	330c      	adds	r3, #12
 8008106:	2202      	movs	r2, #2
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f900 	bl	8008310 <USBD_CtlSendData>
      break;
 8008110:	e004      	b.n	800811c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f88a 	bl	800822e <USBD_CtlError>
      break;
 800811a:	bf00      	nop
  }
}
 800811c:	bf00      	nop
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	885b      	ldrh	r3, [r3, #2]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d107      	bne.n	8008146 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f940 	bl	80083c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008144:	e013      	b.n	800816e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	885b      	ldrh	r3, [r3, #2]
 800814a:	2b02      	cmp	r3, #2
 800814c:	d10b      	bne.n	8008166 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	889b      	ldrh	r3, [r3, #4]
 8008152:	0a1b      	lsrs	r3, r3, #8
 8008154:	b29b      	uxth	r3, r3
 8008156:	b2da      	uxtb	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f930 	bl	80083c4 <USBD_CtlSendStatus>
}
 8008164:	e003      	b.n	800816e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f860 	bl	800822e <USBD_CtlError>
}
 800816e:	bf00      	nop
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008186:	b2db      	uxtb	r3, r3
 8008188:	3b01      	subs	r3, #1
 800818a:	2b02      	cmp	r3, #2
 800818c:	d80b      	bhi.n	80081a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	885b      	ldrh	r3, [r3, #2]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d10c      	bne.n	80081b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f910 	bl	80083c4 <USBD_CtlSendStatus>
      }
      break;
 80081a4:	e004      	b.n	80081b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f840 	bl	800822e <USBD_CtlError>
      break;
 80081ae:	e000      	b.n	80081b2 <USBD_ClrFeature+0x3c>
      break;
 80081b0:	bf00      	nop
  }
}
 80081b2:	bf00      	nop
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	781a      	ldrb	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	3301      	adds	r3, #1
 80081d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	781a      	ldrb	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3301      	adds	r3, #1
 80081e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f7ff fa41 	bl	800766c <SWAPBYTE>
 80081ea:	4603      	mov	r3, r0
 80081ec:	461a      	mov	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3301      	adds	r3, #1
 80081f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	3301      	adds	r3, #1
 80081fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f7ff fa34 	bl	800766c <SWAPBYTE>
 8008204:	4603      	mov	r3, r0
 8008206:	461a      	mov	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3301      	adds	r3, #1
 8008210:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3301      	adds	r3, #1
 8008216:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f7ff fa27 	bl	800766c <SWAPBYTE>
 800821e:	4603      	mov	r3, r0
 8008220:	461a      	mov	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	80da      	strh	r2, [r3, #6]
}
 8008226:	bf00      	nop
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b082      	sub	sp, #8
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008238:	2180      	movs	r1, #128	; 0x80
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fcee 	bl	8008c1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008240:	2100      	movs	r1, #0
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fcea 	bl	8008c1c <USBD_LL_StallEP>
}
 8008248:	bf00      	nop
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d036      	beq.n	80082d4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800826a:	6938      	ldr	r0, [r7, #16]
 800826c:	f000 f836 	bl	80082dc <USBD_GetLen>
 8008270:	4603      	mov	r3, r0
 8008272:	3301      	adds	r3, #1
 8008274:	b29b      	uxth	r3, r3
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	b29a      	uxth	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800827e:	7dfb      	ldrb	r3, [r7, #23]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	4413      	add	r3, r2
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	7812      	ldrb	r2, [r2, #0]
 8008288:	701a      	strb	r2, [r3, #0]
  idx++;
 800828a:	7dfb      	ldrb	r3, [r7, #23]
 800828c:	3301      	adds	r3, #1
 800828e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008290:	7dfb      	ldrb	r3, [r7, #23]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	4413      	add	r3, r2
 8008296:	2203      	movs	r2, #3
 8008298:	701a      	strb	r2, [r3, #0]
  idx++;
 800829a:	7dfb      	ldrb	r3, [r7, #23]
 800829c:	3301      	adds	r3, #1
 800829e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082a0:	e013      	b.n	80082ca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	4413      	add	r3, r2
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	7812      	ldrb	r2, [r2, #0]
 80082ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	3301      	adds	r3, #1
 80082b2:	613b      	str	r3, [r7, #16]
    idx++;
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	3301      	adds	r3, #1
 80082b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	4413      	add	r3, r2
 80082c0:	2200      	movs	r2, #0
 80082c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80082c4:	7dfb      	ldrb	r3, [r7, #23]
 80082c6:	3301      	adds	r3, #1
 80082c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e7      	bne.n	80082a2 <USBD_GetString+0x52>
 80082d2:	e000      	b.n	80082d6 <USBD_GetString+0x86>
    return;
 80082d4:	bf00      	nop
  }
}
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80082ec:	e005      	b.n	80082fa <USBD_GetLen+0x1e>
  {
    len++;
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	3301      	adds	r3, #1
 80082f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	3301      	adds	r3, #1
 80082f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1f5      	bne.n	80082ee <USBD_GetLen+0x12>
  }

  return len;
 8008302:	7bfb      	ldrb	r3, [r7, #15]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2202      	movs	r2, #2
 8008320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	2100      	movs	r1, #0
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 fcf9 	bl	8008d2e <USBD_LL_Transmit>

  return USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b084      	sub	sp, #16
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	2100      	movs	r1, #0
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 fce8 	bl	8008d2e <USBD_LL_Transmit>

  return USBD_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2203      	movs	r2, #3
 8008378:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	2100      	movs	r1, #0
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f000 fcec 	bl	8008d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b084      	sub	sp, #16
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	60f8      	str	r0, [r7, #12]
 80083aa:	60b9      	str	r1, [r7, #8]
 80083ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	2100      	movs	r1, #0
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 fcdb 	bl	8008d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2204      	movs	r2, #4
 80083d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083d4:	2300      	movs	r3, #0
 80083d6:	2200      	movs	r2, #0
 80083d8:	2100      	movs	r1, #0
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fca7 	bl	8008d2e <USBD_LL_Transmit>

  return USBD_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b082      	sub	sp, #8
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2205      	movs	r2, #5
 80083f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083fa:	2300      	movs	r3, #0
 80083fc:	2200      	movs	r2, #0
 80083fe:	2100      	movs	r1, #0
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fcb5 	bl	8008d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008414:	2200      	movs	r2, #0
 8008416:	4912      	ldr	r1, [pc, #72]	; (8008460 <MX_USB_DEVICE_Init+0x50>)
 8008418:	4812      	ldr	r0, [pc, #72]	; (8008464 <MX_USB_DEVICE_Init+0x54>)
 800841a:	f7fe fd07 	bl	8006e2c <USBD_Init>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008424:	f7f8 fd58 	bl	8000ed8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008428:	490f      	ldr	r1, [pc, #60]	; (8008468 <MX_USB_DEVICE_Init+0x58>)
 800842a:	480e      	ldr	r0, [pc, #56]	; (8008464 <MX_USB_DEVICE_Init+0x54>)
 800842c:	f7fe fd2e 	bl	8006e8c <USBD_RegisterClass>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008436:	f7f8 fd4f 	bl	8000ed8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800843a:	490c      	ldr	r1, [pc, #48]	; (800846c <MX_USB_DEVICE_Init+0x5c>)
 800843c:	4809      	ldr	r0, [pc, #36]	; (8008464 <MX_USB_DEVICE_Init+0x54>)
 800843e:	f7fe fc1f 	bl	8006c80 <USBD_CDC_RegisterInterface>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008448:	f7f8 fd46 	bl	8000ed8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800844c:	4805      	ldr	r0, [pc, #20]	; (8008464 <MX_USB_DEVICE_Init+0x54>)
 800844e:	f7fe fd53 	bl	8006ef8 <USBD_Start>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008458:	f7f8 fd3e 	bl	8000ed8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800845c:	bf00      	nop
 800845e:	bd80      	pop	{r7, pc}
 8008460:	200000ac 	.word	0x200000ac
 8008464:	20000450 	.word	0x20000450
 8008468:	20000018 	.word	0x20000018
 800846c:	20000098 	.word	0x20000098

08008470 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008474:	2200      	movs	r2, #0
 8008476:	4905      	ldr	r1, [pc, #20]	; (800848c <CDC_Init_FS+0x1c>)
 8008478:	4805      	ldr	r0, [pc, #20]	; (8008490 <CDC_Init_FS+0x20>)
 800847a:	f7fe fc1b 	bl	8006cb4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800847e:	4905      	ldr	r1, [pc, #20]	; (8008494 <CDC_Init_FS+0x24>)
 8008480:	4803      	ldr	r0, [pc, #12]	; (8008490 <CDC_Init_FS+0x20>)
 8008482:	f7fe fc39 	bl	8006cf8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008486:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008488:	4618      	mov	r0, r3
 800848a:	bd80      	pop	{r7, pc}
 800848c:	20000f2c 	.word	0x20000f2c
 8008490:	20000450 	.word	0x20000450
 8008494:	2000072c 	.word	0x2000072c

08008498 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008498:	b480      	push	{r7}
 800849a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800849c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800849e:	4618      	mov	r0, r3
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	4603      	mov	r3, r0
 80084b0:	6039      	str	r1, [r7, #0]
 80084b2:	71fb      	strb	r3, [r7, #7]
 80084b4:	4613      	mov	r3, r2
 80084b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	2b23      	cmp	r3, #35	; 0x23
 80084bc:	d84a      	bhi.n	8008554 <CDC_Control_FS+0xac>
 80084be:	a201      	add	r2, pc, #4	; (adr r2, 80084c4 <CDC_Control_FS+0x1c>)
 80084c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c4:	08008555 	.word	0x08008555
 80084c8:	08008555 	.word	0x08008555
 80084cc:	08008555 	.word	0x08008555
 80084d0:	08008555 	.word	0x08008555
 80084d4:	08008555 	.word	0x08008555
 80084d8:	08008555 	.word	0x08008555
 80084dc:	08008555 	.word	0x08008555
 80084e0:	08008555 	.word	0x08008555
 80084e4:	08008555 	.word	0x08008555
 80084e8:	08008555 	.word	0x08008555
 80084ec:	08008555 	.word	0x08008555
 80084f0:	08008555 	.word	0x08008555
 80084f4:	08008555 	.word	0x08008555
 80084f8:	08008555 	.word	0x08008555
 80084fc:	08008555 	.word	0x08008555
 8008500:	08008555 	.word	0x08008555
 8008504:	08008555 	.word	0x08008555
 8008508:	08008555 	.word	0x08008555
 800850c:	08008555 	.word	0x08008555
 8008510:	08008555 	.word	0x08008555
 8008514:	08008555 	.word	0x08008555
 8008518:	08008555 	.word	0x08008555
 800851c:	08008555 	.word	0x08008555
 8008520:	08008555 	.word	0x08008555
 8008524:	08008555 	.word	0x08008555
 8008528:	08008555 	.word	0x08008555
 800852c:	08008555 	.word	0x08008555
 8008530:	08008555 	.word	0x08008555
 8008534:	08008555 	.word	0x08008555
 8008538:	08008555 	.word	0x08008555
 800853c:	08008555 	.word	0x08008555
 8008540:	08008555 	.word	0x08008555
 8008544:	08008555 	.word	0x08008555
 8008548:	08008555 	.word	0x08008555
 800854c:	08008555 	.word	0x08008555
 8008550:	08008555 	.word	0x08008555
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008554:	bf00      	nop
  }

  return (USBD_OK);
 8008556:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800856e:	6879      	ldr	r1, [r7, #4]
 8008570:	4805      	ldr	r0, [pc, #20]	; (8008588 <CDC_Receive_FS+0x24>)
 8008572:	f7fe fbc1 	bl	8006cf8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008576:	4804      	ldr	r0, [pc, #16]	; (8008588 <CDC_Receive_FS+0x24>)
 8008578:	f7fe fc22 	bl	8006dc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800857c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20000450 	.word	0x20000450

0800858c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800859c:	4b0d      	ldr	r3, [pc, #52]	; (80085d4 <CDC_Transmit_FS+0x48>)
 800859e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e00b      	b.n	80085ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085b2:	887b      	ldrh	r3, [r7, #2]
 80085b4:	461a      	mov	r2, r3
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	4806      	ldr	r0, [pc, #24]	; (80085d4 <CDC_Transmit_FS+0x48>)
 80085ba:	f7fe fb7b 	bl	8006cb4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085be:	4805      	ldr	r0, [pc, #20]	; (80085d4 <CDC_Transmit_FS+0x48>)
 80085c0:	f7fe fbb8 	bl	8006d34 <USBD_CDC_TransmitPacket>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	20000450 	.word	0x20000450

080085d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80085d8:	b480      	push	{r7}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	4613      	mov	r3, r2
 80085e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80085ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
	...

080085fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	6039      	str	r1, [r7, #0]
 8008606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	2212      	movs	r2, #18
 800860c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800860e:	4b03      	ldr	r3, [pc, #12]	; (800861c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008610:	4618      	mov	r0, r3
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	200000c8 	.word	0x200000c8

08008620 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	6039      	str	r1, [r7, #0]
 800862a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	2204      	movs	r2, #4
 8008630:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008632:	4b03      	ldr	r3, [pc, #12]	; (8008640 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	200000dc 	.word	0x200000dc

08008644 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	6039      	str	r1, [r7, #0]
 800864e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d105      	bne.n	8008662 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	4907      	ldr	r1, [pc, #28]	; (8008678 <USBD_FS_ProductStrDescriptor+0x34>)
 800865a:	4808      	ldr	r0, [pc, #32]	; (800867c <USBD_FS_ProductStrDescriptor+0x38>)
 800865c:	f7ff fdf8 	bl	8008250 <USBD_GetString>
 8008660:	e004      	b.n	800866c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	4904      	ldr	r1, [pc, #16]	; (8008678 <USBD_FS_ProductStrDescriptor+0x34>)
 8008666:	4805      	ldr	r0, [pc, #20]	; (800867c <USBD_FS_ProductStrDescriptor+0x38>)
 8008668:	f7ff fdf2 	bl	8008250 <USBD_GetString>
  }
  return USBD_StrDesc;
 800866c:	4b02      	ldr	r3, [pc, #8]	; (8008678 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800866e:	4618      	mov	r0, r3
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	2000172c 	.word	0x2000172c
 800867c:	0800a11c 	.word	0x0800a11c

08008680 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	4603      	mov	r3, r0
 8008688:	6039      	str	r1, [r7, #0]
 800868a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	4904      	ldr	r1, [pc, #16]	; (80086a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008690:	4804      	ldr	r0, [pc, #16]	; (80086a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008692:	f7ff fddd 	bl	8008250 <USBD_GetString>
  return USBD_StrDesc;
 8008696:	4b02      	ldr	r3, [pc, #8]	; (80086a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008698:	4618      	mov	r0, r3
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	2000172c 	.word	0x2000172c
 80086a4:	0800a134 	.word	0x0800a134

080086a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	4603      	mov	r3, r0
 80086b0:	6039      	str	r1, [r7, #0]
 80086b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	221a      	movs	r2, #26
 80086b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086ba:	f000 f843 	bl	8008744 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086be:	4b02      	ldr	r3, [pc, #8]	; (80086c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	200000e0 	.word	0x200000e0

080086cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	4603      	mov	r3, r0
 80086d4:	6039      	str	r1, [r7, #0]
 80086d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80086d8:	79fb      	ldrb	r3, [r7, #7]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d105      	bne.n	80086ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	4907      	ldr	r1, [pc, #28]	; (8008700 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086e2:	4808      	ldr	r0, [pc, #32]	; (8008704 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086e4:	f7ff fdb4 	bl	8008250 <USBD_GetString>
 80086e8:	e004      	b.n	80086f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	4904      	ldr	r1, [pc, #16]	; (8008700 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086ee:	4805      	ldr	r0, [pc, #20]	; (8008704 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086f0:	f7ff fdae 	bl	8008250 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086f4:	4b02      	ldr	r3, [pc, #8]	; (8008700 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	2000172c 	.word	0x2000172c
 8008704:	0800a148 	.word	0x0800a148

08008708 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	4603      	mov	r3, r0
 8008710:	6039      	str	r1, [r7, #0]
 8008712:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008714:	79fb      	ldrb	r3, [r7, #7]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d105      	bne.n	8008726 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	4907      	ldr	r1, [pc, #28]	; (800873c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800871e:	4808      	ldr	r0, [pc, #32]	; (8008740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008720:	f7ff fd96 	bl	8008250 <USBD_GetString>
 8008724:	e004      	b.n	8008730 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	4904      	ldr	r1, [pc, #16]	; (800873c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800872a:	4805      	ldr	r0, [pc, #20]	; (8008740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800872c:	f7ff fd90 	bl	8008250 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008730:	4b02      	ldr	r3, [pc, #8]	; (800873c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008732:	4618      	mov	r0, r3
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	2000172c 	.word	0x2000172c
 8008740:	0800a154 	.word	0x0800a154

08008744 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800874a:	4b0f      	ldr	r3, [pc, #60]	; (8008788 <Get_SerialNum+0x44>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008750:	4b0e      	ldr	r3, [pc, #56]	; (800878c <Get_SerialNum+0x48>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008756:	4b0e      	ldr	r3, [pc, #56]	; (8008790 <Get_SerialNum+0x4c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4413      	add	r3, r2
 8008762:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d009      	beq.n	800877e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800876a:	2208      	movs	r2, #8
 800876c:	4909      	ldr	r1, [pc, #36]	; (8008794 <Get_SerialNum+0x50>)
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 f814 	bl	800879c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008774:	2204      	movs	r2, #4
 8008776:	4908      	ldr	r1, [pc, #32]	; (8008798 <Get_SerialNum+0x54>)
 8008778:	68b8      	ldr	r0, [r7, #8]
 800877a:	f000 f80f 	bl	800879c <IntToUnicode>
  }
}
 800877e:	bf00      	nop
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	1fff7a10 	.word	0x1fff7a10
 800878c:	1fff7a14 	.word	0x1fff7a14
 8008790:	1fff7a18 	.word	0x1fff7a18
 8008794:	200000e2 	.word	0x200000e2
 8008798:	200000f2 	.word	0x200000f2

0800879c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	4613      	mov	r3, r2
 80087a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087aa:	2300      	movs	r3, #0
 80087ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087ae:	2300      	movs	r3, #0
 80087b0:	75fb      	strb	r3, [r7, #23]
 80087b2:	e027      	b.n	8008804 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	0f1b      	lsrs	r3, r3, #28
 80087b8:	2b09      	cmp	r3, #9
 80087ba:	d80b      	bhi.n	80087d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	0f1b      	lsrs	r3, r3, #28
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	4619      	mov	r1, r3
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	440b      	add	r3, r1
 80087cc:	3230      	adds	r2, #48	; 0x30
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	701a      	strb	r2, [r3, #0]
 80087d2:	e00a      	b.n	80087ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	0f1b      	lsrs	r3, r3, #28
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	7dfb      	ldrb	r3, [r7, #23]
 80087dc:	005b      	lsls	r3, r3, #1
 80087de:	4619      	mov	r1, r3
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	440b      	add	r3, r1
 80087e4:	3237      	adds	r2, #55	; 0x37
 80087e6:	b2d2      	uxtb	r2, r2
 80087e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	011b      	lsls	r3, r3, #4
 80087ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
 80087f2:	005b      	lsls	r3, r3, #1
 80087f4:	3301      	adds	r3, #1
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	4413      	add	r3, r2
 80087fa:	2200      	movs	r2, #0
 80087fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
 8008800:	3301      	adds	r3, #1
 8008802:	75fb      	strb	r3, [r7, #23]
 8008804:	7dfa      	ldrb	r2, [r7, #23]
 8008806:	79fb      	ldrb	r3, [r7, #7]
 8008808:	429a      	cmp	r2, r3
 800880a:	d3d3      	bcc.n	80087b4 <IntToUnicode+0x18>
  }
}
 800880c:	bf00      	nop
 800880e:	bf00      	nop
 8008810:	371c      	adds	r7, #28
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
	...

0800881c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	; 0x28
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008824:	f107 0314 	add.w	r3, r7, #20
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	605a      	str	r2, [r3, #4]
 800882e:	609a      	str	r2, [r3, #8]
 8008830:	60da      	str	r2, [r3, #12]
 8008832:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800883c:	d147      	bne.n	80088ce <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800883e:	2300      	movs	r3, #0
 8008840:	613b      	str	r3, [r7, #16]
 8008842:	4b25      	ldr	r3, [pc, #148]	; (80088d8 <HAL_PCD_MspInit+0xbc>)
 8008844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008846:	4a24      	ldr	r2, [pc, #144]	; (80088d8 <HAL_PCD_MspInit+0xbc>)
 8008848:	f043 0301 	orr.w	r3, r3, #1
 800884c:	6313      	str	r3, [r2, #48]	; 0x30
 800884e:	4b22      	ldr	r3, [pc, #136]	; (80088d8 <HAL_PCD_MspInit+0xbc>)
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	613b      	str	r3, [r7, #16]
 8008858:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800885a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800885e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008860:	2302      	movs	r3, #2
 8008862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008864:	2300      	movs	r3, #0
 8008866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008868:	2303      	movs	r3, #3
 800886a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800886c:	230a      	movs	r3, #10
 800886e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008870:	f107 0314 	add.w	r3, r7, #20
 8008874:	4619      	mov	r1, r3
 8008876:	4819      	ldr	r0, [pc, #100]	; (80088dc <HAL_PCD_MspInit+0xc0>)
 8008878:	f7f9 fe00 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800887c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008882:	2300      	movs	r3, #0
 8008884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008886:	2300      	movs	r3, #0
 8008888:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800888a:	f107 0314 	add.w	r3, r7, #20
 800888e:	4619      	mov	r1, r3
 8008890:	4812      	ldr	r0, [pc, #72]	; (80088dc <HAL_PCD_MspInit+0xc0>)
 8008892:	f7f9 fdf3 	bl	800247c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008896:	4b10      	ldr	r3, [pc, #64]	; (80088d8 <HAL_PCD_MspInit+0xbc>)
 8008898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800889a:	4a0f      	ldr	r2, [pc, #60]	; (80088d8 <HAL_PCD_MspInit+0xbc>)
 800889c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088a0:	6353      	str	r3, [r2, #52]	; 0x34
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
 80088a6:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <HAL_PCD_MspInit+0xbc>)
 80088a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088aa:	4a0b      	ldr	r2, [pc, #44]	; (80088d8 <HAL_PCD_MspInit+0xbc>)
 80088ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088b0:	6453      	str	r3, [r2, #68]	; 0x44
 80088b2:	4b09      	ldr	r3, [pc, #36]	; (80088d8 <HAL_PCD_MspInit+0xbc>)
 80088b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088be:	2200      	movs	r2, #0
 80088c0:	2100      	movs	r1, #0
 80088c2:	2043      	movs	r0, #67	; 0x43
 80088c4:	f7f9 fa7b 	bl	8001dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088c8:	2043      	movs	r0, #67	; 0x43
 80088ca:	f7f9 fa94 	bl	8001df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088ce:	bf00      	nop
 80088d0:	3728      	adds	r7, #40	; 0x28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	40023800 	.word	0x40023800
 80088dc:	40020000 	.word	0x40020000

080088e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80088f4:	4619      	mov	r1, r3
 80088f6:	4610      	mov	r0, r2
 80088f8:	f7fe fb4b 	bl	8006f92 <USBD_LL_SetupStage>
}
 80088fc:	bf00      	nop
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	460b      	mov	r3, r1
 800890e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008916:	78fa      	ldrb	r2, [r7, #3]
 8008918:	6879      	ldr	r1, [r7, #4]
 800891a:	4613      	mov	r3, r2
 800891c:	00db      	lsls	r3, r3, #3
 800891e:	4413      	add	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	440b      	add	r3, r1
 8008924:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	78fb      	ldrb	r3, [r7, #3]
 800892c:	4619      	mov	r1, r3
 800892e:	f7fe fb85 	bl	800703c <USBD_LL_DataOutStage>
}
 8008932:	bf00      	nop
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	460b      	mov	r3, r1
 8008944:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800894c:	78fa      	ldrb	r2, [r7, #3]
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	4613      	mov	r3, r2
 8008952:	00db      	lsls	r3, r3, #3
 8008954:	4413      	add	r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	440b      	add	r3, r1
 800895a:	334c      	adds	r3, #76	; 0x4c
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	78fb      	ldrb	r3, [r7, #3]
 8008960:	4619      	mov	r1, r3
 8008962:	f7fe fc1e 	bl	80071a2 <USBD_LL_DataInStage>
}
 8008966:	bf00      	nop
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b082      	sub	sp, #8
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800897c:	4618      	mov	r0, r3
 800897e:	f7fe fd52 	bl	8007426 <USBD_LL_SOF>
}
 8008982:	bf00      	nop
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008992:	2301      	movs	r3, #1
 8008994:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d102      	bne.n	80089a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800899e:	2300      	movs	r3, #0
 80089a0:	73fb      	strb	r3, [r7, #15]
 80089a2:	e008      	b.n	80089b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d102      	bne.n	80089b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80089ac:	2301      	movs	r3, #1
 80089ae:	73fb      	strb	r3, [r7, #15]
 80089b0:	e001      	b.n	80089b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80089b2:	f7f8 fa91 	bl	8000ed8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089bc:	7bfa      	ldrb	r2, [r7, #15]
 80089be:	4611      	mov	r1, r2
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fcf2 	bl	80073aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fe fc9a 	bl	8007306 <USBD_LL_Reset>
}
 80089d2:	bf00      	nop
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe fced 	bl	80073ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	6812      	ldr	r2, [r2, #0]
 80089fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a02:	f043 0301 	orr.w	r3, r3, #1
 8008a06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a1b      	ldr	r3, [r3, #32]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d005      	beq.n	8008a1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a10:	4b04      	ldr	r3, [pc, #16]	; (8008a24 <HAL_PCD_SuspendCallback+0x48>)
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	4a03      	ldr	r2, [pc, #12]	; (8008a24 <HAL_PCD_SuspendCallback+0x48>)
 8008a16:	f043 0306 	orr.w	r3, r3, #6
 8008a1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	e000ed00 	.word	0xe000ed00

08008a28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fe fcdd 	bl	80073f6 <USBD_LL_Resume>
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a56:	78fa      	ldrb	r2, [r7, #3]
 8008a58:	4611      	mov	r1, r2
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe fd35 	bl	80074ca <USBD_LL_IsoOUTIncomplete>
}
 8008a60:	bf00      	nop
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a7a:	78fa      	ldrb	r2, [r7, #3]
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe fcf1 	bl	8007466 <USBD_LL_IsoINIncomplete>
}
 8008a84:	bf00      	nop
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fe fd47 	bl	800752e <USBD_LL_DevConnected>
}
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe fd44 	bl	8007544 <USBD_LL_DevDisconnected>
}
 8008abc:	bf00      	nop
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d13c      	bne.n	8008b4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ad4:	4a20      	ldr	r2, [pc, #128]	; (8008b58 <USBD_LL_Init+0x94>)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a1e      	ldr	r2, [pc, #120]	; (8008b58 <USBD_LL_Init+0x94>)
 8008ae0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ae4:	4b1c      	ldr	r3, [pc, #112]	; (8008b58 <USBD_LL_Init+0x94>)
 8008ae6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008aea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008aec:	4b1a      	ldr	r3, [pc, #104]	; (8008b58 <USBD_LL_Init+0x94>)
 8008aee:	2204      	movs	r2, #4
 8008af0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008af2:	4b19      	ldr	r3, [pc, #100]	; (8008b58 <USBD_LL_Init+0x94>)
 8008af4:	2202      	movs	r2, #2
 8008af6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008af8:	4b17      	ldr	r3, [pc, #92]	; (8008b58 <USBD_LL_Init+0x94>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008afe:	4b16      	ldr	r3, [pc, #88]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b00:	2202      	movs	r2, #2
 8008b02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008b04:	4b14      	ldr	r3, [pc, #80]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b06:	2201      	movs	r2, #1
 8008b08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b0a:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b10:	4b11      	ldr	r3, [pc, #68]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008b16:	4b10      	ldr	r3, [pc, #64]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b18:	2201      	movs	r2, #1
 8008b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b1c:	4b0e      	ldr	r3, [pc, #56]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b22:	480d      	ldr	r0, [pc, #52]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b24:	f7f9 fe87 	bl	8002836 <HAL_PCD_Init>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d001      	beq.n	8008b32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b2e:	f7f8 f9d3 	bl	8000ed8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b32:	2180      	movs	r1, #128	; 0x80
 8008b34:	4808      	ldr	r0, [pc, #32]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b36:	f7fb f8de 	bl	8003cf6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b3a:	2240      	movs	r2, #64	; 0x40
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	4806      	ldr	r0, [pc, #24]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b40:	f7fb f892 	bl	8003c68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b44:	2280      	movs	r2, #128	; 0x80
 8008b46:	2101      	movs	r1, #1
 8008b48:	4803      	ldr	r0, [pc, #12]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b4a:	f7fb f88d 	bl	8003c68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	2000192c 	.word	0x2000192c

08008b5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7f9 ff7c 	bl	8002a70 <HAL_PCD_Start>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f942 	bl	8008e08 <USBD_Get_USB_Status>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	4608      	mov	r0, r1
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	70fb      	strb	r3, [r7, #3]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70bb      	strb	r3, [r7, #2]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008bba:	78bb      	ldrb	r3, [r7, #2]
 8008bbc:	883a      	ldrh	r2, [r7, #0]
 8008bbe:	78f9      	ldrb	r1, [r7, #3]
 8008bc0:	f7fa fc4d 	bl	800345e <HAL_PCD_EP_Open>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 f91c 	bl	8008e08 <USBD_Get_USB_Status>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	460b      	mov	r3, r1
 8008be8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bf8:	78fa      	ldrb	r2, [r7, #3]
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fa fc96 	bl	800352e <HAL_PCD_EP_Close>
 8008c02:	4603      	mov	r3, r0
 8008c04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 f8fd 	bl	8008e08 <USBD_Get_USB_Status>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c36:	78fa      	ldrb	r2, [r7, #3]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fa fd6e 	bl	800371c <HAL_PCD_EP_SetStall>
 8008c40:	4603      	mov	r3, r0
 8008c42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 f8de 	bl	8008e08 <USBD_Get_USB_Status>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b084      	sub	sp, #16
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	460b      	mov	r3, r1
 8008c64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c74:	78fa      	ldrb	r2, [r7, #3]
 8008c76:	4611      	mov	r1, r2
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fa fdb3 	bl	80037e4 <HAL_PCD_EP_ClrStall>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 f8bf 	bl	8008e08 <USBD_Get_USB_Status>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008caa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	da0b      	bge.n	8008ccc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cb4:	78fb      	ldrb	r3, [r7, #3]
 8008cb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	440b      	add	r3, r1
 8008cc6:	333e      	adds	r3, #62	; 0x3e
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	e00b      	b.n	8008ce4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ccc:	78fb      	ldrb	r3, [r7, #3]
 8008cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cd2:	68f9      	ldr	r1, [r7, #12]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	440b      	add	r3, r1
 8008cde:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008ce2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d0a:	78fa      	ldrb	r2, [r7, #3]
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fa fb80 	bl	8003414 <HAL_PCD_SetAddress>
 8008d14:	4603      	mov	r3, r0
 8008d16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 f874 	bl	8008e08 <USBD_Get_USB_Status>
 8008d20:	4603      	mov	r3, r0
 8008d22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d24:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b086      	sub	sp, #24
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	603b      	str	r3, [r7, #0]
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d4c:	7af9      	ldrb	r1, [r7, #11]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	f7fa fc99 	bl	8003688 <HAL_PCD_EP_Transmit>
 8008d56:	4603      	mov	r3, r0
 8008d58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d5a:	7dfb      	ldrb	r3, [r7, #23]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 f853 	bl	8008e08 <USBD_Get_USB_Status>
 8008d62:	4603      	mov	r3, r0
 8008d64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d66:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	607a      	str	r2, [r7, #4]
 8008d7a:	603b      	str	r3, [r7, #0]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d8e:	7af9      	ldrb	r1, [r7, #11]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	f7fa fc15 	bl	80035c2 <HAL_PCD_EP_Receive>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 f832 	bl	8008e08 <USBD_Get_USB_Status>
 8008da4:	4603      	mov	r3, r0
 8008da6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008da8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b082      	sub	sp, #8
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dc4:	78fa      	ldrb	r2, [r7, #3]
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fa fc45 	bl	8003658 <HAL_PCD_EP_GetRxCount>
 8008dce:	4603      	mov	r3, r0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008de0:	4b03      	ldr	r3, [pc, #12]	; (8008df0 <USBD_static_malloc+0x18>)
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	20001e38 	.word	0x20001e38

08008df4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]

}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e16:	79fb      	ldrb	r3, [r7, #7]
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d817      	bhi.n	8008e4c <USBD_Get_USB_Status+0x44>
 8008e1c:	a201      	add	r2, pc, #4	; (adr r2, 8008e24 <USBD_Get_USB_Status+0x1c>)
 8008e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e22:	bf00      	nop
 8008e24:	08008e35 	.word	0x08008e35
 8008e28:	08008e3b 	.word	0x08008e3b
 8008e2c:	08008e41 	.word	0x08008e41
 8008e30:	08008e47 	.word	0x08008e47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73fb      	strb	r3, [r7, #15]
    break;
 8008e38:	e00b      	b.n	8008e52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3e:	e008      	b.n	8008e52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e40:	2301      	movs	r3, #1
 8008e42:	73fb      	strb	r3, [r7, #15]
    break;
 8008e44:	e005      	b.n	8008e52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e46:	2303      	movs	r3, #3
 8008e48:	73fb      	strb	r3, [r7, #15]
    break;
 8008e4a:	e002      	b.n	8008e52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e50:	bf00      	nop
  }
  return usb_status;
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <__errno>:
 8008e60:	4b01      	ldr	r3, [pc, #4]	; (8008e68 <__errno+0x8>)
 8008e62:	6818      	ldr	r0, [r3, #0]
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	200000fc 	.word	0x200000fc

08008e6c <__libc_init_array>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	4d0d      	ldr	r5, [pc, #52]	; (8008ea4 <__libc_init_array+0x38>)
 8008e70:	4c0d      	ldr	r4, [pc, #52]	; (8008ea8 <__libc_init_array+0x3c>)
 8008e72:	1b64      	subs	r4, r4, r5
 8008e74:	10a4      	asrs	r4, r4, #2
 8008e76:	2600      	movs	r6, #0
 8008e78:	42a6      	cmp	r6, r4
 8008e7a:	d109      	bne.n	8008e90 <__libc_init_array+0x24>
 8008e7c:	4d0b      	ldr	r5, [pc, #44]	; (8008eac <__libc_init_array+0x40>)
 8008e7e:	4c0c      	ldr	r4, [pc, #48]	; (8008eb0 <__libc_init_array+0x44>)
 8008e80:	f000 fc8e 	bl	80097a0 <_init>
 8008e84:	1b64      	subs	r4, r4, r5
 8008e86:	10a4      	asrs	r4, r4, #2
 8008e88:	2600      	movs	r6, #0
 8008e8a:	42a6      	cmp	r6, r4
 8008e8c:	d105      	bne.n	8008e9a <__libc_init_array+0x2e>
 8008e8e:	bd70      	pop	{r4, r5, r6, pc}
 8008e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e94:	4798      	blx	r3
 8008e96:	3601      	adds	r6, #1
 8008e98:	e7ee      	b.n	8008e78 <__libc_init_array+0xc>
 8008e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e9e:	4798      	blx	r3
 8008ea0:	3601      	adds	r6, #1
 8008ea2:	e7f2      	b.n	8008e8a <__libc_init_array+0x1e>
 8008ea4:	0800a1b8 	.word	0x0800a1b8
 8008ea8:	0800a1b8 	.word	0x0800a1b8
 8008eac:	0800a1b8 	.word	0x0800a1b8
 8008eb0:	0800a1bc 	.word	0x0800a1bc

08008eb4 <memcpy>:
 8008eb4:	440a      	add	r2, r1
 8008eb6:	4291      	cmp	r1, r2
 8008eb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ebc:	d100      	bne.n	8008ec0 <memcpy+0xc>
 8008ebe:	4770      	bx	lr
 8008ec0:	b510      	push	{r4, lr}
 8008ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eca:	4291      	cmp	r1, r2
 8008ecc:	d1f9      	bne.n	8008ec2 <memcpy+0xe>
 8008ece:	bd10      	pop	{r4, pc}

08008ed0 <memset>:
 8008ed0:	4402      	add	r2, r0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d100      	bne.n	8008eda <memset+0xa>
 8008ed8:	4770      	bx	lr
 8008eda:	f803 1b01 	strb.w	r1, [r3], #1
 8008ede:	e7f9      	b.n	8008ed4 <memset+0x4>

08008ee0 <siprintf>:
 8008ee0:	b40e      	push	{r1, r2, r3}
 8008ee2:	b500      	push	{lr}
 8008ee4:	b09c      	sub	sp, #112	; 0x70
 8008ee6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ee8:	9002      	str	r0, [sp, #8]
 8008eea:	9006      	str	r0, [sp, #24]
 8008eec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ef0:	4809      	ldr	r0, [pc, #36]	; (8008f18 <siprintf+0x38>)
 8008ef2:	9107      	str	r1, [sp, #28]
 8008ef4:	9104      	str	r1, [sp, #16]
 8008ef6:	4909      	ldr	r1, [pc, #36]	; (8008f1c <siprintf+0x3c>)
 8008ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008efc:	9105      	str	r1, [sp, #20]
 8008efe:	6800      	ldr	r0, [r0, #0]
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	a902      	add	r1, sp, #8
 8008f04:	f000 f868 	bl	8008fd8 <_svfiprintf_r>
 8008f08:	9b02      	ldr	r3, [sp, #8]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	701a      	strb	r2, [r3, #0]
 8008f0e:	b01c      	add	sp, #112	; 0x70
 8008f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f14:	b003      	add	sp, #12
 8008f16:	4770      	bx	lr
 8008f18:	200000fc 	.word	0x200000fc
 8008f1c:	ffff0208 	.word	0xffff0208

08008f20 <__ssputs_r>:
 8008f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f24:	688e      	ldr	r6, [r1, #8]
 8008f26:	429e      	cmp	r6, r3
 8008f28:	4682      	mov	sl, r0
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	4690      	mov	r8, r2
 8008f2e:	461f      	mov	r7, r3
 8008f30:	d838      	bhi.n	8008fa4 <__ssputs_r+0x84>
 8008f32:	898a      	ldrh	r2, [r1, #12]
 8008f34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f38:	d032      	beq.n	8008fa0 <__ssputs_r+0x80>
 8008f3a:	6825      	ldr	r5, [r4, #0]
 8008f3c:	6909      	ldr	r1, [r1, #16]
 8008f3e:	eba5 0901 	sub.w	r9, r5, r1
 8008f42:	6965      	ldr	r5, [r4, #20]
 8008f44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	444b      	add	r3, r9
 8008f50:	106d      	asrs	r5, r5, #1
 8008f52:	429d      	cmp	r5, r3
 8008f54:	bf38      	it	cc
 8008f56:	461d      	movcc	r5, r3
 8008f58:	0553      	lsls	r3, r2, #21
 8008f5a:	d531      	bpl.n	8008fc0 <__ssputs_r+0xa0>
 8008f5c:	4629      	mov	r1, r5
 8008f5e:	f000 fb55 	bl	800960c <_malloc_r>
 8008f62:	4606      	mov	r6, r0
 8008f64:	b950      	cbnz	r0, 8008f7c <__ssputs_r+0x5c>
 8008f66:	230c      	movs	r3, #12
 8008f68:	f8ca 3000 	str.w	r3, [sl]
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f72:	81a3      	strh	r3, [r4, #12]
 8008f74:	f04f 30ff 	mov.w	r0, #4294967295
 8008f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f7c:	6921      	ldr	r1, [r4, #16]
 8008f7e:	464a      	mov	r2, r9
 8008f80:	f7ff ff98 	bl	8008eb4 <memcpy>
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f8e:	81a3      	strh	r3, [r4, #12]
 8008f90:	6126      	str	r6, [r4, #16]
 8008f92:	6165      	str	r5, [r4, #20]
 8008f94:	444e      	add	r6, r9
 8008f96:	eba5 0509 	sub.w	r5, r5, r9
 8008f9a:	6026      	str	r6, [r4, #0]
 8008f9c:	60a5      	str	r5, [r4, #8]
 8008f9e:	463e      	mov	r6, r7
 8008fa0:	42be      	cmp	r6, r7
 8008fa2:	d900      	bls.n	8008fa6 <__ssputs_r+0x86>
 8008fa4:	463e      	mov	r6, r7
 8008fa6:	6820      	ldr	r0, [r4, #0]
 8008fa8:	4632      	mov	r2, r6
 8008faa:	4641      	mov	r1, r8
 8008fac:	f000 faa8 	bl	8009500 <memmove>
 8008fb0:	68a3      	ldr	r3, [r4, #8]
 8008fb2:	1b9b      	subs	r3, r3, r6
 8008fb4:	60a3      	str	r3, [r4, #8]
 8008fb6:	6823      	ldr	r3, [r4, #0]
 8008fb8:	4433      	add	r3, r6
 8008fba:	6023      	str	r3, [r4, #0]
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	e7db      	b.n	8008f78 <__ssputs_r+0x58>
 8008fc0:	462a      	mov	r2, r5
 8008fc2:	f000 fb97 	bl	80096f4 <_realloc_r>
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d1e1      	bne.n	8008f90 <__ssputs_r+0x70>
 8008fcc:	6921      	ldr	r1, [r4, #16]
 8008fce:	4650      	mov	r0, sl
 8008fd0:	f000 fab0 	bl	8009534 <_free_r>
 8008fd4:	e7c7      	b.n	8008f66 <__ssputs_r+0x46>
	...

08008fd8 <_svfiprintf_r>:
 8008fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	4698      	mov	r8, r3
 8008fde:	898b      	ldrh	r3, [r1, #12]
 8008fe0:	061b      	lsls	r3, r3, #24
 8008fe2:	b09d      	sub	sp, #116	; 0x74
 8008fe4:	4607      	mov	r7, r0
 8008fe6:	460d      	mov	r5, r1
 8008fe8:	4614      	mov	r4, r2
 8008fea:	d50e      	bpl.n	800900a <_svfiprintf_r+0x32>
 8008fec:	690b      	ldr	r3, [r1, #16]
 8008fee:	b963      	cbnz	r3, 800900a <_svfiprintf_r+0x32>
 8008ff0:	2140      	movs	r1, #64	; 0x40
 8008ff2:	f000 fb0b 	bl	800960c <_malloc_r>
 8008ff6:	6028      	str	r0, [r5, #0]
 8008ff8:	6128      	str	r0, [r5, #16]
 8008ffa:	b920      	cbnz	r0, 8009006 <_svfiprintf_r+0x2e>
 8008ffc:	230c      	movs	r3, #12
 8008ffe:	603b      	str	r3, [r7, #0]
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	e0d1      	b.n	80091aa <_svfiprintf_r+0x1d2>
 8009006:	2340      	movs	r3, #64	; 0x40
 8009008:	616b      	str	r3, [r5, #20]
 800900a:	2300      	movs	r3, #0
 800900c:	9309      	str	r3, [sp, #36]	; 0x24
 800900e:	2320      	movs	r3, #32
 8009010:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009014:	f8cd 800c 	str.w	r8, [sp, #12]
 8009018:	2330      	movs	r3, #48	; 0x30
 800901a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091c4 <_svfiprintf_r+0x1ec>
 800901e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009022:	f04f 0901 	mov.w	r9, #1
 8009026:	4623      	mov	r3, r4
 8009028:	469a      	mov	sl, r3
 800902a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800902e:	b10a      	cbz	r2, 8009034 <_svfiprintf_r+0x5c>
 8009030:	2a25      	cmp	r2, #37	; 0x25
 8009032:	d1f9      	bne.n	8009028 <_svfiprintf_r+0x50>
 8009034:	ebba 0b04 	subs.w	fp, sl, r4
 8009038:	d00b      	beq.n	8009052 <_svfiprintf_r+0x7a>
 800903a:	465b      	mov	r3, fp
 800903c:	4622      	mov	r2, r4
 800903e:	4629      	mov	r1, r5
 8009040:	4638      	mov	r0, r7
 8009042:	f7ff ff6d 	bl	8008f20 <__ssputs_r>
 8009046:	3001      	adds	r0, #1
 8009048:	f000 80aa 	beq.w	80091a0 <_svfiprintf_r+0x1c8>
 800904c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800904e:	445a      	add	r2, fp
 8009050:	9209      	str	r2, [sp, #36]	; 0x24
 8009052:	f89a 3000 	ldrb.w	r3, [sl]
 8009056:	2b00      	cmp	r3, #0
 8009058:	f000 80a2 	beq.w	80091a0 <_svfiprintf_r+0x1c8>
 800905c:	2300      	movs	r3, #0
 800905e:	f04f 32ff 	mov.w	r2, #4294967295
 8009062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009066:	f10a 0a01 	add.w	sl, sl, #1
 800906a:	9304      	str	r3, [sp, #16]
 800906c:	9307      	str	r3, [sp, #28]
 800906e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009072:	931a      	str	r3, [sp, #104]	; 0x68
 8009074:	4654      	mov	r4, sl
 8009076:	2205      	movs	r2, #5
 8009078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800907c:	4851      	ldr	r0, [pc, #324]	; (80091c4 <_svfiprintf_r+0x1ec>)
 800907e:	f7f7 f8bf 	bl	8000200 <memchr>
 8009082:	9a04      	ldr	r2, [sp, #16]
 8009084:	b9d8      	cbnz	r0, 80090be <_svfiprintf_r+0xe6>
 8009086:	06d0      	lsls	r0, r2, #27
 8009088:	bf44      	itt	mi
 800908a:	2320      	movmi	r3, #32
 800908c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009090:	0711      	lsls	r1, r2, #28
 8009092:	bf44      	itt	mi
 8009094:	232b      	movmi	r3, #43	; 0x2b
 8009096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800909a:	f89a 3000 	ldrb.w	r3, [sl]
 800909e:	2b2a      	cmp	r3, #42	; 0x2a
 80090a0:	d015      	beq.n	80090ce <_svfiprintf_r+0xf6>
 80090a2:	9a07      	ldr	r2, [sp, #28]
 80090a4:	4654      	mov	r4, sl
 80090a6:	2000      	movs	r0, #0
 80090a8:	f04f 0c0a 	mov.w	ip, #10
 80090ac:	4621      	mov	r1, r4
 80090ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090b2:	3b30      	subs	r3, #48	; 0x30
 80090b4:	2b09      	cmp	r3, #9
 80090b6:	d94e      	bls.n	8009156 <_svfiprintf_r+0x17e>
 80090b8:	b1b0      	cbz	r0, 80090e8 <_svfiprintf_r+0x110>
 80090ba:	9207      	str	r2, [sp, #28]
 80090bc:	e014      	b.n	80090e8 <_svfiprintf_r+0x110>
 80090be:	eba0 0308 	sub.w	r3, r0, r8
 80090c2:	fa09 f303 	lsl.w	r3, r9, r3
 80090c6:	4313      	orrs	r3, r2
 80090c8:	9304      	str	r3, [sp, #16]
 80090ca:	46a2      	mov	sl, r4
 80090cc:	e7d2      	b.n	8009074 <_svfiprintf_r+0x9c>
 80090ce:	9b03      	ldr	r3, [sp, #12]
 80090d0:	1d19      	adds	r1, r3, #4
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	9103      	str	r1, [sp, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	bfbb      	ittet	lt
 80090da:	425b      	neglt	r3, r3
 80090dc:	f042 0202 	orrlt.w	r2, r2, #2
 80090e0:	9307      	strge	r3, [sp, #28]
 80090e2:	9307      	strlt	r3, [sp, #28]
 80090e4:	bfb8      	it	lt
 80090e6:	9204      	strlt	r2, [sp, #16]
 80090e8:	7823      	ldrb	r3, [r4, #0]
 80090ea:	2b2e      	cmp	r3, #46	; 0x2e
 80090ec:	d10c      	bne.n	8009108 <_svfiprintf_r+0x130>
 80090ee:	7863      	ldrb	r3, [r4, #1]
 80090f0:	2b2a      	cmp	r3, #42	; 0x2a
 80090f2:	d135      	bne.n	8009160 <_svfiprintf_r+0x188>
 80090f4:	9b03      	ldr	r3, [sp, #12]
 80090f6:	1d1a      	adds	r2, r3, #4
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	9203      	str	r2, [sp, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	bfb8      	it	lt
 8009100:	f04f 33ff 	movlt.w	r3, #4294967295
 8009104:	3402      	adds	r4, #2
 8009106:	9305      	str	r3, [sp, #20]
 8009108:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091d4 <_svfiprintf_r+0x1fc>
 800910c:	7821      	ldrb	r1, [r4, #0]
 800910e:	2203      	movs	r2, #3
 8009110:	4650      	mov	r0, sl
 8009112:	f7f7 f875 	bl	8000200 <memchr>
 8009116:	b140      	cbz	r0, 800912a <_svfiprintf_r+0x152>
 8009118:	2340      	movs	r3, #64	; 0x40
 800911a:	eba0 000a 	sub.w	r0, r0, sl
 800911e:	fa03 f000 	lsl.w	r0, r3, r0
 8009122:	9b04      	ldr	r3, [sp, #16]
 8009124:	4303      	orrs	r3, r0
 8009126:	3401      	adds	r4, #1
 8009128:	9304      	str	r3, [sp, #16]
 800912a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800912e:	4826      	ldr	r0, [pc, #152]	; (80091c8 <_svfiprintf_r+0x1f0>)
 8009130:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009134:	2206      	movs	r2, #6
 8009136:	f7f7 f863 	bl	8000200 <memchr>
 800913a:	2800      	cmp	r0, #0
 800913c:	d038      	beq.n	80091b0 <_svfiprintf_r+0x1d8>
 800913e:	4b23      	ldr	r3, [pc, #140]	; (80091cc <_svfiprintf_r+0x1f4>)
 8009140:	bb1b      	cbnz	r3, 800918a <_svfiprintf_r+0x1b2>
 8009142:	9b03      	ldr	r3, [sp, #12]
 8009144:	3307      	adds	r3, #7
 8009146:	f023 0307 	bic.w	r3, r3, #7
 800914a:	3308      	adds	r3, #8
 800914c:	9303      	str	r3, [sp, #12]
 800914e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009150:	4433      	add	r3, r6
 8009152:	9309      	str	r3, [sp, #36]	; 0x24
 8009154:	e767      	b.n	8009026 <_svfiprintf_r+0x4e>
 8009156:	fb0c 3202 	mla	r2, ip, r2, r3
 800915a:	460c      	mov	r4, r1
 800915c:	2001      	movs	r0, #1
 800915e:	e7a5      	b.n	80090ac <_svfiprintf_r+0xd4>
 8009160:	2300      	movs	r3, #0
 8009162:	3401      	adds	r4, #1
 8009164:	9305      	str	r3, [sp, #20]
 8009166:	4619      	mov	r1, r3
 8009168:	f04f 0c0a 	mov.w	ip, #10
 800916c:	4620      	mov	r0, r4
 800916e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009172:	3a30      	subs	r2, #48	; 0x30
 8009174:	2a09      	cmp	r2, #9
 8009176:	d903      	bls.n	8009180 <_svfiprintf_r+0x1a8>
 8009178:	2b00      	cmp	r3, #0
 800917a:	d0c5      	beq.n	8009108 <_svfiprintf_r+0x130>
 800917c:	9105      	str	r1, [sp, #20]
 800917e:	e7c3      	b.n	8009108 <_svfiprintf_r+0x130>
 8009180:	fb0c 2101 	mla	r1, ip, r1, r2
 8009184:	4604      	mov	r4, r0
 8009186:	2301      	movs	r3, #1
 8009188:	e7f0      	b.n	800916c <_svfiprintf_r+0x194>
 800918a:	ab03      	add	r3, sp, #12
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	462a      	mov	r2, r5
 8009190:	4b0f      	ldr	r3, [pc, #60]	; (80091d0 <_svfiprintf_r+0x1f8>)
 8009192:	a904      	add	r1, sp, #16
 8009194:	4638      	mov	r0, r7
 8009196:	f3af 8000 	nop.w
 800919a:	1c42      	adds	r2, r0, #1
 800919c:	4606      	mov	r6, r0
 800919e:	d1d6      	bne.n	800914e <_svfiprintf_r+0x176>
 80091a0:	89ab      	ldrh	r3, [r5, #12]
 80091a2:	065b      	lsls	r3, r3, #25
 80091a4:	f53f af2c 	bmi.w	8009000 <_svfiprintf_r+0x28>
 80091a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091aa:	b01d      	add	sp, #116	; 0x74
 80091ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b0:	ab03      	add	r3, sp, #12
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	462a      	mov	r2, r5
 80091b6:	4b06      	ldr	r3, [pc, #24]	; (80091d0 <_svfiprintf_r+0x1f8>)
 80091b8:	a904      	add	r1, sp, #16
 80091ba:	4638      	mov	r0, r7
 80091bc:	f000 f87a 	bl	80092b4 <_printf_i>
 80091c0:	e7eb      	b.n	800919a <_svfiprintf_r+0x1c2>
 80091c2:	bf00      	nop
 80091c4:	0800a17c 	.word	0x0800a17c
 80091c8:	0800a186 	.word	0x0800a186
 80091cc:	00000000 	.word	0x00000000
 80091d0:	08008f21 	.word	0x08008f21
 80091d4:	0800a182 	.word	0x0800a182

080091d8 <_printf_common>:
 80091d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091dc:	4616      	mov	r6, r2
 80091de:	4699      	mov	r9, r3
 80091e0:	688a      	ldr	r2, [r1, #8]
 80091e2:	690b      	ldr	r3, [r1, #16]
 80091e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091e8:	4293      	cmp	r3, r2
 80091ea:	bfb8      	it	lt
 80091ec:	4613      	movlt	r3, r2
 80091ee:	6033      	str	r3, [r6, #0]
 80091f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091f4:	4607      	mov	r7, r0
 80091f6:	460c      	mov	r4, r1
 80091f8:	b10a      	cbz	r2, 80091fe <_printf_common+0x26>
 80091fa:	3301      	adds	r3, #1
 80091fc:	6033      	str	r3, [r6, #0]
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	0699      	lsls	r1, r3, #26
 8009202:	bf42      	ittt	mi
 8009204:	6833      	ldrmi	r3, [r6, #0]
 8009206:	3302      	addmi	r3, #2
 8009208:	6033      	strmi	r3, [r6, #0]
 800920a:	6825      	ldr	r5, [r4, #0]
 800920c:	f015 0506 	ands.w	r5, r5, #6
 8009210:	d106      	bne.n	8009220 <_printf_common+0x48>
 8009212:	f104 0a19 	add.w	sl, r4, #25
 8009216:	68e3      	ldr	r3, [r4, #12]
 8009218:	6832      	ldr	r2, [r6, #0]
 800921a:	1a9b      	subs	r3, r3, r2
 800921c:	42ab      	cmp	r3, r5
 800921e:	dc26      	bgt.n	800926e <_printf_common+0x96>
 8009220:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009224:	1e13      	subs	r3, r2, #0
 8009226:	6822      	ldr	r2, [r4, #0]
 8009228:	bf18      	it	ne
 800922a:	2301      	movne	r3, #1
 800922c:	0692      	lsls	r2, r2, #26
 800922e:	d42b      	bmi.n	8009288 <_printf_common+0xb0>
 8009230:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009234:	4649      	mov	r1, r9
 8009236:	4638      	mov	r0, r7
 8009238:	47c0      	blx	r8
 800923a:	3001      	adds	r0, #1
 800923c:	d01e      	beq.n	800927c <_printf_common+0xa4>
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	68e5      	ldr	r5, [r4, #12]
 8009242:	6832      	ldr	r2, [r6, #0]
 8009244:	f003 0306 	and.w	r3, r3, #6
 8009248:	2b04      	cmp	r3, #4
 800924a:	bf08      	it	eq
 800924c:	1aad      	subeq	r5, r5, r2
 800924e:	68a3      	ldr	r3, [r4, #8]
 8009250:	6922      	ldr	r2, [r4, #16]
 8009252:	bf0c      	ite	eq
 8009254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009258:	2500      	movne	r5, #0
 800925a:	4293      	cmp	r3, r2
 800925c:	bfc4      	itt	gt
 800925e:	1a9b      	subgt	r3, r3, r2
 8009260:	18ed      	addgt	r5, r5, r3
 8009262:	2600      	movs	r6, #0
 8009264:	341a      	adds	r4, #26
 8009266:	42b5      	cmp	r5, r6
 8009268:	d11a      	bne.n	80092a0 <_printf_common+0xc8>
 800926a:	2000      	movs	r0, #0
 800926c:	e008      	b.n	8009280 <_printf_common+0xa8>
 800926e:	2301      	movs	r3, #1
 8009270:	4652      	mov	r2, sl
 8009272:	4649      	mov	r1, r9
 8009274:	4638      	mov	r0, r7
 8009276:	47c0      	blx	r8
 8009278:	3001      	adds	r0, #1
 800927a:	d103      	bne.n	8009284 <_printf_common+0xac>
 800927c:	f04f 30ff 	mov.w	r0, #4294967295
 8009280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009284:	3501      	adds	r5, #1
 8009286:	e7c6      	b.n	8009216 <_printf_common+0x3e>
 8009288:	18e1      	adds	r1, r4, r3
 800928a:	1c5a      	adds	r2, r3, #1
 800928c:	2030      	movs	r0, #48	; 0x30
 800928e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009292:	4422      	add	r2, r4
 8009294:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009298:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800929c:	3302      	adds	r3, #2
 800929e:	e7c7      	b.n	8009230 <_printf_common+0x58>
 80092a0:	2301      	movs	r3, #1
 80092a2:	4622      	mov	r2, r4
 80092a4:	4649      	mov	r1, r9
 80092a6:	4638      	mov	r0, r7
 80092a8:	47c0      	blx	r8
 80092aa:	3001      	adds	r0, #1
 80092ac:	d0e6      	beq.n	800927c <_printf_common+0xa4>
 80092ae:	3601      	adds	r6, #1
 80092b0:	e7d9      	b.n	8009266 <_printf_common+0x8e>
	...

080092b4 <_printf_i>:
 80092b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092b8:	7e0f      	ldrb	r7, [r1, #24]
 80092ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092bc:	2f78      	cmp	r7, #120	; 0x78
 80092be:	4691      	mov	r9, r2
 80092c0:	4680      	mov	r8, r0
 80092c2:	460c      	mov	r4, r1
 80092c4:	469a      	mov	sl, r3
 80092c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092ca:	d807      	bhi.n	80092dc <_printf_i+0x28>
 80092cc:	2f62      	cmp	r7, #98	; 0x62
 80092ce:	d80a      	bhi.n	80092e6 <_printf_i+0x32>
 80092d0:	2f00      	cmp	r7, #0
 80092d2:	f000 80d8 	beq.w	8009486 <_printf_i+0x1d2>
 80092d6:	2f58      	cmp	r7, #88	; 0x58
 80092d8:	f000 80a3 	beq.w	8009422 <_printf_i+0x16e>
 80092dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092e4:	e03a      	b.n	800935c <_printf_i+0xa8>
 80092e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092ea:	2b15      	cmp	r3, #21
 80092ec:	d8f6      	bhi.n	80092dc <_printf_i+0x28>
 80092ee:	a101      	add	r1, pc, #4	; (adr r1, 80092f4 <_printf_i+0x40>)
 80092f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092f4:	0800934d 	.word	0x0800934d
 80092f8:	08009361 	.word	0x08009361
 80092fc:	080092dd 	.word	0x080092dd
 8009300:	080092dd 	.word	0x080092dd
 8009304:	080092dd 	.word	0x080092dd
 8009308:	080092dd 	.word	0x080092dd
 800930c:	08009361 	.word	0x08009361
 8009310:	080092dd 	.word	0x080092dd
 8009314:	080092dd 	.word	0x080092dd
 8009318:	080092dd 	.word	0x080092dd
 800931c:	080092dd 	.word	0x080092dd
 8009320:	0800946d 	.word	0x0800946d
 8009324:	08009391 	.word	0x08009391
 8009328:	0800944f 	.word	0x0800944f
 800932c:	080092dd 	.word	0x080092dd
 8009330:	080092dd 	.word	0x080092dd
 8009334:	0800948f 	.word	0x0800948f
 8009338:	080092dd 	.word	0x080092dd
 800933c:	08009391 	.word	0x08009391
 8009340:	080092dd 	.word	0x080092dd
 8009344:	080092dd 	.word	0x080092dd
 8009348:	08009457 	.word	0x08009457
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	1d1a      	adds	r2, r3, #4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	602a      	str	r2, [r5, #0]
 8009354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800935c:	2301      	movs	r3, #1
 800935e:	e0a3      	b.n	80094a8 <_printf_i+0x1f4>
 8009360:	6820      	ldr	r0, [r4, #0]
 8009362:	6829      	ldr	r1, [r5, #0]
 8009364:	0606      	lsls	r6, r0, #24
 8009366:	f101 0304 	add.w	r3, r1, #4
 800936a:	d50a      	bpl.n	8009382 <_printf_i+0xce>
 800936c:	680e      	ldr	r6, [r1, #0]
 800936e:	602b      	str	r3, [r5, #0]
 8009370:	2e00      	cmp	r6, #0
 8009372:	da03      	bge.n	800937c <_printf_i+0xc8>
 8009374:	232d      	movs	r3, #45	; 0x2d
 8009376:	4276      	negs	r6, r6
 8009378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800937c:	485e      	ldr	r0, [pc, #376]	; (80094f8 <_printf_i+0x244>)
 800937e:	230a      	movs	r3, #10
 8009380:	e019      	b.n	80093b6 <_printf_i+0x102>
 8009382:	680e      	ldr	r6, [r1, #0]
 8009384:	602b      	str	r3, [r5, #0]
 8009386:	f010 0f40 	tst.w	r0, #64	; 0x40
 800938a:	bf18      	it	ne
 800938c:	b236      	sxthne	r6, r6
 800938e:	e7ef      	b.n	8009370 <_printf_i+0xbc>
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	6820      	ldr	r0, [r4, #0]
 8009394:	1d19      	adds	r1, r3, #4
 8009396:	6029      	str	r1, [r5, #0]
 8009398:	0601      	lsls	r1, r0, #24
 800939a:	d501      	bpl.n	80093a0 <_printf_i+0xec>
 800939c:	681e      	ldr	r6, [r3, #0]
 800939e:	e002      	b.n	80093a6 <_printf_i+0xf2>
 80093a0:	0646      	lsls	r6, r0, #25
 80093a2:	d5fb      	bpl.n	800939c <_printf_i+0xe8>
 80093a4:	881e      	ldrh	r6, [r3, #0]
 80093a6:	4854      	ldr	r0, [pc, #336]	; (80094f8 <_printf_i+0x244>)
 80093a8:	2f6f      	cmp	r7, #111	; 0x6f
 80093aa:	bf0c      	ite	eq
 80093ac:	2308      	moveq	r3, #8
 80093ae:	230a      	movne	r3, #10
 80093b0:	2100      	movs	r1, #0
 80093b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093b6:	6865      	ldr	r5, [r4, #4]
 80093b8:	60a5      	str	r5, [r4, #8]
 80093ba:	2d00      	cmp	r5, #0
 80093bc:	bfa2      	ittt	ge
 80093be:	6821      	ldrge	r1, [r4, #0]
 80093c0:	f021 0104 	bicge.w	r1, r1, #4
 80093c4:	6021      	strge	r1, [r4, #0]
 80093c6:	b90e      	cbnz	r6, 80093cc <_printf_i+0x118>
 80093c8:	2d00      	cmp	r5, #0
 80093ca:	d04d      	beq.n	8009468 <_printf_i+0x1b4>
 80093cc:	4615      	mov	r5, r2
 80093ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80093d2:	fb03 6711 	mls	r7, r3, r1, r6
 80093d6:	5dc7      	ldrb	r7, [r0, r7]
 80093d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093dc:	4637      	mov	r7, r6
 80093de:	42bb      	cmp	r3, r7
 80093e0:	460e      	mov	r6, r1
 80093e2:	d9f4      	bls.n	80093ce <_printf_i+0x11a>
 80093e4:	2b08      	cmp	r3, #8
 80093e6:	d10b      	bne.n	8009400 <_printf_i+0x14c>
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	07de      	lsls	r6, r3, #31
 80093ec:	d508      	bpl.n	8009400 <_printf_i+0x14c>
 80093ee:	6923      	ldr	r3, [r4, #16]
 80093f0:	6861      	ldr	r1, [r4, #4]
 80093f2:	4299      	cmp	r1, r3
 80093f4:	bfde      	ittt	le
 80093f6:	2330      	movle	r3, #48	; 0x30
 80093f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009400:	1b52      	subs	r2, r2, r5
 8009402:	6122      	str	r2, [r4, #16]
 8009404:	f8cd a000 	str.w	sl, [sp]
 8009408:	464b      	mov	r3, r9
 800940a:	aa03      	add	r2, sp, #12
 800940c:	4621      	mov	r1, r4
 800940e:	4640      	mov	r0, r8
 8009410:	f7ff fee2 	bl	80091d8 <_printf_common>
 8009414:	3001      	adds	r0, #1
 8009416:	d14c      	bne.n	80094b2 <_printf_i+0x1fe>
 8009418:	f04f 30ff 	mov.w	r0, #4294967295
 800941c:	b004      	add	sp, #16
 800941e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009422:	4835      	ldr	r0, [pc, #212]	; (80094f8 <_printf_i+0x244>)
 8009424:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009428:	6829      	ldr	r1, [r5, #0]
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009430:	6029      	str	r1, [r5, #0]
 8009432:	061d      	lsls	r5, r3, #24
 8009434:	d514      	bpl.n	8009460 <_printf_i+0x1ac>
 8009436:	07df      	lsls	r7, r3, #31
 8009438:	bf44      	itt	mi
 800943a:	f043 0320 	orrmi.w	r3, r3, #32
 800943e:	6023      	strmi	r3, [r4, #0]
 8009440:	b91e      	cbnz	r6, 800944a <_printf_i+0x196>
 8009442:	6823      	ldr	r3, [r4, #0]
 8009444:	f023 0320 	bic.w	r3, r3, #32
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	2310      	movs	r3, #16
 800944c:	e7b0      	b.n	80093b0 <_printf_i+0xfc>
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	f043 0320 	orr.w	r3, r3, #32
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	2378      	movs	r3, #120	; 0x78
 8009458:	4828      	ldr	r0, [pc, #160]	; (80094fc <_printf_i+0x248>)
 800945a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800945e:	e7e3      	b.n	8009428 <_printf_i+0x174>
 8009460:	0659      	lsls	r1, r3, #25
 8009462:	bf48      	it	mi
 8009464:	b2b6      	uxthmi	r6, r6
 8009466:	e7e6      	b.n	8009436 <_printf_i+0x182>
 8009468:	4615      	mov	r5, r2
 800946a:	e7bb      	b.n	80093e4 <_printf_i+0x130>
 800946c:	682b      	ldr	r3, [r5, #0]
 800946e:	6826      	ldr	r6, [r4, #0]
 8009470:	6961      	ldr	r1, [r4, #20]
 8009472:	1d18      	adds	r0, r3, #4
 8009474:	6028      	str	r0, [r5, #0]
 8009476:	0635      	lsls	r5, r6, #24
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	d501      	bpl.n	8009480 <_printf_i+0x1cc>
 800947c:	6019      	str	r1, [r3, #0]
 800947e:	e002      	b.n	8009486 <_printf_i+0x1d2>
 8009480:	0670      	lsls	r0, r6, #25
 8009482:	d5fb      	bpl.n	800947c <_printf_i+0x1c8>
 8009484:	8019      	strh	r1, [r3, #0]
 8009486:	2300      	movs	r3, #0
 8009488:	6123      	str	r3, [r4, #16]
 800948a:	4615      	mov	r5, r2
 800948c:	e7ba      	b.n	8009404 <_printf_i+0x150>
 800948e:	682b      	ldr	r3, [r5, #0]
 8009490:	1d1a      	adds	r2, r3, #4
 8009492:	602a      	str	r2, [r5, #0]
 8009494:	681d      	ldr	r5, [r3, #0]
 8009496:	6862      	ldr	r2, [r4, #4]
 8009498:	2100      	movs	r1, #0
 800949a:	4628      	mov	r0, r5
 800949c:	f7f6 feb0 	bl	8000200 <memchr>
 80094a0:	b108      	cbz	r0, 80094a6 <_printf_i+0x1f2>
 80094a2:	1b40      	subs	r0, r0, r5
 80094a4:	6060      	str	r0, [r4, #4]
 80094a6:	6863      	ldr	r3, [r4, #4]
 80094a8:	6123      	str	r3, [r4, #16]
 80094aa:	2300      	movs	r3, #0
 80094ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094b0:	e7a8      	b.n	8009404 <_printf_i+0x150>
 80094b2:	6923      	ldr	r3, [r4, #16]
 80094b4:	462a      	mov	r2, r5
 80094b6:	4649      	mov	r1, r9
 80094b8:	4640      	mov	r0, r8
 80094ba:	47d0      	blx	sl
 80094bc:	3001      	adds	r0, #1
 80094be:	d0ab      	beq.n	8009418 <_printf_i+0x164>
 80094c0:	6823      	ldr	r3, [r4, #0]
 80094c2:	079b      	lsls	r3, r3, #30
 80094c4:	d413      	bmi.n	80094ee <_printf_i+0x23a>
 80094c6:	68e0      	ldr	r0, [r4, #12]
 80094c8:	9b03      	ldr	r3, [sp, #12]
 80094ca:	4298      	cmp	r0, r3
 80094cc:	bfb8      	it	lt
 80094ce:	4618      	movlt	r0, r3
 80094d0:	e7a4      	b.n	800941c <_printf_i+0x168>
 80094d2:	2301      	movs	r3, #1
 80094d4:	4632      	mov	r2, r6
 80094d6:	4649      	mov	r1, r9
 80094d8:	4640      	mov	r0, r8
 80094da:	47d0      	blx	sl
 80094dc:	3001      	adds	r0, #1
 80094de:	d09b      	beq.n	8009418 <_printf_i+0x164>
 80094e0:	3501      	adds	r5, #1
 80094e2:	68e3      	ldr	r3, [r4, #12]
 80094e4:	9903      	ldr	r1, [sp, #12]
 80094e6:	1a5b      	subs	r3, r3, r1
 80094e8:	42ab      	cmp	r3, r5
 80094ea:	dcf2      	bgt.n	80094d2 <_printf_i+0x21e>
 80094ec:	e7eb      	b.n	80094c6 <_printf_i+0x212>
 80094ee:	2500      	movs	r5, #0
 80094f0:	f104 0619 	add.w	r6, r4, #25
 80094f4:	e7f5      	b.n	80094e2 <_printf_i+0x22e>
 80094f6:	bf00      	nop
 80094f8:	0800a18d 	.word	0x0800a18d
 80094fc:	0800a19e 	.word	0x0800a19e

08009500 <memmove>:
 8009500:	4288      	cmp	r0, r1
 8009502:	b510      	push	{r4, lr}
 8009504:	eb01 0402 	add.w	r4, r1, r2
 8009508:	d902      	bls.n	8009510 <memmove+0x10>
 800950a:	4284      	cmp	r4, r0
 800950c:	4623      	mov	r3, r4
 800950e:	d807      	bhi.n	8009520 <memmove+0x20>
 8009510:	1e43      	subs	r3, r0, #1
 8009512:	42a1      	cmp	r1, r4
 8009514:	d008      	beq.n	8009528 <memmove+0x28>
 8009516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800951a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800951e:	e7f8      	b.n	8009512 <memmove+0x12>
 8009520:	4402      	add	r2, r0
 8009522:	4601      	mov	r1, r0
 8009524:	428a      	cmp	r2, r1
 8009526:	d100      	bne.n	800952a <memmove+0x2a>
 8009528:	bd10      	pop	{r4, pc}
 800952a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800952e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009532:	e7f7      	b.n	8009524 <memmove+0x24>

08009534 <_free_r>:
 8009534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009536:	2900      	cmp	r1, #0
 8009538:	d044      	beq.n	80095c4 <_free_r+0x90>
 800953a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800953e:	9001      	str	r0, [sp, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	f1a1 0404 	sub.w	r4, r1, #4
 8009546:	bfb8      	it	lt
 8009548:	18e4      	addlt	r4, r4, r3
 800954a:	f000 f913 	bl	8009774 <__malloc_lock>
 800954e:	4a1e      	ldr	r2, [pc, #120]	; (80095c8 <_free_r+0x94>)
 8009550:	9801      	ldr	r0, [sp, #4]
 8009552:	6813      	ldr	r3, [r2, #0]
 8009554:	b933      	cbnz	r3, 8009564 <_free_r+0x30>
 8009556:	6063      	str	r3, [r4, #4]
 8009558:	6014      	str	r4, [r2, #0]
 800955a:	b003      	add	sp, #12
 800955c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009560:	f000 b90e 	b.w	8009780 <__malloc_unlock>
 8009564:	42a3      	cmp	r3, r4
 8009566:	d908      	bls.n	800957a <_free_r+0x46>
 8009568:	6825      	ldr	r5, [r4, #0]
 800956a:	1961      	adds	r1, r4, r5
 800956c:	428b      	cmp	r3, r1
 800956e:	bf01      	itttt	eq
 8009570:	6819      	ldreq	r1, [r3, #0]
 8009572:	685b      	ldreq	r3, [r3, #4]
 8009574:	1949      	addeq	r1, r1, r5
 8009576:	6021      	streq	r1, [r4, #0]
 8009578:	e7ed      	b.n	8009556 <_free_r+0x22>
 800957a:	461a      	mov	r2, r3
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	b10b      	cbz	r3, 8009584 <_free_r+0x50>
 8009580:	42a3      	cmp	r3, r4
 8009582:	d9fa      	bls.n	800957a <_free_r+0x46>
 8009584:	6811      	ldr	r1, [r2, #0]
 8009586:	1855      	adds	r5, r2, r1
 8009588:	42a5      	cmp	r5, r4
 800958a:	d10b      	bne.n	80095a4 <_free_r+0x70>
 800958c:	6824      	ldr	r4, [r4, #0]
 800958e:	4421      	add	r1, r4
 8009590:	1854      	adds	r4, r2, r1
 8009592:	42a3      	cmp	r3, r4
 8009594:	6011      	str	r1, [r2, #0]
 8009596:	d1e0      	bne.n	800955a <_free_r+0x26>
 8009598:	681c      	ldr	r4, [r3, #0]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	6053      	str	r3, [r2, #4]
 800959e:	4421      	add	r1, r4
 80095a0:	6011      	str	r1, [r2, #0]
 80095a2:	e7da      	b.n	800955a <_free_r+0x26>
 80095a4:	d902      	bls.n	80095ac <_free_r+0x78>
 80095a6:	230c      	movs	r3, #12
 80095a8:	6003      	str	r3, [r0, #0]
 80095aa:	e7d6      	b.n	800955a <_free_r+0x26>
 80095ac:	6825      	ldr	r5, [r4, #0]
 80095ae:	1961      	adds	r1, r4, r5
 80095b0:	428b      	cmp	r3, r1
 80095b2:	bf04      	itt	eq
 80095b4:	6819      	ldreq	r1, [r3, #0]
 80095b6:	685b      	ldreq	r3, [r3, #4]
 80095b8:	6063      	str	r3, [r4, #4]
 80095ba:	bf04      	itt	eq
 80095bc:	1949      	addeq	r1, r1, r5
 80095be:	6021      	streq	r1, [r4, #0]
 80095c0:	6054      	str	r4, [r2, #4]
 80095c2:	e7ca      	b.n	800955a <_free_r+0x26>
 80095c4:	b003      	add	sp, #12
 80095c6:	bd30      	pop	{r4, r5, pc}
 80095c8:	20002058 	.word	0x20002058

080095cc <sbrk_aligned>:
 80095cc:	b570      	push	{r4, r5, r6, lr}
 80095ce:	4e0e      	ldr	r6, [pc, #56]	; (8009608 <sbrk_aligned+0x3c>)
 80095d0:	460c      	mov	r4, r1
 80095d2:	6831      	ldr	r1, [r6, #0]
 80095d4:	4605      	mov	r5, r0
 80095d6:	b911      	cbnz	r1, 80095de <sbrk_aligned+0x12>
 80095d8:	f000 f8bc 	bl	8009754 <_sbrk_r>
 80095dc:	6030      	str	r0, [r6, #0]
 80095de:	4621      	mov	r1, r4
 80095e0:	4628      	mov	r0, r5
 80095e2:	f000 f8b7 	bl	8009754 <_sbrk_r>
 80095e6:	1c43      	adds	r3, r0, #1
 80095e8:	d00a      	beq.n	8009600 <sbrk_aligned+0x34>
 80095ea:	1cc4      	adds	r4, r0, #3
 80095ec:	f024 0403 	bic.w	r4, r4, #3
 80095f0:	42a0      	cmp	r0, r4
 80095f2:	d007      	beq.n	8009604 <sbrk_aligned+0x38>
 80095f4:	1a21      	subs	r1, r4, r0
 80095f6:	4628      	mov	r0, r5
 80095f8:	f000 f8ac 	bl	8009754 <_sbrk_r>
 80095fc:	3001      	adds	r0, #1
 80095fe:	d101      	bne.n	8009604 <sbrk_aligned+0x38>
 8009600:	f04f 34ff 	mov.w	r4, #4294967295
 8009604:	4620      	mov	r0, r4
 8009606:	bd70      	pop	{r4, r5, r6, pc}
 8009608:	2000205c 	.word	0x2000205c

0800960c <_malloc_r>:
 800960c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009610:	1ccd      	adds	r5, r1, #3
 8009612:	f025 0503 	bic.w	r5, r5, #3
 8009616:	3508      	adds	r5, #8
 8009618:	2d0c      	cmp	r5, #12
 800961a:	bf38      	it	cc
 800961c:	250c      	movcc	r5, #12
 800961e:	2d00      	cmp	r5, #0
 8009620:	4607      	mov	r7, r0
 8009622:	db01      	blt.n	8009628 <_malloc_r+0x1c>
 8009624:	42a9      	cmp	r1, r5
 8009626:	d905      	bls.n	8009634 <_malloc_r+0x28>
 8009628:	230c      	movs	r3, #12
 800962a:	603b      	str	r3, [r7, #0]
 800962c:	2600      	movs	r6, #0
 800962e:	4630      	mov	r0, r6
 8009630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009634:	4e2e      	ldr	r6, [pc, #184]	; (80096f0 <_malloc_r+0xe4>)
 8009636:	f000 f89d 	bl	8009774 <__malloc_lock>
 800963a:	6833      	ldr	r3, [r6, #0]
 800963c:	461c      	mov	r4, r3
 800963e:	bb34      	cbnz	r4, 800968e <_malloc_r+0x82>
 8009640:	4629      	mov	r1, r5
 8009642:	4638      	mov	r0, r7
 8009644:	f7ff ffc2 	bl	80095cc <sbrk_aligned>
 8009648:	1c43      	adds	r3, r0, #1
 800964a:	4604      	mov	r4, r0
 800964c:	d14d      	bne.n	80096ea <_malloc_r+0xde>
 800964e:	6834      	ldr	r4, [r6, #0]
 8009650:	4626      	mov	r6, r4
 8009652:	2e00      	cmp	r6, #0
 8009654:	d140      	bne.n	80096d8 <_malloc_r+0xcc>
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	4631      	mov	r1, r6
 800965a:	4638      	mov	r0, r7
 800965c:	eb04 0803 	add.w	r8, r4, r3
 8009660:	f000 f878 	bl	8009754 <_sbrk_r>
 8009664:	4580      	cmp	r8, r0
 8009666:	d13a      	bne.n	80096de <_malloc_r+0xd2>
 8009668:	6821      	ldr	r1, [r4, #0]
 800966a:	3503      	adds	r5, #3
 800966c:	1a6d      	subs	r5, r5, r1
 800966e:	f025 0503 	bic.w	r5, r5, #3
 8009672:	3508      	adds	r5, #8
 8009674:	2d0c      	cmp	r5, #12
 8009676:	bf38      	it	cc
 8009678:	250c      	movcc	r5, #12
 800967a:	4629      	mov	r1, r5
 800967c:	4638      	mov	r0, r7
 800967e:	f7ff ffa5 	bl	80095cc <sbrk_aligned>
 8009682:	3001      	adds	r0, #1
 8009684:	d02b      	beq.n	80096de <_malloc_r+0xd2>
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	442b      	add	r3, r5
 800968a:	6023      	str	r3, [r4, #0]
 800968c:	e00e      	b.n	80096ac <_malloc_r+0xa0>
 800968e:	6822      	ldr	r2, [r4, #0]
 8009690:	1b52      	subs	r2, r2, r5
 8009692:	d41e      	bmi.n	80096d2 <_malloc_r+0xc6>
 8009694:	2a0b      	cmp	r2, #11
 8009696:	d916      	bls.n	80096c6 <_malloc_r+0xba>
 8009698:	1961      	adds	r1, r4, r5
 800969a:	42a3      	cmp	r3, r4
 800969c:	6025      	str	r5, [r4, #0]
 800969e:	bf18      	it	ne
 80096a0:	6059      	strne	r1, [r3, #4]
 80096a2:	6863      	ldr	r3, [r4, #4]
 80096a4:	bf08      	it	eq
 80096a6:	6031      	streq	r1, [r6, #0]
 80096a8:	5162      	str	r2, [r4, r5]
 80096aa:	604b      	str	r3, [r1, #4]
 80096ac:	4638      	mov	r0, r7
 80096ae:	f104 060b 	add.w	r6, r4, #11
 80096b2:	f000 f865 	bl	8009780 <__malloc_unlock>
 80096b6:	f026 0607 	bic.w	r6, r6, #7
 80096ba:	1d23      	adds	r3, r4, #4
 80096bc:	1af2      	subs	r2, r6, r3
 80096be:	d0b6      	beq.n	800962e <_malloc_r+0x22>
 80096c0:	1b9b      	subs	r3, r3, r6
 80096c2:	50a3      	str	r3, [r4, r2]
 80096c4:	e7b3      	b.n	800962e <_malloc_r+0x22>
 80096c6:	6862      	ldr	r2, [r4, #4]
 80096c8:	42a3      	cmp	r3, r4
 80096ca:	bf0c      	ite	eq
 80096cc:	6032      	streq	r2, [r6, #0]
 80096ce:	605a      	strne	r2, [r3, #4]
 80096d0:	e7ec      	b.n	80096ac <_malloc_r+0xa0>
 80096d2:	4623      	mov	r3, r4
 80096d4:	6864      	ldr	r4, [r4, #4]
 80096d6:	e7b2      	b.n	800963e <_malloc_r+0x32>
 80096d8:	4634      	mov	r4, r6
 80096da:	6876      	ldr	r6, [r6, #4]
 80096dc:	e7b9      	b.n	8009652 <_malloc_r+0x46>
 80096de:	230c      	movs	r3, #12
 80096e0:	603b      	str	r3, [r7, #0]
 80096e2:	4638      	mov	r0, r7
 80096e4:	f000 f84c 	bl	8009780 <__malloc_unlock>
 80096e8:	e7a1      	b.n	800962e <_malloc_r+0x22>
 80096ea:	6025      	str	r5, [r4, #0]
 80096ec:	e7de      	b.n	80096ac <_malloc_r+0xa0>
 80096ee:	bf00      	nop
 80096f0:	20002058 	.word	0x20002058

080096f4 <_realloc_r>:
 80096f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f8:	4680      	mov	r8, r0
 80096fa:	4614      	mov	r4, r2
 80096fc:	460e      	mov	r6, r1
 80096fe:	b921      	cbnz	r1, 800970a <_realloc_r+0x16>
 8009700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009704:	4611      	mov	r1, r2
 8009706:	f7ff bf81 	b.w	800960c <_malloc_r>
 800970a:	b92a      	cbnz	r2, 8009718 <_realloc_r+0x24>
 800970c:	f7ff ff12 	bl	8009534 <_free_r>
 8009710:	4625      	mov	r5, r4
 8009712:	4628      	mov	r0, r5
 8009714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009718:	f000 f838 	bl	800978c <_malloc_usable_size_r>
 800971c:	4284      	cmp	r4, r0
 800971e:	4607      	mov	r7, r0
 8009720:	d802      	bhi.n	8009728 <_realloc_r+0x34>
 8009722:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009726:	d812      	bhi.n	800974e <_realloc_r+0x5a>
 8009728:	4621      	mov	r1, r4
 800972a:	4640      	mov	r0, r8
 800972c:	f7ff ff6e 	bl	800960c <_malloc_r>
 8009730:	4605      	mov	r5, r0
 8009732:	2800      	cmp	r0, #0
 8009734:	d0ed      	beq.n	8009712 <_realloc_r+0x1e>
 8009736:	42bc      	cmp	r4, r7
 8009738:	4622      	mov	r2, r4
 800973a:	4631      	mov	r1, r6
 800973c:	bf28      	it	cs
 800973e:	463a      	movcs	r2, r7
 8009740:	f7ff fbb8 	bl	8008eb4 <memcpy>
 8009744:	4631      	mov	r1, r6
 8009746:	4640      	mov	r0, r8
 8009748:	f7ff fef4 	bl	8009534 <_free_r>
 800974c:	e7e1      	b.n	8009712 <_realloc_r+0x1e>
 800974e:	4635      	mov	r5, r6
 8009750:	e7df      	b.n	8009712 <_realloc_r+0x1e>
	...

08009754 <_sbrk_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d06      	ldr	r5, [pc, #24]	; (8009770 <_sbrk_r+0x1c>)
 8009758:	2300      	movs	r3, #0
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	602b      	str	r3, [r5, #0]
 8009760:	f7f7 fd6e 	bl	8001240 <_sbrk>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d102      	bne.n	800976e <_sbrk_r+0x1a>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	b103      	cbz	r3, 800976e <_sbrk_r+0x1a>
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	20002060 	.word	0x20002060

08009774 <__malloc_lock>:
 8009774:	4801      	ldr	r0, [pc, #4]	; (800977c <__malloc_lock+0x8>)
 8009776:	f000 b811 	b.w	800979c <__retarget_lock_acquire_recursive>
 800977a:	bf00      	nop
 800977c:	20002064 	.word	0x20002064

08009780 <__malloc_unlock>:
 8009780:	4801      	ldr	r0, [pc, #4]	; (8009788 <__malloc_unlock+0x8>)
 8009782:	f000 b80c 	b.w	800979e <__retarget_lock_release_recursive>
 8009786:	bf00      	nop
 8009788:	20002064 	.word	0x20002064

0800978c <_malloc_usable_size_r>:
 800978c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009790:	1f18      	subs	r0, r3, #4
 8009792:	2b00      	cmp	r3, #0
 8009794:	bfbc      	itt	lt
 8009796:	580b      	ldrlt	r3, [r1, r0]
 8009798:	18c0      	addlt	r0, r0, r3
 800979a:	4770      	bx	lr

0800979c <__retarget_lock_acquire_recursive>:
 800979c:	4770      	bx	lr

0800979e <__retarget_lock_release_recursive>:
 800979e:	4770      	bx	lr

080097a0 <_init>:
 80097a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a2:	bf00      	nop
 80097a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a6:	bc08      	pop	{r3}
 80097a8:	469e      	mov	lr, r3
 80097aa:	4770      	bx	lr

080097ac <_fini>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	bf00      	nop
 80097b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b2:	bc08      	pop	{r3}
 80097b4:	469e      	mov	lr, r3
 80097b6:	4770      	bx	lr
